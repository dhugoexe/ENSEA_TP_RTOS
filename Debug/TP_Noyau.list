
TP_Noyau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077e8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080079c8  080079c8  000089c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b2c  08007b2c  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b2c  08007b2c  00008b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b34  08007b34  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b34  08007b34  00008b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b38  08007b38  00008b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007b3c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c0c  2000006c  08007ba8  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c78  08007ba8  00009c78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cca9  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c55  00000000  00000000  00025d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  000299a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001341  00000000  00000000  0002b270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ffa  00000000  00000000  0002c5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a460  00000000  00000000  000315ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d21d3  00000000  00000000  0004ba0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011dbde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070d8  00000000  00000000  0011dc24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00124cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080079b0 	.word	0x080079b0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	080079b0 	.word	0x080079b0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005b8:	1d39      	adds	r1, r7, #4
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005be:	2201      	movs	r2, #1
 80005c0:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <__io_putchar+0x20>)
 80005c2:	f002 fcd9 	bl	8002f78 <HAL_UART_Transmit>
	return ch;
 80005c6:	687b      	ldr	r3, [r7, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200000d4 	.word	0x200000d4

080005d4 <LED_Task>:

void LED_Task()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005d8:	2120      	movs	r1, #32
 80005da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005de:	f000 ff29 	bl	8001434 <HAL_GPIO_TogglePin>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET)
 80005e2:	2120      	movs	r1, #32
 80005e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e8:	f000 fef4 	bl	80013d4 <HAL_GPIO_ReadPin>
		}
		else
		{
			//printf("LED OFF\r\n");
		}
		vTaskDelay(100/portTICK_PERIOD_MS); // portTICK_PERIOD_MS pour convertir les ticks en ms
 80005ec:	2064      	movs	r0, #100	@ 0x64
 80005ee:	f004 fc3f 	bl	8004e70 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005f2:	e7f1      	b.n	80005d8 <LED_Task+0x4>

080005f4 <give_Task>:
	}
}

void give_Task()
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	while(1)
	{
		timerValue = __HAL_TIM_GET_COUNTER(&htim2);
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <give_Task+0x4c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005fe:	4a11      	ldr	r2, [pc, #68]	@ (8000644 <give_Task+0x50>)
 8000600:	6013      	str	r3, [r2, #0]
		printf("TimeValue from Give Task:  %lu \r\n", timerValue);
 8000602:	4b10      	ldr	r3, [pc, #64]	@ (8000644 <give_Task+0x50>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4619      	mov	r1, r3
 8000608:	480f      	ldr	r0, [pc, #60]	@ (8000648 <give_Task+0x54>)
 800060a:	f006 faf7 	bl	8006bfc <iprintf>
		if(xQueueSend(timer_queue, &timerValue, 0) == pdTRUE)
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <give_Task+0x58>)
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	2200      	movs	r2, #0
 8000616:	490b      	ldr	r1, [pc, #44]	@ (8000644 <give_Task+0x50>)
 8000618:	f003 fe94 	bl	8004344 <xQueueGenericSend>
 800061c:	4603      	mov	r3, r0
 800061e:	2b01      	cmp	r3, #1
 8000620:	d102      	bne.n	8000628 <give_Task+0x34>
		{
			printf("TimeValue donnée \r\n");
 8000622:	480b      	ldr	r0, [pc, #44]	@ (8000650 <give_Task+0x5c>)
 8000624:	f006 fb52 	bl	8006ccc <puts>
		}
		//xSemaphoreGive(sem);
		xTaskNotifyGive(Take_TaskHandle);
 8000628:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <give_Task+0x60>)
 800062a:	6818      	ldr	r0, [r3, #0]
 800062c:	2300      	movs	r3, #0
 800062e:	2202      	movs	r2, #2
 8000630:	2100      	movs	r1, #0
 8000632:	f005 f977 	bl	8005924 <xTaskGenericNotify>
		vTaskDelay(1000/portTICK_PERIOD_MS);
 8000636:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800063a:	f004 fc19 	bl	8004e70 <vTaskDelay>
		timerValue = __HAL_TIM_GET_COUNTER(&htim2);
 800063e:	e7db      	b.n	80005f8 <give_Task+0x4>
 8000640:	20000088 	.word	0x20000088
 8000644:	2000017c 	.word	0x2000017c
 8000648:	080079d4 	.word	0x080079d4
 800064c:	20000178 	.word	0x20000178
 8000650:	080079f8 	.word	0x080079f8
 8000654:	20000174 	.word	0x20000174

08000658 <take_Task>:
	}

}

void take_Task()
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	while(1)
	{
		if(ulTaskNotifyTake(pdTRUE, 10000/portTICK_PERIOD_MS ))
 800065c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000660:	2001      	movs	r0, #1
 8000662:	f005 f917 	bl	8005894 <ulTaskNotifyTake>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d015      	beq.n	8000698 <take_Task+0x40>
		{
			if(xQueueSend(timer_queue, &receivedValue, portMAX_DELAY) == pdTRUE)
 800066c:	4b0d      	ldr	r3, [pc, #52]	@ (80006a4 <take_Task+0x4c>)
 800066e:	6818      	ldr	r0, [r3, #0]
 8000670:	2300      	movs	r3, #0
 8000672:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000676:	490c      	ldr	r1, [pc, #48]	@ (80006a8 <take_Task+0x50>)
 8000678:	f003 fe64 	bl	8004344 <xQueueGenericSend>
 800067c:	4603      	mov	r3, r0
 800067e:	2b01      	cmp	r3, #1
 8000680:	d105      	bne.n	800068e <take_Task+0x36>
					{
						printf("TimeValue:  %lu \r\n", receivedValue);
 8000682:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <take_Task+0x50>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4619      	mov	r1, r3
 8000688:	4808      	ldr	r0, [pc, #32]	@ (80006ac <take_Task+0x54>)
 800068a:	f006 fab7 	bl	8006bfc <iprintf>
					}
			vTaskDelay(1000/portTICK_PERIOD_MS);
 800068e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000692:	f004 fbed 	bl	8004e70 <vTaskDelay>
 8000696:	e7e1      	b.n	800065c <take_Task+0x4>
		}
		else
		{
			printf("Task_take n'a pas pris le sem \r\n");
 8000698:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <take_Task+0x58>)
 800069a:	f006 fb17 	bl	8006ccc <puts>
			break;
 800069e:	bf00      	nop
		}
		*/

	}

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000178 	.word	0x20000178
 80006a8:	20000180 	.word	0x20000180
 80006ac:	08007a0c 	.word	0x08007a0c
 80006b0:	08007a20 	.word	0x08007a20

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ba:	f000 fbf2 	bl	8000ea2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006be:	f000 f869 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f000 f94b 	bl	800095c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006c6:	f000 f8fd 	bl	80008c4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006ca:	f000 f8ad 	bl	8000828 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	printf("==== TD Noyau ==== \r\n");
 80006ce:	4821      	ldr	r0, [pc, #132]	@ (8000754 <main+0xa0>)
 80006d0:	f006 fafc 	bl	8006ccc <puts>

	sem = xSemaphoreCreateBinary();
 80006d4:	2203      	movs	r2, #3
 80006d6:	2100      	movs	r1, #0
 80006d8:	2001      	movs	r0, #1
 80006da:	f003 fdd4 	bl	8004286 <xQueueGenericCreate>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000758 <main+0xa4>)
 80006e2:	6013      	str	r3, [r2, #0]

	timer_queue = xQueueCreate(100, sizeof(uint32_t));
 80006e4:	2200      	movs	r2, #0
 80006e6:	2104      	movs	r1, #4
 80006e8:	2064      	movs	r0, #100	@ 0x64
 80006ea:	f003 fdcc 	bl	8004286 <xQueueGenericCreate>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a1a      	ldr	r2, [pc, #104]	@ (800075c <main+0xa8>)
 80006f2:	6013      	str	r3, [r2, #0]

	xTaskCreate(give_Task, "GiveTask", 128, NULL, 2, &Give_TaskHandle);
 80006f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <main+0xac>)
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	2302      	movs	r3, #2
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2300      	movs	r3, #0
 80006fe:	2280      	movs	r2, #128	@ 0x80
 8000700:	4918      	ldr	r1, [pc, #96]	@ (8000764 <main+0xb0>)
 8000702:	4819      	ldr	r0, [pc, #100]	@ (8000768 <main+0xb4>)
 8000704:	f004 fa6e 	bl	8004be4 <xTaskCreate>
	xTaskCreate(take_Task, "TakeTask", 128, NULL, 1, &Take_TaskHandle);
 8000708:	4b18      	ldr	r3, [pc, #96]	@ (800076c <main+0xb8>)
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	2301      	movs	r3, #1
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2300      	movs	r3, #0
 8000712:	2280      	movs	r2, #128	@ 0x80
 8000714:	4916      	ldr	r1, [pc, #88]	@ (8000770 <main+0xbc>)
 8000716:	4817      	ldr	r0, [pc, #92]	@ (8000774 <main+0xc0>)
 8000718:	f004 fa64 	bl	8004be4 <xTaskCreate>
	xTaskCreate(LED_Task, "LED_Task", 128, NULL, 3, &LED_TaskHandle);
 800071c:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <main+0xc4>)
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	2303      	movs	r3, #3
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2300      	movs	r3, #0
 8000726:	2280      	movs	r2, #128	@ 0x80
 8000728:	4914      	ldr	r1, [pc, #80]	@ (800077c <main+0xc8>)
 800072a:	4815      	ldr	r0, [pc, #84]	@ (8000780 <main+0xcc>)
 800072c:	f004 fa5a 	bl	8004be4 <xTaskCreate>

	HAL_TIM_Base_Start_IT(&htim2);
 8000730:	4814      	ldr	r0, [pc, #80]	@ (8000784 <main+0xd0>)
 8000732:	f001 fef5 	bl	8002520 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000736:	f003 fadf 	bl	8003cf8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800073a:	4a13      	ldr	r2, [pc, #76]	@ (8000788 <main+0xd4>)
 800073c:	2100      	movs	r1, #0
 800073e:	4813      	ldr	r0, [pc, #76]	@ (800078c <main+0xd8>)
 8000740:	f003 fb24 	bl	8003d8c <osThreadNew>
 8000744:	4603      	mov	r3, r0
 8000746:	4a12      	ldr	r2, [pc, #72]	@ (8000790 <main+0xdc>)
 8000748:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800074a:	f003 faf9 	bl	8003d40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800074e:	bf00      	nop
 8000750:	e7fd      	b.n	800074e <main+0x9a>
 8000752:	bf00      	nop
 8000754:	08007a40 	.word	0x08007a40
 8000758:	20000184 	.word	0x20000184
 800075c:	20000178 	.word	0x20000178
 8000760:	20000170 	.word	0x20000170
 8000764:	08007a58 	.word	0x08007a58
 8000768:	080005f5 	.word	0x080005f5
 800076c:	20000174 	.word	0x20000174
 8000770:	08007a64 	.word	0x08007a64
 8000774:	08000659 	.word	0x08000659
 8000778:	2000016c 	.word	0x2000016c
 800077c:	08007a70 	.word	0x08007a70
 8000780:	080005d5 	.word	0x080005d5
 8000784:	20000088 	.word	0x20000088
 8000788:	08007a94 	.word	0x08007a94
 800078c:	080009d9 	.word	0x080009d9
 8000790:	20000168 	.word	0x20000168

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b094      	sub	sp, #80	@ 0x50
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0318 	add.w	r3, r7, #24
 800079e:	2238      	movs	r2, #56	@ 0x38
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f006 fb72 	bl	8006e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 fe56 	bl	8001468 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c6:	2302      	movs	r3, #2
 80007c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ca:	2303      	movs	r3, #3
 80007cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80007ce:	2306      	movs	r3, #6
 80007d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007d2:	2355      	movs	r3, #85	@ 0x55
 80007d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007da:	2302      	movs	r3, #2
 80007dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007de:	2302      	movs	r3, #2
 80007e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e2:	f107 0318 	add.w	r3, r7, #24
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 fef2 	bl	80015d0 <HAL_RCC_OscConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80007f2:	f000 f90b 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f6:	230f      	movs	r3, #15
 80007f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fa:	2303      	movs	r3, #3
 80007fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2104      	movs	r1, #4
 800080e:	4618      	mov	r0, r3
 8000810:	f001 f9f0 	bl	8001bf4 <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800081a:	f000 f8f7 	bl	8000a0c <Error_Handler>
  }
}
 800081e:	bf00      	nop
 8000820:	3750      	adds	r7, #80	@ 0x50
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000846:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <MX_TIM2_Init+0x98>)
 8000848:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800084c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800084e:	4b1c      	ldr	r3, [pc, #112]	@ (80008c0 <MX_TIM2_Init+0x98>)
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000854:	4b1a      	ldr	r3, [pc, #104]	@ (80008c0 <MX_TIM2_Init+0x98>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800085a:	4b19      	ldr	r3, [pc, #100]	@ (80008c0 <MX_TIM2_Init+0x98>)
 800085c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000860:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000862:	4b17      	ldr	r3, [pc, #92]	@ (80008c0 <MX_TIM2_Init+0x98>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <MX_TIM2_Init+0x98>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800086e:	4814      	ldr	r0, [pc, #80]	@ (80008c0 <MX_TIM2_Init+0x98>)
 8000870:	f001 fdfe 	bl	8002470 <HAL_TIM_Base_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800087a:	f000 f8c7 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000882:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4619      	mov	r1, r3
 800088a:	480d      	ldr	r0, [pc, #52]	@ (80008c0 <MX_TIM2_Init+0x98>)
 800088c:	f002 f802 	bl	8002894 <HAL_TIM_ConfigClockSource>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000896:	f000 f8b9 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	4619      	mov	r1, r3
 80008a6:	4806      	ldr	r0, [pc, #24]	@ (80008c0 <MX_TIM2_Init+0x98>)
 80008a8:	f002 fa4e 	bl	8002d48 <HAL_TIMEx_MasterConfigSynchronization>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008b2:	f000 f8ab 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	3720      	adds	r7, #32
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000088 	.word	0x20000088

080008c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c8:	4b22      	ldr	r3, [pc, #136]	@ (8000954 <MX_USART2_UART_Init+0x90>)
 80008ca:	4a23      	ldr	r2, [pc, #140]	@ (8000958 <MX_USART2_UART_Init+0x94>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ce:	4b21      	ldr	r3, [pc, #132]	@ (8000954 <MX_USART2_UART_Init+0x90>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000954 <MX_USART2_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000954 <MX_USART2_UART_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000954 <MX_USART2_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <MX_USART2_UART_Init+0x90>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b19      	ldr	r3, [pc, #100]	@ (8000954 <MX_USART2_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <MX_USART2_UART_Init+0x90>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fa:	4b16      	ldr	r3, [pc, #88]	@ (8000954 <MX_USART2_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000900:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <MX_USART2_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000906:	4b13      	ldr	r3, [pc, #76]	@ (8000954 <MX_USART2_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090c:	4811      	ldr	r0, [pc, #68]	@ (8000954 <MX_USART2_UART_Init+0x90>)
 800090e:	f002 fae3 	bl	8002ed8 <HAL_UART_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000918:	f000 f878 	bl	8000a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091c:	2100      	movs	r1, #0
 800091e:	480d      	ldr	r0, [pc, #52]	@ (8000954 <MX_USART2_UART_Init+0x90>)
 8000920:	f003 f8dc 	bl	8003adc <HAL_UARTEx_SetTxFifoThreshold>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800092a:	f000 f86f 	bl	8000a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092e:	2100      	movs	r1, #0
 8000930:	4808      	ldr	r0, [pc, #32]	@ (8000954 <MX_USART2_UART_Init+0x90>)
 8000932:	f003 f911 	bl	8003b58 <HAL_UARTEx_SetRxFifoThreshold>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800093c:	f000 f866 	bl	8000a0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	@ (8000954 <MX_USART2_UART_Init+0x90>)
 8000942:	f003 f892 	bl	8003a6a <HAL_UARTEx_DisableFifoMode>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800094c:	f000 f85e 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200000d4 	.word	0x200000d4
 8000958:	40004400 	.word	0x40004400

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000972:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_GPIO_Init+0x78>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	4a17      	ldr	r2, [pc, #92]	@ (80009d4 <MX_GPIO_Init+0x78>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <MX_GPIO_Init+0x78>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	f003 0320 	and.w	r3, r3, #32
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_GPIO_Init+0x78>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	4a11      	ldr	r2, [pc, #68]	@ (80009d4 <MX_GPIO_Init+0x78>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000996:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_GPIO_Init+0x78>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2120      	movs	r1, #32
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009aa:	f000 fd2b 	bl	8001404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80009ae:	2320      	movs	r3, #32
 80009b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4619      	mov	r1, r3
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c8:	f000 fb82 	bl	80010d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009cc:	bf00      	nop
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40021000 	.word	0x40021000

080009d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f003 fa65 	bl	8003eb0 <osDelay>
 80009e6:	e7fb      	b.n	80009e0 <StartDefaultTask+0x8>

080009e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a04      	ldr	r2, [pc, #16]	@ (8000a08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d101      	bne.n	80009fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009fa:	f000 fa6b 	bl	8000ed4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40001000 	.word	0x40001000

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <Error_Handler+0x8>

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <HAL_MspInit+0x50>)
 8000a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a22:	4a11      	ldr	r2, [pc, #68]	@ (8000a68 <HAL_MspInit+0x50>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <HAL_MspInit+0x50>)
 8000a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <HAL_MspInit+0x50>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a68 <HAL_MspInit+0x50>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <HAL_MspInit+0x50>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	210f      	movs	r1, #15
 8000a52:	f06f 0001 	mvn.w	r0, #1
 8000a56:	f000 fb13 	bl	8001080 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a5a:	f000 fda9 	bl	80015b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a7c:	d113      	bne.n	8000aa6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <HAL_TIM_Base_MspInit+0x44>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a82:	4a0b      	ldr	r2, [pc, #44]	@ (8000ab0 <HAL_TIM_Base_MspInit+0x44>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a8a:	4b09      	ldr	r3, [pc, #36]	@ (8000ab0 <HAL_TIM_Base_MspInit+0x44>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2105      	movs	r1, #5
 8000a9a:	201c      	movs	r0, #28
 8000a9c:	f000 faf0 	bl	8001080 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000aa0:	201c      	movs	r0, #28
 8000aa2:	f000 fb07 	bl	80010b4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b09a      	sub	sp, #104	@ 0x68
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	2244      	movs	r2, #68	@ 0x44
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f006 f9d9 	bl	8006e8c <memset>
  if(huart->Instance==USART2)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a1f      	ldr	r2, [pc, #124]	@ (8000b5c <HAL_UART_MspInit+0xa8>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d136      	bne.n	8000b52 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 facd 	bl	8002090 <HAL_RCCEx_PeriphCLKConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000afc:	f7ff ff86 	bl	8000a0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b00:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <HAL_UART_MspInit+0xac>)
 8000b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b04:	4a16      	ldr	r2, [pc, #88]	@ (8000b60 <HAL_UART_MspInit+0xac>)
 8000b06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b0c:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <HAL_UART_MspInit+0xac>)
 8000b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <HAL_UART_MspInit+0xac>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1c:	4a10      	ldr	r2, [pc, #64]	@ (8000b60 <HAL_UART_MspInit+0xac>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b24:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <HAL_UART_MspInit+0xac>)
 8000b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b30:	230c      	movs	r3, #12
 8000b32:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b40:	2307      	movs	r3, #7
 8000b42:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b4e:	f000 fabf 	bl	80010d0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b52:	bf00      	nop
 8000b54:	3768      	adds	r7, #104	@ 0x68
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40004400 	.word	0x40004400
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08c      	sub	sp, #48	@ 0x30
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b74:	4b2c      	ldr	r3, [pc, #176]	@ (8000c28 <HAL_InitTick+0xc4>)
 8000b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b78:	4a2b      	ldr	r2, [pc, #172]	@ (8000c28 <HAL_InitTick+0xc4>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b80:	4b29      	ldr	r3, [pc, #164]	@ (8000c28 <HAL_InitTick+0xc4>)
 8000b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b84:	f003 0310 	and.w	r3, r3, #16
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b8c:	f107 020c 	add.w	r2, r7, #12
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	4611      	mov	r1, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 fa02 	bl	8001fa0 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b9c:	f001 f9d4 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8000ba0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba4:	4a21      	ldr	r2, [pc, #132]	@ (8000c2c <HAL_InitTick+0xc8>)
 8000ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8000baa:	0c9b      	lsrs	r3, r3, #18
 8000bac:	3b01      	subs	r3, #1
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <HAL_InitTick+0xcc>)
 8000bb2:	4a20      	ldr	r2, [pc, #128]	@ (8000c34 <HAL_InitTick+0xd0>)
 8000bb4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c30 <HAL_InitTick+0xcc>)
 8000bb8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bbc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8000c30 <HAL_InitTick+0xcc>)
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <HAL_InitTick+0xcc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <HAL_InitTick+0xcc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000bd0:	4817      	ldr	r0, [pc, #92]	@ (8000c30 <HAL_InitTick+0xcc>)
 8000bd2:	f001 fc4d 	bl	8002470 <HAL_TIM_Base_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000bdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d11b      	bne.n	8000c1c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000be4:	4812      	ldr	r0, [pc, #72]	@ (8000c30 <HAL_InitTick+0xcc>)
 8000be6:	f001 fc9b 	bl	8002520 <HAL_TIM_Base_Start_IT>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000bf0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d111      	bne.n	8000c1c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bf8:	2036      	movs	r0, #54	@ 0x36
 8000bfa:	f000 fa5b 	bl	80010b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d808      	bhi.n	8000c16 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c04:	2200      	movs	r2, #0
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	2036      	movs	r0, #54	@ 0x36
 8000c0a:	f000 fa39 	bl	8001080 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <HAL_InitTick+0xd4>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	e002      	b.n	8000c1c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3730      	adds	r7, #48	@ 0x30
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	431bde83 	.word	0x431bde83
 8000c30:	20000188 	.word	0x20000188
 8000c34:	40001000 	.word	0x40001000
 8000c38:	20000004 	.word	0x20000004

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <NMI_Handler+0x4>

08000c44 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <MemManage_Handler+0x4>

08000c54 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c64 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]

	timerValue = __HAL_TIM_GET_COUNTER(&htim6);
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <TIM2_IRQHandler+0x48>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c84:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc0 <TIM2_IRQHandler+0x4c>)
 8000c86:	6013      	str	r3, [r2, #0]

	xQueueSendFromISR(timer_queue, &timerValue, &xHigherPriorityTaskWoken);
 8000c88:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <TIM2_IRQHandler+0x50>)
 8000c8a:	6818      	ldr	r0, [r3, #0]
 8000c8c:	1d3a      	adds	r2, r7, #4
 8000c8e:	2300      	movs	r3, #0
 8000c90:	490b      	ldr	r1, [pc, #44]	@ (8000cc0 <TIM2_IRQHandler+0x4c>)
 8000c92:	f003 fc59 	bl	8004548 <xQueueGenericSendFromISR>

	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d007      	beq.n	8000cac <TIM2_IRQHandler+0x38>
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc8 <TIM2_IRQHandler+0x54>)
 8000c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	f3bf 8f4f 	dsb	sy
 8000ca8:	f3bf 8f6f 	isb	sy

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8000cac:	4807      	ldr	r0, [pc, #28]	@ (8000ccc <TIM2_IRQHandler+0x58>)
 8000cae:	f001 fca1 	bl	80025f4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000188 	.word	0x20000188
 8000cc0:	2000017c 	.word	0x2000017c
 8000cc4:	20000178 	.word	0x20000178
 8000cc8:	e000ed04 	.word	0xe000ed04
 8000ccc:	20000088 	.word	0x20000088

08000cd0 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */


	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 8000cd4:	4802      	ldr	r0, [pc, #8]	@ (8000ce0 <TIM6_DAC_IRQHandler+0x10>)
 8000cd6:	f001 fc8d 	bl	80025f4 <HAL_TIM_IRQHandler>




	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000188 	.word	0x20000188

08000ce4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	e00a      	b.n	8000d0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cf6:	f3af 8000 	nop.w
 8000cfa:	4601      	mov	r1, r0
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	60ba      	str	r2, [r7, #8]
 8000d02:	b2ca      	uxtb	r2, r1
 8000d04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	dbf0      	blt.n	8000cf6 <_read+0x12>
  }

  return len;
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b086      	sub	sp, #24
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	e009      	b.n	8000d44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	60ba      	str	r2, [r7, #8]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fc39 	bl	80005b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dbf1      	blt.n	8000d30 <_write+0x12>
  }
  return len;
 8000d4c:	687b      	ldr	r3, [r7, #4]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_close>:

int _close(int file)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d7e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_isatty>:

int _isatty(int file)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	@ (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	@ (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de2:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d207      	bcs.n	8000e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df0:	f006 f89a 	bl	8006f28 <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dfe:	e009      	b.n	8000e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e00:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e06:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a05      	ldr	r2, [pc, #20]	@ (8000e24 <_sbrk+0x64>)
 8000e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20008000 	.word	0x20008000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	200001d4 	.word	0x200001d4
 8000e28:	20001c78 	.word	0x20001c78

08000e2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	@ (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e50:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e52:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e54:	f7ff ffea 	bl	8000e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e58:	480c      	ldr	r0, [pc, #48]	@ (8000e8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5a:	490d      	ldr	r1, [pc, #52]	@ (8000e90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e94 <LoopForever+0xe>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e70:	4c0a      	ldr	r4, [pc, #40]	@ (8000e9c <LoopForever+0x16>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f006 f859 	bl	8006f34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e82:	f7ff fc17 	bl	80006b4 <main>

08000e86 <LoopForever>:

LoopForever:
    b LoopForever
 8000e86:	e7fe      	b.n	8000e86 <LoopForever>
  ldr   r0, =_estack
 8000e88:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e94:	08007b3c 	.word	0x08007b3c
  ldr r2, =_sbss
 8000e98:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e9c:	20001c78 	.word	0x20001c78

08000ea0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC1_2_IRQHandler>

08000ea2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 f8dc 	bl	800106a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb2:	200f      	movs	r0, #15
 8000eb4:	f7ff fe56 	bl	8000b64 <HAL_InitTick>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	e001      	b.n	8000ec8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ec4:	f7ff fda8 	bl	8000a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ec8:	79fb      	ldrb	r3, [r7, #7]

}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <HAL_IncTick+0x1c>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b05      	ldr	r3, [pc, #20]	@ (8000ef4 <HAL_IncTick+0x20>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a03      	ldr	r2, [pc, #12]	@ (8000ef0 <HAL_IncTick+0x1c>)
 8000ee4:	6013      	str	r3, [r2, #0]
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	200001d8 	.word	0x200001d8
 8000ef4:	20000008 	.word	0x20000008

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	200001d8 	.word	0x200001d8

08000f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	db0b      	blt.n	8000f9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 021f 	and.w	r2, r3, #31
 8000f8c:	4907      	ldr	r1, [pc, #28]	@ (8000fac <__NVIC_EnableIRQ+0x38>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	095b      	lsrs	r3, r3, #5
 8000f94:	2001      	movs	r0, #1
 8000f96:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e100 	.word	0xe000e100

08000fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	db0a      	blt.n	8000fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	490c      	ldr	r1, [pc, #48]	@ (8000ffc <__NVIC_SetPriority+0x4c>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	0112      	lsls	r2, r2, #4
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd8:	e00a      	b.n	8000ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4908      	ldr	r1, [pc, #32]	@ (8001000 <__NVIC_SetPriority+0x50>)
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	3b04      	subs	r3, #4
 8000fe8:	0112      	lsls	r2, r2, #4
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	440b      	add	r3, r1
 8000fee:	761a      	strb	r2, [r3, #24]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000e100 	.word	0xe000e100
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	@ 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f1c3 0307 	rsb	r3, r3, #7
 800101e:	2b04      	cmp	r3, #4
 8001020:	bf28      	it	cs
 8001022:	2304      	movcs	r3, #4
 8001024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3304      	adds	r3, #4
 800102a:	2b06      	cmp	r3, #6
 800102c:	d902      	bls.n	8001034 <NVIC_EncodePriority+0x30>
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3b03      	subs	r3, #3
 8001032:	e000      	b.n	8001036 <NVIC_EncodePriority+0x32>
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43da      	mvns	r2, r3
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	401a      	ands	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800104c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa01 f303 	lsl.w	r3, r1, r3
 8001056:	43d9      	mvns	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	4313      	orrs	r3, r2
         );
}
 800105e:	4618      	mov	r0, r3
 8001060:	3724      	adds	r7, #36	@ 0x24
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ff4c 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800108e:	f7ff ff63 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 8001092:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	68b9      	ldr	r1, [r7, #8]
 8001098:	6978      	ldr	r0, [r7, #20]
 800109a:	f7ff ffb3 	bl	8001004 <NVIC_EncodePriority>
 800109e:	4602      	mov	r2, r0
 80010a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a4:	4611      	mov	r1, r2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff82 	bl	8000fb0 <__NVIC_SetPriority>
}
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff56 	bl	8000f74 <__NVIC_EnableIRQ>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010de:	e15a      	b.n	8001396 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	2101      	movs	r1, #1
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	4013      	ands	r3, r2
 80010ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 814c 	beq.w	8001390 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b01      	cmp	r3, #1
 8001102:	d005      	beq.n	8001110 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800110c:	2b02      	cmp	r3, #2
 800110e:	d130      	bne.n	8001172 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001146:	2201      	movs	r2, #1
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	091b      	lsrs	r3, r3, #4
 800115c:	f003 0201 	and.w	r2, r3, #1
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	2b03      	cmp	r3, #3
 800117c:	d017      	beq.n	80011ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2203      	movs	r2, #3
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d123      	bne.n	8001202 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	08da      	lsrs	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3208      	adds	r2, #8
 80011c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	220f      	movs	r2, #15
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	691a      	ldr	r2, [r3, #16]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	6939      	ldr	r1, [r7, #16]
 80011fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	2203      	movs	r2, #3
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0203 	and.w	r2, r3, #3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800123e:	2b00      	cmp	r3, #0
 8001240:	f000 80a6 	beq.w	8001390 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001244:	4b5b      	ldr	r3, [pc, #364]	@ (80013b4 <HAL_GPIO_Init+0x2e4>)
 8001246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001248:	4a5a      	ldr	r2, [pc, #360]	@ (80013b4 <HAL_GPIO_Init+0x2e4>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001250:	4b58      	ldr	r3, [pc, #352]	@ (80013b4 <HAL_GPIO_Init+0x2e4>)
 8001252:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125c:	4a56      	ldr	r2, [pc, #344]	@ (80013b8 <HAL_GPIO_Init+0x2e8>)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	089b      	lsrs	r3, r3, #2
 8001262:	3302      	adds	r3, #2
 8001264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	220f      	movs	r2, #15
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001286:	d01f      	beq.n	80012c8 <HAL_GPIO_Init+0x1f8>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a4c      	ldr	r2, [pc, #304]	@ (80013bc <HAL_GPIO_Init+0x2ec>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d019      	beq.n	80012c4 <HAL_GPIO_Init+0x1f4>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a4b      	ldr	r2, [pc, #300]	@ (80013c0 <HAL_GPIO_Init+0x2f0>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d013      	beq.n	80012c0 <HAL_GPIO_Init+0x1f0>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a4a      	ldr	r2, [pc, #296]	@ (80013c4 <HAL_GPIO_Init+0x2f4>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d00d      	beq.n	80012bc <HAL_GPIO_Init+0x1ec>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a49      	ldr	r2, [pc, #292]	@ (80013c8 <HAL_GPIO_Init+0x2f8>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d007      	beq.n	80012b8 <HAL_GPIO_Init+0x1e8>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a48      	ldr	r2, [pc, #288]	@ (80013cc <HAL_GPIO_Init+0x2fc>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d101      	bne.n	80012b4 <HAL_GPIO_Init+0x1e4>
 80012b0:	2305      	movs	r3, #5
 80012b2:	e00a      	b.n	80012ca <HAL_GPIO_Init+0x1fa>
 80012b4:	2306      	movs	r3, #6
 80012b6:	e008      	b.n	80012ca <HAL_GPIO_Init+0x1fa>
 80012b8:	2304      	movs	r3, #4
 80012ba:	e006      	b.n	80012ca <HAL_GPIO_Init+0x1fa>
 80012bc:	2303      	movs	r3, #3
 80012be:	e004      	b.n	80012ca <HAL_GPIO_Init+0x1fa>
 80012c0:	2302      	movs	r3, #2
 80012c2:	e002      	b.n	80012ca <HAL_GPIO_Init+0x1fa>
 80012c4:	2301      	movs	r3, #1
 80012c6:	e000      	b.n	80012ca <HAL_GPIO_Init+0x1fa>
 80012c8:	2300      	movs	r3, #0
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	f002 0203 	and.w	r2, r2, #3
 80012d0:	0092      	lsls	r2, r2, #2
 80012d2:	4093      	lsls	r3, r2
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012da:	4937      	ldr	r1, [pc, #220]	@ (80013b8 <HAL_GPIO_Init+0x2e8>)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	089b      	lsrs	r3, r3, #2
 80012e0:	3302      	adds	r3, #2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012e8:	4b39      	ldr	r3, [pc, #228]	@ (80013d0 <HAL_GPIO_Init+0x300>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800130c:	4a30      	ldr	r2, [pc, #192]	@ (80013d0 <HAL_GPIO_Init+0x300>)
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001312:	4b2f      	ldr	r3, [pc, #188]	@ (80013d0 <HAL_GPIO_Init+0x300>)
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	43db      	mvns	r3, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001336:	4a26      	ldr	r2, [pc, #152]	@ (80013d0 <HAL_GPIO_Init+0x300>)
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800133c:	4b24      	ldr	r3, [pc, #144]	@ (80013d0 <HAL_GPIO_Init+0x300>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001360:	4a1b      	ldr	r2, [pc, #108]	@ (80013d0 <HAL_GPIO_Init+0x300>)
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001366:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <HAL_GPIO_Init+0x300>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	43db      	mvns	r3, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800138a:	4a11      	ldr	r2, [pc, #68]	@ (80013d0 <HAL_GPIO_Init+0x300>)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3301      	adds	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	fa22 f303 	lsr.w	r3, r2, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f47f ae9d 	bne.w	80010e0 <HAL_GPIO_Init+0x10>
  }
}
 80013a6:	bf00      	nop
 80013a8:	bf00      	nop
 80013aa:	371c      	adds	r7, #28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010000 	.word	0x40010000
 80013bc:	48000400 	.word	0x48000400
 80013c0:	48000800 	.word	0x48000800
 80013c4:	48000c00 	.word	0x48000c00
 80013c8:	48001000 	.word	0x48001000
 80013cc:	48001400 	.word	0x48001400
 80013d0:	40010400 	.word	0x40010400

080013d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	887b      	ldrh	r3, [r7, #2]
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013ec:	2301      	movs	r3, #1
 80013ee:	73fb      	strb	r3, [r7, #15]
 80013f0:	e001      	b.n	80013f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
 8001410:	4613      	mov	r3, r2
 8001412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001414:	787b      	ldrb	r3, [r7, #1]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800141a:	887a      	ldrh	r2, [r7, #2]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001420:	e002      	b.n	8001428 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001422:	887a      	ldrh	r2, [r7, #2]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4013      	ands	r3, r2
 800144c:	041a      	lsls	r2, r3, #16
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	43d9      	mvns	r1, r3
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	400b      	ands	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	619a      	str	r2, [r3, #24]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d141      	bne.n	80014fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001476:	4b4b      	ldr	r3, [pc, #300]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800147e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001482:	d131      	bne.n	80014e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001484:	4b47      	ldr	r3, [pc, #284]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800148a:	4a46      	ldr	r2, [pc, #280]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800148c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001490:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001494:	4b43      	ldr	r3, [pc, #268]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800149c:	4a41      	ldr	r2, [pc, #260]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014a4:	4b40      	ldr	r3, [pc, #256]	@ (80015a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2232      	movs	r2, #50	@ 0x32
 80014aa:	fb02 f303 	mul.w	r3, r2, r3
 80014ae:	4a3f      	ldr	r2, [pc, #252]	@ (80015ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014b0:	fba2 2303 	umull	r2, r3, r2, r3
 80014b4:	0c9b      	lsrs	r3, r3, #18
 80014b6:	3301      	adds	r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ba:	e002      	b.n	80014c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	3b01      	subs	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c2:	4b38      	ldr	r3, [pc, #224]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014ce:	d102      	bne.n	80014d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f2      	bne.n	80014bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014d6:	4b33      	ldr	r3, [pc, #204]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014e2:	d158      	bne.n	8001596 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e057      	b.n	8001598 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014e8:	4b2e      	ldr	r3, [pc, #184]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014ee:	4a2d      	ldr	r2, [pc, #180]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014f8:	e04d      	b.n	8001596 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001500:	d141      	bne.n	8001586 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001502:	4b28      	ldr	r3, [pc, #160]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800150a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800150e:	d131      	bne.n	8001574 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001510:	4b24      	ldr	r3, [pc, #144]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001512:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001516:	4a23      	ldr	r2, [pc, #140]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800151c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001520:	4b20      	ldr	r3, [pc, #128]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001528:	4a1e      	ldr	r2, [pc, #120]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800152e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001530:	4b1d      	ldr	r3, [pc, #116]	@ (80015a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2232      	movs	r2, #50	@ 0x32
 8001536:	fb02 f303 	mul.w	r3, r2, r3
 800153a:	4a1c      	ldr	r2, [pc, #112]	@ (80015ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800153c:	fba2 2303 	umull	r2, r3, r2, r3
 8001540:	0c9b      	lsrs	r3, r3, #18
 8001542:	3301      	adds	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001546:	e002      	b.n	800154e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	3b01      	subs	r3, #1
 800154c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800154e:	4b15      	ldr	r3, [pc, #84]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800155a:	d102      	bne.n	8001562 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f2      	bne.n	8001548 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800156a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800156e:	d112      	bne.n	8001596 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e011      	b.n	8001598 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001574:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001576:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800157a:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800157c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001580:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001584:	e007      	b.n	8001596 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001586:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800158e:	4a05      	ldr	r2, [pc, #20]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001590:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001594:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	40007000 	.word	0x40007000
 80015a8:	20000000 	.word	0x20000000
 80015ac:	431bde83 	.word	0x431bde83

080015b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80015b4:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015be:	6093      	str	r3, [r2, #8]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40007000 	.word	0x40007000

080015d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e2fe      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d075      	beq.n	80016da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ee:	4b97      	ldr	r3, [pc, #604]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015f8:	4b94      	ldr	r3, [pc, #592]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	2b0c      	cmp	r3, #12
 8001606:	d102      	bne.n	800160e <HAL_RCC_OscConfig+0x3e>
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	2b03      	cmp	r3, #3
 800160c:	d002      	beq.n	8001614 <HAL_RCC_OscConfig+0x44>
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	2b08      	cmp	r3, #8
 8001612:	d10b      	bne.n	800162c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001614:	4b8d      	ldr	r3, [pc, #564]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d05b      	beq.n	80016d8 <HAL_RCC_OscConfig+0x108>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d157      	bne.n	80016d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e2d9      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001634:	d106      	bne.n	8001644 <HAL_RCC_OscConfig+0x74>
 8001636:	4b85      	ldr	r3, [pc, #532]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a84      	ldr	r2, [pc, #528]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 800163c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e01d      	b.n	8001680 <HAL_RCC_OscConfig+0xb0>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800164c:	d10c      	bne.n	8001668 <HAL_RCC_OscConfig+0x98>
 800164e:	4b7f      	ldr	r3, [pc, #508]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a7e      	ldr	r2, [pc, #504]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 8001654:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	4b7c      	ldr	r3, [pc, #496]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a7b      	ldr	r2, [pc, #492]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 8001660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e00b      	b.n	8001680 <HAL_RCC_OscConfig+0xb0>
 8001668:	4b78      	ldr	r3, [pc, #480]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a77      	ldr	r2, [pc, #476]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 800166e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b75      	ldr	r3, [pc, #468]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a74      	ldr	r2, [pc, #464]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 800167a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800167e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d013      	beq.n	80016b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fc36 	bl	8000ef8 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001690:	f7ff fc32 	bl	8000ef8 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	@ 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e29e      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016a2:	4b6a      	ldr	r3, [pc, #424]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0xc0>
 80016ae:	e014      	b.n	80016da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b0:	f7ff fc22 	bl	8000ef8 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff fc1e 	bl	8000ef8 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	@ 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e28a      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ca:	4b60      	ldr	r3, [pc, #384]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0xe8>
 80016d6:	e000      	b.n	80016da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d075      	beq.n	80017d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016e6:	4b59      	ldr	r3, [pc, #356]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 030c 	and.w	r3, r3, #12
 80016ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016f0:	4b56      	ldr	r3, [pc, #344]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	2b0c      	cmp	r3, #12
 80016fe:	d102      	bne.n	8001706 <HAL_RCC_OscConfig+0x136>
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d002      	beq.n	800170c <HAL_RCC_OscConfig+0x13c>
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	2b04      	cmp	r3, #4
 800170a:	d11f      	bne.n	800174c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800170c:	4b4f      	ldr	r3, [pc, #316]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_OscConfig+0x154>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e25d      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001724:	4b49      	ldr	r3, [pc, #292]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	061b      	lsls	r3, r3, #24
 8001732:	4946      	ldr	r1, [pc, #280]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001738:	4b45      	ldr	r3, [pc, #276]	@ (8001850 <HAL_RCC_OscConfig+0x280>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fa11 	bl	8000b64 <HAL_InitTick>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d043      	beq.n	80017d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e249      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d023      	beq.n	800179c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001754:	4b3d      	ldr	r3, [pc, #244]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a3c      	ldr	r2, [pc, #240]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 800175a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800175e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff fbca 	bl	8000ef8 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001768:	f7ff fbc6 	bl	8000ef8 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e232      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800177a:	4b34      	ldr	r3, [pc, #208]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001786:	4b31      	ldr	r3, [pc, #196]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	061b      	lsls	r3, r3, #24
 8001794:	492d      	ldr	r1, [pc, #180]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 8001796:	4313      	orrs	r3, r2
 8001798:	604b      	str	r3, [r1, #4]
 800179a:	e01a      	b.n	80017d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800179c:	4b2b      	ldr	r3, [pc, #172]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a2a      	ldr	r2, [pc, #168]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 80017a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fba6 	bl	8000ef8 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff fba2 	bl	8000ef8 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e20e      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017c2:	4b22      	ldr	r3, [pc, #136]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x1e0>
 80017ce:	e000      	b.n	80017d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d041      	beq.n	8001862 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d01c      	beq.n	8001820 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e6:	4b19      	ldr	r3, [pc, #100]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 80017e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017ec:	4a17      	ldr	r2, [pc, #92]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f6:	f7ff fb7f 	bl	8000ef8 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017fe:	f7ff fb7b 	bl	8000ef8 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e1e7      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001810:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 8001812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0ef      	beq.n	80017fe <HAL_RCC_OscConfig+0x22e>
 800181e:	e020      	b.n	8001862 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001820:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 8001822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001826:	4a09      	ldr	r2, [pc, #36]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 8001828:	f023 0301 	bic.w	r3, r3, #1
 800182c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001830:	f7ff fb62 	bl	8000ef8 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001836:	e00d      	b.n	8001854 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001838:	f7ff fb5e 	bl	8000ef8 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d906      	bls.n	8001854 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e1ca      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
 8001850:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001854:	4b8c      	ldr	r3, [pc, #560]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 8001856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1ea      	bne.n	8001838 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 80a6 	beq.w	80019bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001874:	4b84      	ldr	r3, [pc, #528]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 8001876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_RCC_OscConfig+0x2b4>
 8001880:	2301      	movs	r3, #1
 8001882:	e000      	b.n	8001886 <HAL_RCC_OscConfig+0x2b6>
 8001884:	2300      	movs	r3, #0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00d      	beq.n	80018a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001894:	6593      	str	r3, [r2, #88]	@ 0x58
 8001896:	4b7c      	ldr	r3, [pc, #496]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 8001898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018a2:	2301      	movs	r3, #1
 80018a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a6:	4b79      	ldr	r3, [pc, #484]	@ (8001a8c <HAL_RCC_OscConfig+0x4bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d118      	bne.n	80018e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018b2:	4b76      	ldr	r3, [pc, #472]	@ (8001a8c <HAL_RCC_OscConfig+0x4bc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a75      	ldr	r2, [pc, #468]	@ (8001a8c <HAL_RCC_OscConfig+0x4bc>)
 80018b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018be:	f7ff fb1b 	bl	8000ef8 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c6:	f7ff fb17 	bl	8000ef8 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e183      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d8:	4b6c      	ldr	r3, [pc, #432]	@ (8001a8c <HAL_RCC_OscConfig+0x4bc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d108      	bne.n	80018fe <HAL_RCC_OscConfig+0x32e>
 80018ec:	4b66      	ldr	r3, [pc, #408]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 80018ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018f2:	4a65      	ldr	r2, [pc, #404]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018fc:	e024      	b.n	8001948 <HAL_RCC_OscConfig+0x378>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b05      	cmp	r3, #5
 8001904:	d110      	bne.n	8001928 <HAL_RCC_OscConfig+0x358>
 8001906:	4b60      	ldr	r3, [pc, #384]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 8001908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800190c:	4a5e      	ldr	r2, [pc, #376]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001916:	4b5c      	ldr	r3, [pc, #368]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 8001918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800191c:	4a5a      	ldr	r2, [pc, #360]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001926:	e00f      	b.n	8001948 <HAL_RCC_OscConfig+0x378>
 8001928:	4b57      	ldr	r3, [pc, #348]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 800192a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800192e:	4a56      	ldr	r2, [pc, #344]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 8001930:	f023 0301 	bic.w	r3, r3, #1
 8001934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001938:	4b53      	ldr	r3, [pc, #332]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 800193a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800193e:	4a52      	ldr	r2, [pc, #328]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 8001940:	f023 0304 	bic.w	r3, r3, #4
 8001944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d016      	beq.n	800197e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff fad2 	bl	8000ef8 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001956:	e00a      	b.n	800196e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001958:	f7ff face 	bl	8000ef8 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e138      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800196e:	4b46      	ldr	r3, [pc, #280]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 8001970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0ed      	beq.n	8001958 <HAL_RCC_OscConfig+0x388>
 800197c:	e015      	b.n	80019aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7ff fabb 	bl	8000ef8 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001984:	e00a      	b.n	800199c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001986:	f7ff fab7 	bl	8000ef8 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001994:	4293      	cmp	r3, r2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e121      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800199c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 800199e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1ed      	bne.n	8001986 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019aa:	7ffb      	ldrb	r3, [r7, #31]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d105      	bne.n	80019bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b0:	4b35      	ldr	r3, [pc, #212]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b4:	4a34      	ldr	r2, [pc, #208]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 80019b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0320 	and.w	r3, r3, #32
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d03c      	beq.n	8001a42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 80019d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e0:	f7ff fa8a 	bl	8000ef8 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019e8:	f7ff fa86 	bl	8000ef8 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e0f2      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019fa:	4b23      	ldr	r3, [pc, #140]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 80019fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0ef      	beq.n	80019e8 <HAL_RCC_OscConfig+0x418>
 8001a08:	e01b      	b.n	8001a42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 8001a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a10:	4a1d      	ldr	r2, [pc, #116]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1a:	f7ff fa6d 	bl	8000ef8 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a22:	f7ff fa69 	bl	8000ef8 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e0d5      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a34:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 8001a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1ef      	bne.n	8001a22 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 80c9 	beq.w	8001bde <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b0c      	cmp	r3, #12
 8001a56:	f000 8083 	beq.w	8001b60 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d15e      	bne.n	8001b20 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a08      	ldr	r2, [pc, #32]	@ (8001a88 <HAL_RCC_OscConfig+0x4b8>)
 8001a68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6e:	f7ff fa43 	bl	8000ef8 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a74:	e00c      	b.n	8001a90 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a76:	f7ff fa3f 	bl	8000ef8 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d905      	bls.n	8001a90 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e0ab      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a90:	4b55      	ldr	r3, [pc, #340]	@ (8001be8 <HAL_RCC_OscConfig+0x618>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1ec      	bne.n	8001a76 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9c:	4b52      	ldr	r3, [pc, #328]	@ (8001be8 <HAL_RCC_OscConfig+0x618>)
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	4b52      	ldr	r3, [pc, #328]	@ (8001bec <HAL_RCC_OscConfig+0x61c>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6a11      	ldr	r1, [r2, #32]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001aac:	3a01      	subs	r2, #1
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	4311      	orrs	r1, r2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001ab6:	0212      	lsls	r2, r2, #8
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001abe:	0852      	lsrs	r2, r2, #1
 8001ac0:	3a01      	subs	r2, #1
 8001ac2:	0552      	lsls	r2, r2, #21
 8001ac4:	4311      	orrs	r1, r2
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001aca:	0852      	lsrs	r2, r2, #1
 8001acc:	3a01      	subs	r2, #1
 8001ace:	0652      	lsls	r2, r2, #25
 8001ad0:	4311      	orrs	r1, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ad6:	06d2      	lsls	r2, r2, #27
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	4943      	ldr	r1, [pc, #268]	@ (8001be8 <HAL_RCC_OscConfig+0x618>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae0:	4b41      	ldr	r3, [pc, #260]	@ (8001be8 <HAL_RCC_OscConfig+0x618>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a40      	ldr	r2, [pc, #256]	@ (8001be8 <HAL_RCC_OscConfig+0x618>)
 8001ae6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001aec:	4b3e      	ldr	r3, [pc, #248]	@ (8001be8 <HAL_RCC_OscConfig+0x618>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4a3d      	ldr	r2, [pc, #244]	@ (8001be8 <HAL_RCC_OscConfig+0x618>)
 8001af2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001af6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff f9fe 	bl	8000ef8 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff f9fa 	bl	8000ef8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e066      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b12:	4b35      	ldr	r3, [pc, #212]	@ (8001be8 <HAL_RCC_OscConfig+0x618>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x530>
 8001b1e:	e05e      	b.n	8001bde <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b20:	4b31      	ldr	r3, [pc, #196]	@ (8001be8 <HAL_RCC_OscConfig+0x618>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a30      	ldr	r2, [pc, #192]	@ (8001be8 <HAL_RCC_OscConfig+0x618>)
 8001b26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff f9e4 	bl	8000ef8 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b34:	f7ff f9e0 	bl	8000ef8 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e04c      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b46:	4b28      	ldr	r3, [pc, #160]	@ (8001be8 <HAL_RCC_OscConfig+0x618>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b52:	4b25      	ldr	r3, [pc, #148]	@ (8001be8 <HAL_RCC_OscConfig+0x618>)
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	4924      	ldr	r1, [pc, #144]	@ (8001be8 <HAL_RCC_OscConfig+0x618>)
 8001b58:	4b25      	ldr	r3, [pc, #148]	@ (8001bf0 <HAL_RCC_OscConfig+0x620>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	60cb      	str	r3, [r1, #12]
 8001b5e:	e03e      	b.n	8001bde <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e039      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001be8 <HAL_RCC_OscConfig+0x618>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f003 0203 	and.w	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d12c      	bne.n	8001bda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d123      	bne.n	8001bda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d11b      	bne.n	8001bda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d113      	bne.n	8001bda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbc:	085b      	lsrs	r3, r3, #1
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d109      	bne.n	8001bda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bd0:	085b      	lsrs	r3, r3, #1
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40021000 	.word	0x40021000
 8001bec:	019f800c 	.word	0x019f800c
 8001bf0:	feeefffc 	.word	0xfeeefffc

08001bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e11e      	b.n	8001e4a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b91      	ldr	r3, [pc, #580]	@ (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d910      	bls.n	8001c3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1a:	4b8e      	ldr	r3, [pc, #568]	@ (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 020f 	bic.w	r2, r3, #15
 8001c22:	498c      	ldr	r1, [pc, #560]	@ (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2a:	4b8a      	ldr	r3, [pc, #552]	@ (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e106      	b.n	8001e4a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d073      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d129      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c50:	4b81      	ldr	r3, [pc, #516]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0f4      	b.n	8001e4a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c60:	f000 f9d0 	bl	8002004 <RCC_GetSysClockFreqFromPLLSource>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4a7c      	ldr	r2, [pc, #496]	@ (8001e5c <HAL_RCC_ClockConfig+0x268>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d93f      	bls.n	8001cee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c6e:	4b7a      	ldr	r3, [pc, #488]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d009      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d033      	beq.n	8001cee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d12f      	bne.n	8001cee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c8e:	4b72      	ldr	r3, [pc, #456]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c96:	4a70      	ldr	r2, [pc, #448]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001c98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c9e:	2380      	movs	r3, #128	@ 0x80
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	e024      	b.n	8001cee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cac:	4b6a      	ldr	r3, [pc, #424]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d109      	bne.n	8001ccc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0c6      	b.n	8001e4a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cbc:	4b66      	ldr	r3, [pc, #408]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0be      	b.n	8001e4a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ccc:	f000 f8ce 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4a61      	ldr	r2, [pc, #388]	@ (8001e5c <HAL_RCC_ClockConfig+0x268>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d909      	bls.n	8001cee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cda:	4b5f      	ldr	r3, [pc, #380]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ce2:	4a5d      	ldr	r2, [pc, #372]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ce8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001cea:	2380      	movs	r3, #128	@ 0x80
 8001cec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cee:	4b5a      	ldr	r3, [pc, #360]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f023 0203 	bic.w	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4957      	ldr	r1, [pc, #348]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d00:	f7ff f8fa 	bl	8000ef8 <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d08:	f7ff f8f6 	bl	8000ef8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e095      	b.n	8001e4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1e:	4b4e      	ldr	r3, [pc, #312]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 020c 	and.w	r2, r3, #12
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d1eb      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d023      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d48:	4b43      	ldr	r3, [pc, #268]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	4a42      	ldr	r2, [pc, #264]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001d4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d52:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d60:	4b3d      	ldr	r3, [pc, #244]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001d68:	4a3b      	ldr	r2, [pc, #236]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001d6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d70:	4b39      	ldr	r3, [pc, #228]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4936      	ldr	r1, [pc, #216]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2b80      	cmp	r3, #128	@ 0x80
 8001d88:	d105      	bne.n	8001d96 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d8a:	4b33      	ldr	r3, [pc, #204]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	4a32      	ldr	r2, [pc, #200]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001d90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d94:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d96:	4b2f      	ldr	r3, [pc, #188]	@ (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d21d      	bcs.n	8001de0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f023 020f 	bic.w	r2, r3, #15
 8001dac:	4929      	ldr	r1, [pc, #164]	@ (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001db4:	f7ff f8a0 	bl	8000ef8 <HAL_GetTick>
 8001db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dbc:	f7ff f89c 	bl	8000ef8 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e03b      	b.n	8001e4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b20      	ldr	r3, [pc, #128]	@ (8001e54 <HAL_RCC_ClockConfig+0x260>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d1ed      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dec:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	4917      	ldr	r1, [pc, #92]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d009      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e0a:	4b13      	ldr	r3, [pc, #76]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	490f      	ldr	r1, [pc, #60]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e1e:	f000 f825 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8001e22:	4602      	mov	r2, r0
 8001e24:	4b0c      	ldr	r3, [pc, #48]	@ (8001e58 <HAL_RCC_ClockConfig+0x264>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	490c      	ldr	r1, [pc, #48]	@ (8001e60 <HAL_RCC_ClockConfig+0x26c>)
 8001e30:	5ccb      	ldrb	r3, [r1, r3]
 8001e32:	f003 031f 	and.w	r3, r3, #31
 8001e36:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <HAL_RCC_ClockConfig+0x270>)
 8001e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e68 <HAL_RCC_ClockConfig+0x274>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fe8e 	bl	8000b64 <HAL_InitTick>
 8001e48:	4603      	mov	r3, r0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40022000 	.word	0x40022000
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	04c4b400 	.word	0x04c4b400
 8001e60:	08007ab8 	.word	0x08007ab8
 8001e64:	20000000 	.word	0x20000000
 8001e68:	20000004 	.word	0x20000004

08001e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e72:	4b2c      	ldr	r3, [pc, #176]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d102      	bne.n	8001e84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	e047      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e84:	4b27      	ldr	r3, [pc, #156]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d102      	bne.n	8001e96 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e90:	4b26      	ldr	r3, [pc, #152]	@ (8001f2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	e03e      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001e96:	4b23      	ldr	r3, [pc, #140]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d136      	bne.n	8001f10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ea2:	4b20      	ldr	r3, [pc, #128]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001eac:	4b1d      	ldr	r3, [pc, #116]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d10c      	bne.n	8001eda <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ec0:	4a1a      	ldr	r2, [pc, #104]	@ (8001f2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec8:	4a16      	ldr	r2, [pc, #88]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eca:	68d2      	ldr	r2, [r2, #12]
 8001ecc:	0a12      	lsrs	r2, r2, #8
 8001ece:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ed2:	fb02 f303 	mul.w	r3, r2, r3
 8001ed6:	617b      	str	r3, [r7, #20]
      break;
 8001ed8:	e00c      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001eda:	4a13      	ldr	r2, [pc, #76]	@ (8001f28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	4a10      	ldr	r2, [pc, #64]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee4:	68d2      	ldr	r2, [r2, #12]
 8001ee6:	0a12      	lsrs	r2, r2, #8
 8001ee8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001eec:	fb02 f303 	mul.w	r3, r2, r3
 8001ef0:	617b      	str	r3, [r7, #20]
      break;
 8001ef2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0e5b      	lsrs	r3, r3, #25
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	3301      	adds	r3, #1
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	e001      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f14:	693b      	ldr	r3, [r7, #16]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000
 8001f28:	00f42400 	.word	0x00f42400
 8001f2c:	016e3600 	.word	0x016e3600

08001f30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f34:	4b03      	ldr	r3, [pc, #12]	@ (8001f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000000 	.word	0x20000000

08001f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f4c:	f7ff fff0 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	0a1b      	lsrs	r3, r3, #8
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	4904      	ldr	r1, [pc, #16]	@ (8001f70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	08007ac8 	.word	0x08007ac8

08001f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f78:	f7ff ffda 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	0adb      	lsrs	r3, r3, #11
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	4904      	ldr	r1, [pc, #16]	@ (8001f9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f8a:	5ccb      	ldrb	r3, [r1, r3]
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	08007ac8 	.word	0x08007ac8

08001fa0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	220f      	movs	r2, #15
 8001fae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001fb0:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_RCC_GetClockConfig+0x5c>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0203 	and.w	r2, r3, #3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <HAL_RCC_GetClockConfig+0x5c>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <HAL_RCC_GetClockConfig+0x5c>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001fd4:	4b09      	ldr	r3, [pc, #36]	@ (8001ffc <HAL_RCC_GetClockConfig+0x5c>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	08db      	lsrs	r3, r3, #3
 8001fda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001fe2:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <HAL_RCC_GetClockConfig+0x60>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 020f 	and.w	r2, r3, #15
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	601a      	str	r2, [r3, #0]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40022000 	.word	0x40022000

08002004 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800200a:	4b1e      	ldr	r3, [pc, #120]	@ (8002084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002014:	4b1b      	ldr	r3, [pc, #108]	@ (8002084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	3301      	adds	r3, #1
 8002020:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d10c      	bne.n	8002042 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002028:	4a17      	ldr	r2, [pc, #92]	@ (8002088 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002030:	4a14      	ldr	r2, [pc, #80]	@ (8002084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002032:	68d2      	ldr	r2, [r2, #12]
 8002034:	0a12      	lsrs	r2, r2, #8
 8002036:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800203a:	fb02 f303 	mul.w	r3, r2, r3
 800203e:	617b      	str	r3, [r7, #20]
    break;
 8002040:	e00c      	b.n	800205c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002042:	4a12      	ldr	r2, [pc, #72]	@ (800208c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	fbb2 f3f3 	udiv	r3, r2, r3
 800204a:	4a0e      	ldr	r2, [pc, #56]	@ (8002084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800204c:	68d2      	ldr	r2, [r2, #12]
 800204e:	0a12      	lsrs	r2, r2, #8
 8002050:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002054:	fb02 f303 	mul.w	r3, r2, r3
 8002058:	617b      	str	r3, [r7, #20]
    break;
 800205a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800205c:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	0e5b      	lsrs	r3, r3, #25
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	3301      	adds	r3, #1
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	fbb2 f3f3 	udiv	r3, r2, r3
 8002074:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002076:	687b      	ldr	r3, [r7, #4]
}
 8002078:	4618      	mov	r0, r3
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	40021000 	.word	0x40021000
 8002088:	016e3600 	.word	0x016e3600
 800208c:	00f42400 	.word	0x00f42400

08002090 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002098:	2300      	movs	r3, #0
 800209a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800209c:	2300      	movs	r3, #0
 800209e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8098 	beq.w	80021de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b2:	4b43      	ldr	r3, [pc, #268]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10d      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	4b40      	ldr	r3, [pc, #256]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c2:	4a3f      	ldr	r2, [pc, #252]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ca:	4b3d      	ldr	r3, [pc, #244]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d6:	2301      	movs	r3, #1
 80020d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020da:	4b3a      	ldr	r3, [pc, #232]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a39      	ldr	r2, [pc, #228]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020e6:	f7fe ff07 	bl	8000ef8 <HAL_GetTick>
 80020ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020ec:	e009      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ee:	f7fe ff03 	bl	8000ef8 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d902      	bls.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	74fb      	strb	r3, [r7, #19]
        break;
 8002100:	e005      	b.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002102:	4b30      	ldr	r3, [pc, #192]	@ (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0ef      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800210e:	7cfb      	ldrb	r3, [r7, #19]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d159      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002114:	4b2a      	ldr	r3, [pc, #168]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800211e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d01e      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	429a      	cmp	r2, r3
 800212e:	d019      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002130:	4b23      	ldr	r3, [pc, #140]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002136:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800213a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800213c:	4b20      	ldr	r3, [pc, #128]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002142:	4a1f      	ldr	r2, [pc, #124]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800214c:	4b1c      	ldr	r3, [pc, #112]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002152:	4a1b      	ldr	r2, [pc, #108]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002158:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800215c:	4a18      	ldr	r2, [pc, #96]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d016      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216e:	f7fe fec3 	bl	8000ef8 <HAL_GetTick>
 8002172:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002174:	e00b      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7fe febf 	bl	8000ef8 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d902      	bls.n	800218e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	74fb      	strb	r3, [r7, #19]
            break;
 800218c:	e006      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800218e:	4b0c      	ldr	r3, [pc, #48]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ec      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10b      	bne.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021a2:	4b07      	ldr	r3, [pc, #28]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	4903      	ldr	r1, [pc, #12]	@ (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80021b8:	e008      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021ba:	7cfb      	ldrb	r3, [r7, #19]
 80021bc:	74bb      	strb	r3, [r7, #18]
 80021be:	e005      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021cc:	7c7b      	ldrb	r3, [r7, #17]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d105      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d2:	4ba6      	ldr	r3, [pc, #664]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d6:	4aa5      	ldr	r2, [pc, #660]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ea:	4ba0      	ldr	r3, [pc, #640]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f0:	f023 0203 	bic.w	r2, r3, #3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	499c      	ldr	r1, [pc, #624]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800220c:	4b97      	ldr	r3, [pc, #604]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002212:	f023 020c 	bic.w	r2, r3, #12
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	4994      	ldr	r1, [pc, #592]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800222e:	4b8f      	ldr	r3, [pc, #572]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002234:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	498b      	ldr	r1, [pc, #556]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002250:	4b86      	ldr	r3, [pc, #536]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002256:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	4983      	ldr	r1, [pc, #524]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002272:	4b7e      	ldr	r3, [pc, #504]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002278:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	497a      	ldr	r1, [pc, #488]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002294:	4b75      	ldr	r3, [pc, #468]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	4972      	ldr	r1, [pc, #456]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022b6:	4b6d      	ldr	r3, [pc, #436]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	4969      	ldr	r1, [pc, #420]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022d8:	4b64      	ldr	r3, [pc, #400]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	4961      	ldr	r1, [pc, #388]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022fa:	4b5c      	ldr	r3, [pc, #368]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002300:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002308:	4958      	ldr	r1, [pc, #352]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002318:	2b00      	cmp	r3, #0
 800231a:	d015      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800231c:	4b53      	ldr	r3, [pc, #332]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002322:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232a:	4950      	ldr	r1, [pc, #320]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800233a:	d105      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800233c:	4b4b      	ldr	r3, [pc, #300]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a4a      	ldr	r2, [pc, #296]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002342:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002346:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002350:	2b00      	cmp	r3, #0
 8002352:	d015      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002354:	4b45      	ldr	r3, [pc, #276]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002362:	4942      	ldr	r1, [pc, #264]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002372:	d105      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002374:	4b3d      	ldr	r3, [pc, #244]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4a3c      	ldr	r2, [pc, #240]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800237a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800237e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d015      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800238c:	4b37      	ldr	r3, [pc, #220]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002392:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	4934      	ldr	r1, [pc, #208]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023aa:	d105      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ac:	4b2f      	ldr	r3, [pc, #188]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a2e      	ldr	r2, [pc, #184]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d015      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023c4:	4b29      	ldr	r3, [pc, #164]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d2:	4926      	ldr	r1, [pc, #152]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023e2:	d105      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e4:	4b21      	ldr	r3, [pc, #132]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	4a20      	ldr	r2, [pc, #128]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d015      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023fc:	4b1b      	ldr	r3, [pc, #108]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002402:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240a:	4918      	ldr	r1, [pc, #96]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002416:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800241a:	d105      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800241c:	4b13      	ldr	r3, [pc, #76]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a12      	ldr	r2, [pc, #72]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002422:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002426:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d015      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002434:	4b0d      	ldr	r3, [pc, #52]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800243a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002442:	490a      	ldr	r1, [pc, #40]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002452:	d105      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002454:	4b05      	ldr	r3, [pc, #20]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4a04      	ldr	r2, [pc, #16]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800245e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002460:	7cbb      	ldrb	r3, [r7, #18]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000

08002470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e049      	b.n	8002516 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7fe fae8 	bl	8000a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3304      	adds	r3, #4
 80024ac:	4619      	mov	r1, r3
 80024ae:	4610      	mov	r0, r2
 80024b0:	f000 fb12 	bl	8002ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	d001      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e04a      	b.n	80025ce <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a21      	ldr	r2, [pc, #132]	@ (80025dc <HAL_TIM_Base_Start_IT+0xbc>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d018      	beq.n	800258c <HAL_TIM_Base_Start_IT+0x6c>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002562:	d013      	beq.n	800258c <HAL_TIM_Base_Start_IT+0x6c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a1d      	ldr	r2, [pc, #116]	@ (80025e0 <HAL_TIM_Base_Start_IT+0xc0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00e      	beq.n	800258c <HAL_TIM_Base_Start_IT+0x6c>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a1c      	ldr	r2, [pc, #112]	@ (80025e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d009      	beq.n	800258c <HAL_TIM_Base_Start_IT+0x6c>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1a      	ldr	r2, [pc, #104]	@ (80025e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d004      	beq.n	800258c <HAL_TIM_Base_Start_IT+0x6c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a19      	ldr	r2, [pc, #100]	@ (80025ec <HAL_TIM_Base_Start_IT+0xcc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d115      	bne.n	80025b8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	4b17      	ldr	r3, [pc, #92]	@ (80025f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002594:	4013      	ands	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b06      	cmp	r3, #6
 800259c:	d015      	beq.n	80025ca <HAL_TIM_Base_Start_IT+0xaa>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025a4:	d011      	beq.n	80025ca <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0201 	orr.w	r2, r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b6:	e008      	b.n	80025ca <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	e000      	b.n	80025cc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40012c00 	.word	0x40012c00
 80025e0:	40000400 	.word	0x40000400
 80025e4:	40000800 	.word	0x40000800
 80025e8:	40013400 	.word	0x40013400
 80025ec:	40014000 	.word	0x40014000
 80025f0:	00010007 	.word	0x00010007

080025f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d020      	beq.n	8002658 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d01b      	beq.n	8002658 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0202 	mvn.w	r2, #2
 8002628:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 fa2c 	bl	8002a9c <HAL_TIM_IC_CaptureCallback>
 8002644:	e005      	b.n	8002652 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fa1e 	bl	8002a88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fa2f 	bl	8002ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	d020      	beq.n	80026a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d01b      	beq.n	80026a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0204 	mvn.w	r2, #4
 8002674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2202      	movs	r2, #2
 800267a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fa06 	bl	8002a9c <HAL_TIM_IC_CaptureCallback>
 8002690:	e005      	b.n	800269e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f9f8 	bl	8002a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fa09 	bl	8002ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d020      	beq.n	80026f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d01b      	beq.n	80026f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0208 	mvn.w	r2, #8
 80026c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2204      	movs	r2, #4
 80026c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f9e0 	bl	8002a9c <HAL_TIM_IC_CaptureCallback>
 80026dc:	e005      	b.n	80026ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f9d2 	bl	8002a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f9e3 	bl	8002ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d020      	beq.n	800273c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01b      	beq.n	800273c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0210 	mvn.w	r2, #16
 800270c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2208      	movs	r2, #8
 8002712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f9ba 	bl	8002a9c <HAL_TIM_IC_CaptureCallback>
 8002728:	e005      	b.n	8002736 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f9ac 	bl	8002a88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f9bd 	bl	8002ab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00c      	beq.n	8002760 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0201 	mvn.w	r2, #1
 8002758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fe f944 	bl	80009e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002766:	2b00      	cmp	r3, #0
 8002768:	d104      	bne.n	8002774 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00c      	beq.n	800278e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 fb69 	bl	8002e60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00c      	beq.n	80027b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80027aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fb61 	bl	8002e74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00c      	beq.n	80027d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80027ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f977 	bl	8002ac4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00c      	beq.n	80027fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d007      	beq.n	80027fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f06f 0220 	mvn.w	r2, #32
 80027f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fb29 	bl	8002e4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00c      	beq.n	800281e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d007      	beq.n	800281e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fb35 	bl	8002e88 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00c      	beq.n	8002842 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d007      	beq.n	8002842 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800283a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fb2d 	bl	8002e9c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00c      	beq.n	8002866 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800285e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fb25 	bl	8002eb0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00c      	beq.n	800288a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d007      	beq.n	800288a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fb1d 	bl	8002ec4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_TIM_ConfigClockSource+0x1c>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e0de      	b.n	8002a6e <HAL_TIM_ConfigClockSource+0x1da>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80028ce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80028d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a63      	ldr	r2, [pc, #396]	@ (8002a78 <HAL_TIM_ConfigClockSource+0x1e4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	f000 80a9 	beq.w	8002a42 <HAL_TIM_ConfigClockSource+0x1ae>
 80028f0:	4a61      	ldr	r2, [pc, #388]	@ (8002a78 <HAL_TIM_ConfigClockSource+0x1e4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	f200 80ae 	bhi.w	8002a54 <HAL_TIM_ConfigClockSource+0x1c0>
 80028f8:	4a60      	ldr	r2, [pc, #384]	@ (8002a7c <HAL_TIM_ConfigClockSource+0x1e8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	f000 80a1 	beq.w	8002a42 <HAL_TIM_ConfigClockSource+0x1ae>
 8002900:	4a5e      	ldr	r2, [pc, #376]	@ (8002a7c <HAL_TIM_ConfigClockSource+0x1e8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	f200 80a6 	bhi.w	8002a54 <HAL_TIM_ConfigClockSource+0x1c0>
 8002908:	4a5d      	ldr	r2, [pc, #372]	@ (8002a80 <HAL_TIM_ConfigClockSource+0x1ec>)
 800290a:	4293      	cmp	r3, r2
 800290c:	f000 8099 	beq.w	8002a42 <HAL_TIM_ConfigClockSource+0x1ae>
 8002910:	4a5b      	ldr	r2, [pc, #364]	@ (8002a80 <HAL_TIM_ConfigClockSource+0x1ec>)
 8002912:	4293      	cmp	r3, r2
 8002914:	f200 809e 	bhi.w	8002a54 <HAL_TIM_ConfigClockSource+0x1c0>
 8002918:	4a5a      	ldr	r2, [pc, #360]	@ (8002a84 <HAL_TIM_ConfigClockSource+0x1f0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	f000 8091 	beq.w	8002a42 <HAL_TIM_ConfigClockSource+0x1ae>
 8002920:	4a58      	ldr	r2, [pc, #352]	@ (8002a84 <HAL_TIM_ConfigClockSource+0x1f0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	f200 8096 	bhi.w	8002a54 <HAL_TIM_ConfigClockSource+0x1c0>
 8002928:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800292c:	f000 8089 	beq.w	8002a42 <HAL_TIM_ConfigClockSource+0x1ae>
 8002930:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002934:	f200 808e 	bhi.w	8002a54 <HAL_TIM_ConfigClockSource+0x1c0>
 8002938:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800293c:	d03e      	beq.n	80029bc <HAL_TIM_ConfigClockSource+0x128>
 800293e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002942:	f200 8087 	bhi.w	8002a54 <HAL_TIM_ConfigClockSource+0x1c0>
 8002946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800294a:	f000 8086 	beq.w	8002a5a <HAL_TIM_ConfigClockSource+0x1c6>
 800294e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002952:	d87f      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x1c0>
 8002954:	2b70      	cmp	r3, #112	@ 0x70
 8002956:	d01a      	beq.n	800298e <HAL_TIM_ConfigClockSource+0xfa>
 8002958:	2b70      	cmp	r3, #112	@ 0x70
 800295a:	d87b      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x1c0>
 800295c:	2b60      	cmp	r3, #96	@ 0x60
 800295e:	d050      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0x16e>
 8002960:	2b60      	cmp	r3, #96	@ 0x60
 8002962:	d877      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x1c0>
 8002964:	2b50      	cmp	r3, #80	@ 0x50
 8002966:	d03c      	beq.n	80029e2 <HAL_TIM_ConfigClockSource+0x14e>
 8002968:	2b50      	cmp	r3, #80	@ 0x50
 800296a:	d873      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x1c0>
 800296c:	2b40      	cmp	r3, #64	@ 0x40
 800296e:	d058      	beq.n	8002a22 <HAL_TIM_ConfigClockSource+0x18e>
 8002970:	2b40      	cmp	r3, #64	@ 0x40
 8002972:	d86f      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x1c0>
 8002974:	2b30      	cmp	r3, #48	@ 0x30
 8002976:	d064      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x1ae>
 8002978:	2b30      	cmp	r3, #48	@ 0x30
 800297a:	d86b      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x1c0>
 800297c:	2b20      	cmp	r3, #32
 800297e:	d060      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x1ae>
 8002980:	2b20      	cmp	r3, #32
 8002982:	d867      	bhi.n	8002a54 <HAL_TIM_ConfigClockSource+0x1c0>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d05c      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x1ae>
 8002988:	2b10      	cmp	r3, #16
 800298a:	d05a      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x1ae>
 800298c:	e062      	b.n	8002a54 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800299e:	f000 f9b3 	bl	8002d08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	609a      	str	r2, [r3, #8]
      break;
 80029ba:	e04f      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029cc:	f000 f99c 	bl	8002d08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689a      	ldr	r2, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029de:	609a      	str	r2, [r3, #8]
      break;
 80029e0:	e03c      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ee:	461a      	mov	r2, r3
 80029f0:	f000 f90e 	bl	8002c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2150      	movs	r1, #80	@ 0x50
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f967 	bl	8002cce <TIM_ITRx_SetConfig>
      break;
 8002a00:	e02c      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f000 f92d 	bl	8002c6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2160      	movs	r1, #96	@ 0x60
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 f957 	bl	8002cce <TIM_ITRx_SetConfig>
      break;
 8002a20:	e01c      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f000 f8ee 	bl	8002c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2140      	movs	r1, #64	@ 0x40
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f947 	bl	8002cce <TIM_ITRx_SetConfig>
      break;
 8002a40:	e00c      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	f000 f93e 	bl	8002cce <TIM_ITRx_SetConfig>
      break;
 8002a52:	e003      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      break;
 8002a58:	e000      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8002a5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	00100070 	.word	0x00100070
 8002a7c:	00100040 	.word	0x00100040
 8002a80:	00100030 	.word	0x00100030
 8002a84:	00100020 	.word	0x00100020

08002a88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a42      	ldr	r2, [pc, #264]	@ (8002bf4 <TIM_Base_SetConfig+0x11c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d00f      	beq.n	8002b10 <TIM_Base_SetConfig+0x38>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af6:	d00b      	beq.n	8002b10 <TIM_Base_SetConfig+0x38>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a3f      	ldr	r2, [pc, #252]	@ (8002bf8 <TIM_Base_SetConfig+0x120>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d007      	beq.n	8002b10 <TIM_Base_SetConfig+0x38>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a3e      	ldr	r2, [pc, #248]	@ (8002bfc <TIM_Base_SetConfig+0x124>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d003      	beq.n	8002b10 <TIM_Base_SetConfig+0x38>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a3d      	ldr	r2, [pc, #244]	@ (8002c00 <TIM_Base_SetConfig+0x128>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d108      	bne.n	8002b22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a33      	ldr	r2, [pc, #204]	@ (8002bf4 <TIM_Base_SetConfig+0x11c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d01b      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b30:	d017      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a30      	ldr	r2, [pc, #192]	@ (8002bf8 <TIM_Base_SetConfig+0x120>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a2f      	ldr	r2, [pc, #188]	@ (8002bfc <TIM_Base_SetConfig+0x124>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00f      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a2e      	ldr	r2, [pc, #184]	@ (8002c00 <TIM_Base_SetConfig+0x128>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00b      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a2d      	ldr	r2, [pc, #180]	@ (8002c04 <TIM_Base_SetConfig+0x12c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d007      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a2c      	ldr	r2, [pc, #176]	@ (8002c08 <TIM_Base_SetConfig+0x130>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d003      	beq.n	8002b62 <TIM_Base_SetConfig+0x8a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a2b      	ldr	r2, [pc, #172]	@ (8002c0c <TIM_Base_SetConfig+0x134>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d108      	bne.n	8002b74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a16      	ldr	r2, [pc, #88]	@ (8002bf4 <TIM_Base_SetConfig+0x11c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d00f      	beq.n	8002bc0 <TIM_Base_SetConfig+0xe8>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a17      	ldr	r2, [pc, #92]	@ (8002c00 <TIM_Base_SetConfig+0x128>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d00b      	beq.n	8002bc0 <TIM_Base_SetConfig+0xe8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a16      	ldr	r2, [pc, #88]	@ (8002c04 <TIM_Base_SetConfig+0x12c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d007      	beq.n	8002bc0 <TIM_Base_SetConfig+0xe8>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a15      	ldr	r2, [pc, #84]	@ (8002c08 <TIM_Base_SetConfig+0x130>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d003      	beq.n	8002bc0 <TIM_Base_SetConfig+0xe8>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a14      	ldr	r2, [pc, #80]	@ (8002c0c <TIM_Base_SetConfig+0x134>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d103      	bne.n	8002bc8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d105      	bne.n	8002be6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f023 0201 	bic.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	611a      	str	r2, [r3, #16]
  }
}
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40012c00 	.word	0x40012c00
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	40000800 	.word	0x40000800
 8002c00:	40013400 	.word	0x40013400
 8002c04:	40014000 	.word	0x40014000
 8002c08:	40014400 	.word	0x40014400
 8002c0c:	40014800 	.word	0x40014800

08002c10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	f023 0201 	bic.w	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f023 030a 	bic.w	r3, r3, #10
 8002c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	621a      	str	r2, [r3, #32]
}
 8002c62:	bf00      	nop
 8002c64:	371c      	adds	r7, #28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b087      	sub	sp, #28
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	f023 0210 	bic.w	r2, r3, #16
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	031b      	lsls	r3, r3, #12
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002caa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	621a      	str	r2, [r3, #32]
}
 8002cc2:	bf00      	nop
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b085      	sub	sp, #20
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f043 0307 	orr.w	r3, r3, #7
 8002cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	609a      	str	r2, [r3, #8]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	021a      	lsls	r2, r3, #8
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	609a      	str	r2, [r3, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	371c      	adds	r7, #28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e065      	b.n	8002e2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a2c      	ldr	r2, [pc, #176]	@ (8002e38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d004      	beq.n	8002d94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8002e3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d108      	bne.n	8002da6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002d9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002db0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8002e38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d018      	beq.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd6:	d013      	beq.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a18      	ldr	r2, [pc, #96]	@ (8002e40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00e      	beq.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a17      	ldr	r2, [pc, #92]	@ (8002e44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d009      	beq.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a12      	ldr	r2, [pc, #72]	@ (8002e3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d004      	beq.n	8002e00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a13      	ldr	r2, [pc, #76]	@ (8002e48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d10c      	bne.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	68ba      	ldr	r2, [r7, #8]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	40012c00 	.word	0x40012c00
 8002e3c:	40013400 	.word	0x40013400
 8002e40:	40000400 	.word	0x40000400
 8002e44:	40000800 	.word	0x40000800
 8002e48:	40014000 	.word	0x40014000

08002e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e042      	b.n	8002f70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d106      	bne.n	8002f02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7fd fdd9 	bl	8000ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2224      	movs	r2, #36	@ 0x24
 8002f06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0201 	bic.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fb82 	bl	800362c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f8b3 	bl	8003094 <UART_SetConfig>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e01b      	b.n	8002f70 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 fc01 	bl	8003770 <UART_CheckIdleState>
 8002f6e:	4603      	mov	r3, r0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	@ 0x28
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	4613      	mov	r3, r2
 8002f86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d17b      	bne.n	800308a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_UART_Transmit+0x26>
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e074      	b.n	800308c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2221      	movs	r2, #33	@ 0x21
 8002fae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fb2:	f7fd ffa1 	bl	8000ef8 <HAL_GetTick>
 8002fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	88fa      	ldrh	r2, [r7, #6]
 8002fbc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd0:	d108      	bne.n	8002fe4 <HAL_UART_Transmit+0x6c>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d104      	bne.n	8002fe4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	e003      	b.n	8002fec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fec:	e030      	b.n	8003050 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2180      	movs	r1, #128	@ 0x80
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fc63 	bl	80038c4 <UART_WaitOnFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e03d      	b.n	800308c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10b      	bne.n	800302e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003024:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	3302      	adds	r3, #2
 800302a:	61bb      	str	r3, [r7, #24]
 800302c:	e007      	b.n	800303e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	3301      	adds	r3, #1
 800303c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1c8      	bne.n	8002fee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2200      	movs	r2, #0
 8003064:	2140      	movs	r1, #64	@ 0x40
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 fc2c 	bl	80038c4 <UART_WaitOnFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2220      	movs	r2, #32
 8003076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e006      	b.n	800308c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2220      	movs	r2, #32
 8003082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	e000      	b.n	800308c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800308a:	2302      	movs	r3, #2
  }
}
 800308c:	4618      	mov	r0, r3
 800308e:	3720      	adds	r7, #32
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003098:	b08c      	sub	sp, #48	@ 0x30
 800309a:	af00      	add	r7, sp, #0
 800309c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	431a      	orrs	r2, r3
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	4bab      	ldr	r3, [pc, #684]	@ (8003370 <UART_SetConfig+0x2dc>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	6812      	ldr	r2, [r2, #0]
 80030ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030cc:	430b      	orrs	r3, r1
 80030ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4aa0      	ldr	r2, [pc, #640]	@ (8003374 <UART_SetConfig+0x2e0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d004      	beq.n	8003100 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030fc:	4313      	orrs	r3, r2
 80030fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800310a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003114:	430b      	orrs	r3, r1
 8003116:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311e:	f023 010f 	bic.w	r1, r3, #15
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a91      	ldr	r2, [pc, #580]	@ (8003378 <UART_SetConfig+0x2e4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d125      	bne.n	8003184 <UART_SetConfig+0xf0>
 8003138:	4b90      	ldr	r3, [pc, #576]	@ (800337c <UART_SetConfig+0x2e8>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b03      	cmp	r3, #3
 8003144:	d81a      	bhi.n	800317c <UART_SetConfig+0xe8>
 8003146:	a201      	add	r2, pc, #4	@ (adr r2, 800314c <UART_SetConfig+0xb8>)
 8003148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314c:	0800315d 	.word	0x0800315d
 8003150:	0800316d 	.word	0x0800316d
 8003154:	08003165 	.word	0x08003165
 8003158:	08003175 	.word	0x08003175
 800315c:	2301      	movs	r3, #1
 800315e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003162:	e0d6      	b.n	8003312 <UART_SetConfig+0x27e>
 8003164:	2302      	movs	r3, #2
 8003166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800316a:	e0d2      	b.n	8003312 <UART_SetConfig+0x27e>
 800316c:	2304      	movs	r3, #4
 800316e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003172:	e0ce      	b.n	8003312 <UART_SetConfig+0x27e>
 8003174:	2308      	movs	r3, #8
 8003176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800317a:	e0ca      	b.n	8003312 <UART_SetConfig+0x27e>
 800317c:	2310      	movs	r3, #16
 800317e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003182:	e0c6      	b.n	8003312 <UART_SetConfig+0x27e>
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a7d      	ldr	r2, [pc, #500]	@ (8003380 <UART_SetConfig+0x2ec>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d138      	bne.n	8003200 <UART_SetConfig+0x16c>
 800318e:	4b7b      	ldr	r3, [pc, #492]	@ (800337c <UART_SetConfig+0x2e8>)
 8003190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003194:	f003 030c 	and.w	r3, r3, #12
 8003198:	2b0c      	cmp	r3, #12
 800319a:	d82d      	bhi.n	80031f8 <UART_SetConfig+0x164>
 800319c:	a201      	add	r2, pc, #4	@ (adr r2, 80031a4 <UART_SetConfig+0x110>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	080031d9 	.word	0x080031d9
 80031a8:	080031f9 	.word	0x080031f9
 80031ac:	080031f9 	.word	0x080031f9
 80031b0:	080031f9 	.word	0x080031f9
 80031b4:	080031e9 	.word	0x080031e9
 80031b8:	080031f9 	.word	0x080031f9
 80031bc:	080031f9 	.word	0x080031f9
 80031c0:	080031f9 	.word	0x080031f9
 80031c4:	080031e1 	.word	0x080031e1
 80031c8:	080031f9 	.word	0x080031f9
 80031cc:	080031f9 	.word	0x080031f9
 80031d0:	080031f9 	.word	0x080031f9
 80031d4:	080031f1 	.word	0x080031f1
 80031d8:	2300      	movs	r3, #0
 80031da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031de:	e098      	b.n	8003312 <UART_SetConfig+0x27e>
 80031e0:	2302      	movs	r3, #2
 80031e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031e6:	e094      	b.n	8003312 <UART_SetConfig+0x27e>
 80031e8:	2304      	movs	r3, #4
 80031ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ee:	e090      	b.n	8003312 <UART_SetConfig+0x27e>
 80031f0:	2308      	movs	r3, #8
 80031f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031f6:	e08c      	b.n	8003312 <UART_SetConfig+0x27e>
 80031f8:	2310      	movs	r3, #16
 80031fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031fe:	e088      	b.n	8003312 <UART_SetConfig+0x27e>
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a5f      	ldr	r2, [pc, #380]	@ (8003384 <UART_SetConfig+0x2f0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d125      	bne.n	8003256 <UART_SetConfig+0x1c2>
 800320a:	4b5c      	ldr	r3, [pc, #368]	@ (800337c <UART_SetConfig+0x2e8>)
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003210:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003214:	2b30      	cmp	r3, #48	@ 0x30
 8003216:	d016      	beq.n	8003246 <UART_SetConfig+0x1b2>
 8003218:	2b30      	cmp	r3, #48	@ 0x30
 800321a:	d818      	bhi.n	800324e <UART_SetConfig+0x1ba>
 800321c:	2b20      	cmp	r3, #32
 800321e:	d00a      	beq.n	8003236 <UART_SetConfig+0x1a2>
 8003220:	2b20      	cmp	r3, #32
 8003222:	d814      	bhi.n	800324e <UART_SetConfig+0x1ba>
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <UART_SetConfig+0x19a>
 8003228:	2b10      	cmp	r3, #16
 800322a:	d008      	beq.n	800323e <UART_SetConfig+0x1aa>
 800322c:	e00f      	b.n	800324e <UART_SetConfig+0x1ba>
 800322e:	2300      	movs	r3, #0
 8003230:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003234:	e06d      	b.n	8003312 <UART_SetConfig+0x27e>
 8003236:	2302      	movs	r3, #2
 8003238:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800323c:	e069      	b.n	8003312 <UART_SetConfig+0x27e>
 800323e:	2304      	movs	r3, #4
 8003240:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003244:	e065      	b.n	8003312 <UART_SetConfig+0x27e>
 8003246:	2308      	movs	r3, #8
 8003248:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800324c:	e061      	b.n	8003312 <UART_SetConfig+0x27e>
 800324e:	2310      	movs	r3, #16
 8003250:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003254:	e05d      	b.n	8003312 <UART_SetConfig+0x27e>
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a4b      	ldr	r2, [pc, #300]	@ (8003388 <UART_SetConfig+0x2f4>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d125      	bne.n	80032ac <UART_SetConfig+0x218>
 8003260:	4b46      	ldr	r3, [pc, #280]	@ (800337c <UART_SetConfig+0x2e8>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003266:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800326a:	2bc0      	cmp	r3, #192	@ 0xc0
 800326c:	d016      	beq.n	800329c <UART_SetConfig+0x208>
 800326e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003270:	d818      	bhi.n	80032a4 <UART_SetConfig+0x210>
 8003272:	2b80      	cmp	r3, #128	@ 0x80
 8003274:	d00a      	beq.n	800328c <UART_SetConfig+0x1f8>
 8003276:	2b80      	cmp	r3, #128	@ 0x80
 8003278:	d814      	bhi.n	80032a4 <UART_SetConfig+0x210>
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <UART_SetConfig+0x1f0>
 800327e:	2b40      	cmp	r3, #64	@ 0x40
 8003280:	d008      	beq.n	8003294 <UART_SetConfig+0x200>
 8003282:	e00f      	b.n	80032a4 <UART_SetConfig+0x210>
 8003284:	2300      	movs	r3, #0
 8003286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800328a:	e042      	b.n	8003312 <UART_SetConfig+0x27e>
 800328c:	2302      	movs	r3, #2
 800328e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003292:	e03e      	b.n	8003312 <UART_SetConfig+0x27e>
 8003294:	2304      	movs	r3, #4
 8003296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800329a:	e03a      	b.n	8003312 <UART_SetConfig+0x27e>
 800329c:	2308      	movs	r3, #8
 800329e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032a2:	e036      	b.n	8003312 <UART_SetConfig+0x27e>
 80032a4:	2310      	movs	r3, #16
 80032a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032aa:	e032      	b.n	8003312 <UART_SetConfig+0x27e>
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a30      	ldr	r2, [pc, #192]	@ (8003374 <UART_SetConfig+0x2e0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d12a      	bne.n	800330c <UART_SetConfig+0x278>
 80032b6:	4b31      	ldr	r3, [pc, #196]	@ (800337c <UART_SetConfig+0x2e8>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80032c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80032c4:	d01a      	beq.n	80032fc <UART_SetConfig+0x268>
 80032c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80032ca:	d81b      	bhi.n	8003304 <UART_SetConfig+0x270>
 80032cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032d0:	d00c      	beq.n	80032ec <UART_SetConfig+0x258>
 80032d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032d6:	d815      	bhi.n	8003304 <UART_SetConfig+0x270>
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <UART_SetConfig+0x250>
 80032dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032e0:	d008      	beq.n	80032f4 <UART_SetConfig+0x260>
 80032e2:	e00f      	b.n	8003304 <UART_SetConfig+0x270>
 80032e4:	2300      	movs	r3, #0
 80032e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ea:	e012      	b.n	8003312 <UART_SetConfig+0x27e>
 80032ec:	2302      	movs	r3, #2
 80032ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032f2:	e00e      	b.n	8003312 <UART_SetConfig+0x27e>
 80032f4:	2304      	movs	r3, #4
 80032f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032fa:	e00a      	b.n	8003312 <UART_SetConfig+0x27e>
 80032fc:	2308      	movs	r3, #8
 80032fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003302:	e006      	b.n	8003312 <UART_SetConfig+0x27e>
 8003304:	2310      	movs	r3, #16
 8003306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800330a:	e002      	b.n	8003312 <UART_SetConfig+0x27e>
 800330c:	2310      	movs	r3, #16
 800330e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a17      	ldr	r2, [pc, #92]	@ (8003374 <UART_SetConfig+0x2e0>)
 8003318:	4293      	cmp	r3, r2
 800331a:	f040 80a8 	bne.w	800346e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800331e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003322:	2b08      	cmp	r3, #8
 8003324:	d834      	bhi.n	8003390 <UART_SetConfig+0x2fc>
 8003326:	a201      	add	r2, pc, #4	@ (adr r2, 800332c <UART_SetConfig+0x298>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	08003351 	.word	0x08003351
 8003330:	08003391 	.word	0x08003391
 8003334:	08003359 	.word	0x08003359
 8003338:	08003391 	.word	0x08003391
 800333c:	0800335f 	.word	0x0800335f
 8003340:	08003391 	.word	0x08003391
 8003344:	08003391 	.word	0x08003391
 8003348:	08003391 	.word	0x08003391
 800334c:	08003367 	.word	0x08003367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003350:	f7fe fdfa 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8003354:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003356:	e021      	b.n	800339c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003358:	4b0c      	ldr	r3, [pc, #48]	@ (800338c <UART_SetConfig+0x2f8>)
 800335a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800335c:	e01e      	b.n	800339c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800335e:	f7fe fd85 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8003362:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003364:	e01a      	b.n	800339c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800336a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800336c:	e016      	b.n	800339c <UART_SetConfig+0x308>
 800336e:	bf00      	nop
 8003370:	cfff69f3 	.word	0xcfff69f3
 8003374:	40008000 	.word	0x40008000
 8003378:	40013800 	.word	0x40013800
 800337c:	40021000 	.word	0x40021000
 8003380:	40004400 	.word	0x40004400
 8003384:	40004800 	.word	0x40004800
 8003388:	40004c00 	.word	0x40004c00
 800338c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800339a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800339c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 812a 	beq.w	80035f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	4a9e      	ldr	r2, [pc, #632]	@ (8003624 <UART_SetConfig+0x590>)
 80033aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033ae:	461a      	mov	r2, r3
 80033b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	4413      	add	r3, r2
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d305      	bcc.n	80033d4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d903      	bls.n	80033dc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80033da:	e10d      	b.n	80035f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033de:	2200      	movs	r2, #0
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	60fa      	str	r2, [r7, #12]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e8:	4a8e      	ldr	r2, [pc, #568]	@ (8003624 <UART_SetConfig+0x590>)
 80033ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2200      	movs	r2, #0
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033fe:	f7fc ff5f 	bl	80002c0 <__aeabi_uldivmod>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	020b      	lsls	r3, r1, #8
 8003414:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003418:	0202      	lsls	r2, r0, #8
 800341a:	6979      	ldr	r1, [r7, #20]
 800341c:	6849      	ldr	r1, [r1, #4]
 800341e:	0849      	lsrs	r1, r1, #1
 8003420:	2000      	movs	r0, #0
 8003422:	460c      	mov	r4, r1
 8003424:	4605      	mov	r5, r0
 8003426:	eb12 0804 	adds.w	r8, r2, r4
 800342a:	eb43 0905 	adc.w	r9, r3, r5
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	469a      	mov	sl, r3
 8003436:	4693      	mov	fp, r2
 8003438:	4652      	mov	r2, sl
 800343a:	465b      	mov	r3, fp
 800343c:	4640      	mov	r0, r8
 800343e:	4649      	mov	r1, r9
 8003440:	f7fc ff3e 	bl	80002c0 <__aeabi_uldivmod>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4613      	mov	r3, r2
 800344a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003452:	d308      	bcc.n	8003466 <UART_SetConfig+0x3d2>
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800345a:	d204      	bcs.n	8003466 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6a3a      	ldr	r2, [r7, #32]
 8003462:	60da      	str	r2, [r3, #12]
 8003464:	e0c8      	b.n	80035f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800346c:	e0c4      	b.n	80035f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003476:	d167      	bne.n	8003548 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003478:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800347c:	2b08      	cmp	r3, #8
 800347e:	d828      	bhi.n	80034d2 <UART_SetConfig+0x43e>
 8003480:	a201      	add	r2, pc, #4	@ (adr r2, 8003488 <UART_SetConfig+0x3f4>)
 8003482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003486:	bf00      	nop
 8003488:	080034ad 	.word	0x080034ad
 800348c:	080034b5 	.word	0x080034b5
 8003490:	080034bd 	.word	0x080034bd
 8003494:	080034d3 	.word	0x080034d3
 8003498:	080034c3 	.word	0x080034c3
 800349c:	080034d3 	.word	0x080034d3
 80034a0:	080034d3 	.word	0x080034d3
 80034a4:	080034d3 	.word	0x080034d3
 80034a8:	080034cb 	.word	0x080034cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034ac:	f7fe fd4c 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 80034b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034b2:	e014      	b.n	80034de <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034b4:	f7fe fd5e 	bl	8001f74 <HAL_RCC_GetPCLK2Freq>
 80034b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034ba:	e010      	b.n	80034de <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034bc:	4b5a      	ldr	r3, [pc, #360]	@ (8003628 <UART_SetConfig+0x594>)
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034c0:	e00d      	b.n	80034de <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034c2:	f7fe fcd3 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 80034c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034c8:	e009      	b.n	80034de <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034d0:	e005      	b.n	80034de <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80034dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8089 	beq.w	80035f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	4a4e      	ldr	r2, [pc, #312]	@ (8003624 <UART_SetConfig+0x590>)
 80034ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034f0:	461a      	mov	r2, r3
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80034f8:	005a      	lsls	r2, r3, #1
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	085b      	lsrs	r3, r3, #1
 8003500:	441a      	add	r2, r3
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	fbb2 f3f3 	udiv	r3, r2, r3
 800350a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	2b0f      	cmp	r3, #15
 8003510:	d916      	bls.n	8003540 <UART_SetConfig+0x4ac>
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003518:	d212      	bcs.n	8003540 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	b29b      	uxth	r3, r3
 800351e:	f023 030f 	bic.w	r3, r3, #15
 8003522:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	085b      	lsrs	r3, r3, #1
 8003528:	b29b      	uxth	r3, r3
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	b29a      	uxth	r2, r3
 8003530:	8bfb      	ldrh	r3, [r7, #30]
 8003532:	4313      	orrs	r3, r2
 8003534:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	8bfa      	ldrh	r2, [r7, #30]
 800353c:	60da      	str	r2, [r3, #12]
 800353e:	e05b      	b.n	80035f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003546:	e057      	b.n	80035f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003548:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800354c:	2b08      	cmp	r3, #8
 800354e:	d828      	bhi.n	80035a2 <UART_SetConfig+0x50e>
 8003550:	a201      	add	r2, pc, #4	@ (adr r2, 8003558 <UART_SetConfig+0x4c4>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	0800357d 	.word	0x0800357d
 800355c:	08003585 	.word	0x08003585
 8003560:	0800358d 	.word	0x0800358d
 8003564:	080035a3 	.word	0x080035a3
 8003568:	08003593 	.word	0x08003593
 800356c:	080035a3 	.word	0x080035a3
 8003570:	080035a3 	.word	0x080035a3
 8003574:	080035a3 	.word	0x080035a3
 8003578:	0800359b 	.word	0x0800359b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800357c:	f7fe fce4 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8003580:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003582:	e014      	b.n	80035ae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003584:	f7fe fcf6 	bl	8001f74 <HAL_RCC_GetPCLK2Freq>
 8003588:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800358a:	e010      	b.n	80035ae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800358c:	4b26      	ldr	r3, [pc, #152]	@ (8003628 <UART_SetConfig+0x594>)
 800358e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003590:	e00d      	b.n	80035ae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003592:	f7fe fc6b 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8003596:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003598:	e009      	b.n	80035ae <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800359a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800359e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035a0:	e005      	b.n	80035ae <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80035ac:	bf00      	nop
    }

    if (pclk != 0U)
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d021      	beq.n	80035f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003624 <UART_SetConfig+0x590>)
 80035ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035be:	461a      	mov	r2, r3
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	085b      	lsrs	r3, r3, #1
 80035cc:	441a      	add	r2, r3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	2b0f      	cmp	r3, #15
 80035dc:	d909      	bls.n	80035f2 <UART_SetConfig+0x55e>
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e4:	d205      	bcs.n	80035f2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60da      	str	r2, [r3, #12]
 80035f0:	e002      	b.n	80035f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2201      	movs	r2, #1
 8003604:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2200      	movs	r2, #0
 800360c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2200      	movs	r2, #0
 8003612:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003614:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003618:	4618      	mov	r0, r3
 800361a:	3730      	adds	r7, #48	@ 0x30
 800361c:	46bd      	mov	sp, r7
 800361e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003622:	bf00      	nop
 8003624:	08007ad0 	.word	0x08007ad0
 8003628:	00f42400 	.word	0x00f42400

0800362c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	d01a      	beq.n	8003742 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003726:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800372a:	d10a      	bne.n	8003742 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	605a      	str	r2, [r3, #4]
  }
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b098      	sub	sp, #96	@ 0x60
 8003774:	af02      	add	r7, sp, #8
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003780:	f7fd fbba 	bl	8000ef8 <HAL_GetTick>
 8003784:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b08      	cmp	r3, #8
 8003792:	d12f      	bne.n	80037f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003794:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800379c:	2200      	movs	r2, #0
 800379e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f88e 	bl	80038c4 <UART_WaitOnFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d022      	beq.n	80037f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037d4:	e841 2300 	strex	r3, r2, [r1]
 80037d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1e6      	bne.n	80037ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e063      	b.n	80038bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d149      	bne.n	8003896 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003802:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800380a:	2200      	movs	r2, #0
 800380c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f857 	bl	80038c4 <UART_WaitOnFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d03c      	beq.n	8003896 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	e853 3f00 	ldrex	r3, [r3]
 8003828:	623b      	str	r3, [r7, #32]
   return(result);
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003830:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800383a:	633b      	str	r3, [r7, #48]	@ 0x30
 800383c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e6      	bne.n	800381c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3308      	adds	r3, #8
 8003854:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	e853 3f00 	ldrex	r3, [r3]
 800385c:	60fb      	str	r3, [r7, #12]
   return(result);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f023 0301 	bic.w	r3, r3, #1
 8003864:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3308      	adds	r3, #8
 800386c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800386e:	61fa      	str	r2, [r7, #28]
 8003870:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	69b9      	ldr	r1, [r7, #24]
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	617b      	str	r3, [r7, #20]
   return(result);
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1e5      	bne.n	800384e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e012      	b.n	80038bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2220      	movs	r2, #32
 80038a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3758      	adds	r7, #88	@ 0x58
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	4613      	mov	r3, r2
 80038d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038d4:	e04f      	b.n	8003976 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038dc:	d04b      	beq.n	8003976 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038de:	f7fd fb0b 	bl	8000ef8 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d302      	bcc.n	80038f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e04e      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b00      	cmp	r3, #0
 8003904:	d037      	beq.n	8003976 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b80      	cmp	r3, #128	@ 0x80
 800390a:	d034      	beq.n	8003976 <UART_WaitOnFlagUntilTimeout+0xb2>
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2b40      	cmp	r3, #64	@ 0x40
 8003910:	d031      	beq.n	8003976 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b08      	cmp	r3, #8
 800391e:	d110      	bne.n	8003942 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2208      	movs	r2, #8
 8003926:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f838 	bl	800399e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2208      	movs	r2, #8
 8003932:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e029      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800394c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003950:	d111      	bne.n	8003976 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800395a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f81e 	bl	800399e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e00f      	b.n	8003996 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69da      	ldr	r2, [r3, #28]
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4013      	ands	r3, r2
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	429a      	cmp	r2, r3
 8003984:	bf0c      	ite	eq
 8003986:	2301      	moveq	r3, #1
 8003988:	2300      	movne	r3, #0
 800398a:	b2db      	uxtb	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	429a      	cmp	r2, r3
 8003992:	d0a0      	beq.n	80038d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800399e:	b480      	push	{r7}
 80039a0:	b095      	sub	sp, #84	@ 0x54
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ae:	e853 3f00 	ldrex	r3, [r3]
 80039b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80039c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039cc:	e841 2300 	strex	r3, r2, [r1]
 80039d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1e6      	bne.n	80039a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3308      	adds	r3, #8
 80039de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	e853 3f00 	ldrex	r3, [r3]
 80039e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3308      	adds	r3, #8
 80039fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e3      	bne.n	80039d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d118      	bne.n	8003a4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	f023 0310 	bic.w	r3, r3, #16
 8003a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6979      	ldr	r1, [r7, #20]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	613b      	str	r3, [r7, #16]
   return(result);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e6      	bne.n	8003a18 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003a5e:	bf00      	nop
 8003a60:	3754      	adds	r7, #84	@ 0x54
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b085      	sub	sp, #20
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_UARTEx_DisableFifoMode+0x16>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e027      	b.n	8003ad0 <HAL_UARTEx_DisableFifoMode+0x66>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2224      	movs	r2, #36	@ 0x24
 8003a8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003aae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e02d      	b.n	8003b50 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2224      	movs	r2, #36	@ 0x24
 8003b00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f84f 	bl	8003bd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e02d      	b.n	8003bcc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2224      	movs	r2, #36	@ 0x24
 8003b7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0201 	bic.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f811 	bl	8003bd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d108      	bne.n	8003bf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003bf4:	e031      	b.n	8003c5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003bf6:	2308      	movs	r3, #8
 8003bf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	0e5b      	lsrs	r3, r3, #25
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	0f5b      	lsrs	r3, r3, #29
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c1e:	7bbb      	ldrb	r3, [r7, #14]
 8003c20:	7b3a      	ldrb	r2, [r7, #12]
 8003c22:	4911      	ldr	r1, [pc, #68]	@ (8003c68 <UARTEx_SetNbDataToProcess+0x94>)
 8003c24:	5c8a      	ldrb	r2, [r1, r2]
 8003c26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c2a:	7b3a      	ldrb	r2, [r7, #12]
 8003c2c:	490f      	ldr	r1, [pc, #60]	@ (8003c6c <UARTEx_SetNbDataToProcess+0x98>)
 8003c2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c30:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	7b7a      	ldrb	r2, [r7, #13]
 8003c40:	4909      	ldr	r1, [pc, #36]	@ (8003c68 <UARTEx_SetNbDataToProcess+0x94>)
 8003c42:	5c8a      	ldrb	r2, [r1, r2]
 8003c44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c48:	7b7a      	ldrb	r2, [r7, #13]
 8003c4a:	4908      	ldr	r1, [pc, #32]	@ (8003c6c <UARTEx_SetNbDataToProcess+0x98>)
 8003c4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	08007ae8 	.word	0x08007ae8
 8003c6c:	08007af0 	.word	0x08007af0

08003c70 <__NVIC_SetPriority>:
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	6039      	str	r1, [r7, #0]
 8003c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	db0a      	blt.n	8003c9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	490c      	ldr	r1, [pc, #48]	@ (8003cbc <__NVIC_SetPriority+0x4c>)
 8003c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8e:	0112      	lsls	r2, r2, #4
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	440b      	add	r3, r1
 8003c94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003c98:	e00a      	b.n	8003cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	4908      	ldr	r1, [pc, #32]	@ (8003cc0 <__NVIC_SetPriority+0x50>)
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	3b04      	subs	r3, #4
 8003ca8:	0112      	lsls	r2, r2, #4
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	440b      	add	r3, r1
 8003cae:	761a      	strb	r2, [r3, #24]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	e000e100 	.word	0xe000e100
 8003cc0:	e000ed00 	.word	0xe000ed00

08003cc4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003cc8:	4b05      	ldr	r3, [pc, #20]	@ (8003ce0 <SysTick_Handler+0x1c>)
 8003cca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003ccc:	f001 fd54 	bl	8005778 <xTaskGetSchedulerState>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d001      	beq.n	8003cda <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003cd6:	f002 fc4f 	bl	8006578 <xPortSysTickHandler>
  }
}
 8003cda:	bf00      	nop
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	e000e010 	.word	0xe000e010

08003ce4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003ce8:	2100      	movs	r1, #0
 8003cea:	f06f 0004 	mvn.w	r0, #4
 8003cee:	f7ff ffbf 	bl	8003c70 <__NVIC_SetPriority>
#endif
}
 8003cf2:	bf00      	nop
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cfe:	f3ef 8305 	mrs	r3, IPSR
 8003d02:	603b      	str	r3, [r7, #0]
  return(result);
 8003d04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003d0a:	f06f 0305 	mvn.w	r3, #5
 8003d0e:	607b      	str	r3, [r7, #4]
 8003d10:	e00c      	b.n	8003d2c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003d12:	4b0a      	ldr	r3, [pc, #40]	@ (8003d3c <osKernelInitialize+0x44>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d105      	bne.n	8003d26 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003d1a:	4b08      	ldr	r3, [pc, #32]	@ (8003d3c <osKernelInitialize+0x44>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	607b      	str	r3, [r7, #4]
 8003d24:	e002      	b.n	8003d2c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003d26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d2c:	687b      	ldr	r3, [r7, #4]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	200001dc 	.word	0x200001dc

08003d40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d46:	f3ef 8305 	mrs	r3, IPSR
 8003d4a:	603b      	str	r3, [r7, #0]
  return(result);
 8003d4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003d52:	f06f 0305 	mvn.w	r3, #5
 8003d56:	607b      	str	r3, [r7, #4]
 8003d58:	e010      	b.n	8003d7c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d88 <osKernelStart+0x48>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d109      	bne.n	8003d76 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003d62:	f7ff ffbf 	bl	8003ce4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003d66:	4b08      	ldr	r3, [pc, #32]	@ (8003d88 <osKernelStart+0x48>)
 8003d68:	2202      	movs	r2, #2
 8003d6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003d6c:	f001 f8b6 	bl	8004edc <vTaskStartScheduler>
      stat = osOK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	607b      	str	r3, [r7, #4]
 8003d74:	e002      	b.n	8003d7c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003d76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003d7c:	687b      	ldr	r3, [r7, #4]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	200001dc 	.word	0x200001dc

08003d8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08e      	sub	sp, #56	@ 0x38
 8003d90:	af04      	add	r7, sp, #16
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d9c:	f3ef 8305 	mrs	r3, IPSR
 8003da0:	617b      	str	r3, [r7, #20]
  return(result);
 8003da2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d17e      	bne.n	8003ea6 <osThreadNew+0x11a>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d07b      	beq.n	8003ea6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003dae:	2380      	movs	r3, #128	@ 0x80
 8003db0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003db2:	2318      	movs	r3, #24
 8003db4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003dba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003dbe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d045      	beq.n	8003e52 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <osThreadNew+0x48>
        name = attr->name;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <osThreadNew+0x6e>
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	2b38      	cmp	r3, #56	@ 0x38
 8003dec:	d805      	bhi.n	8003dfa <osThreadNew+0x6e>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <osThreadNew+0x72>
        return (NULL);
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e054      	b.n	8003ea8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	089b      	lsrs	r3, r3, #2
 8003e0c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00e      	beq.n	8003e34 <osThreadNew+0xa8>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	2b5b      	cmp	r3, #91	@ 0x5b
 8003e1c:	d90a      	bls.n	8003e34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d006      	beq.n	8003e34 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <osThreadNew+0xa8>
        mem = 1;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	e010      	b.n	8003e56 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10c      	bne.n	8003e56 <osThreadNew+0xca>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d108      	bne.n	8003e56 <osThreadNew+0xca>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d104      	bne.n	8003e56 <osThreadNew+0xca>
          mem = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	e001      	b.n	8003e56 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003e52:	2300      	movs	r3, #0
 8003e54:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d110      	bne.n	8003e7e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e64:	9202      	str	r2, [sp, #8]
 8003e66:	9301      	str	r3, [sp, #4]
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	6a3a      	ldr	r2, [r7, #32]
 8003e70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 fe56 	bl	8004b24 <xTaskCreateStatic>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	e013      	b.n	8003ea6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d110      	bne.n	8003ea6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	f107 0310 	add.w	r3, r7, #16
 8003e8c:	9301      	str	r3, [sp, #4]
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 fea4 	bl	8004be4 <xTaskCreate>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d001      	beq.n	8003ea6 <osThreadNew+0x11a>
            hTask = NULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003ea6:	693b      	ldr	r3, [r7, #16]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3728      	adds	r7, #40	@ 0x28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eb8:	f3ef 8305 	mrs	r3, IPSR
 8003ebc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ebe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <osDelay+0x1c>
    stat = osErrorISR;
 8003ec4:	f06f 0305 	mvn.w	r3, #5
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	e007      	b.n	8003edc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <osDelay+0x2c>
      vTaskDelay(ticks);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 ffca 	bl	8004e70 <vTaskDelay>
    }
  }

  return (stat);
 8003edc:	68fb      	ldr	r3, [r7, #12]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4a07      	ldr	r2, [pc, #28]	@ (8003f14 <vApplicationGetIdleTaskMemory+0x2c>)
 8003ef8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	4a06      	ldr	r2, [pc, #24]	@ (8003f18 <vApplicationGetIdleTaskMemory+0x30>)
 8003efe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2280      	movs	r2, #128	@ 0x80
 8003f04:	601a      	str	r2, [r3, #0]
}
 8003f06:	bf00      	nop
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	200001e0 	.word	0x200001e0
 8003f18:	2000023c 	.word	0x2000023c

08003f1c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a07      	ldr	r2, [pc, #28]	@ (8003f48 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f2c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	4a06      	ldr	r2, [pc, #24]	@ (8003f4c <vApplicationGetTimerTaskMemory+0x30>)
 8003f32:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f3a:	601a      	str	r2, [r3, #0]
}
 8003f3c:	bf00      	nop
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	2000043c 	.word	0x2000043c
 8003f4c:	20000498 	.word	0x20000498

08003f50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f103 0208 	add.w	r2, r3, #8
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f103 0208 	add.w	r2, r3, #8
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f103 0208 	add.w	r2, r3, #8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003faa:	b480      	push	{r7}
 8003fac:	b085      	sub	sp, #20
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	601a      	str	r2, [r3, #0]
}
 8003fe6:	bf00      	nop
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004008:	d103      	bne.n	8004012 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	e00c      	b.n	800402c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3308      	adds	r3, #8
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	e002      	b.n	8004020 <vListInsert+0x2e>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	429a      	cmp	r2, r3
 800402a:	d2f6      	bcs.n	800401a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	601a      	str	r2, [r3, #0]
}
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6892      	ldr	r2, [r2, #8]
 800407a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6852      	ldr	r2, [r2, #4]
 8004084:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	429a      	cmp	r2, r3
 800408e:	d103      	bne.n	8004098 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	1e5a      	subs	r2, r3, #1
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10b      	bne.n	80040e4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
 80040e2:	e7fd      	b.n	80040e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80040e4:	f002 f9b8 	bl	8006458 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f0:	68f9      	ldr	r1, [r7, #12]
 80040f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80040f4:	fb01 f303 	mul.w	r3, r1, r3
 80040f8:	441a      	add	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004114:	3b01      	subs	r3, #1
 8004116:	68f9      	ldr	r1, [r7, #12]
 8004118:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800411a:	fb01 f303 	mul.w	r3, r1, r3
 800411e:	441a      	add	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	22ff      	movs	r2, #255	@ 0xff
 8004128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	22ff      	movs	r2, #255	@ 0xff
 8004130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d114      	bne.n	8004164 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d01a      	beq.n	8004178 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3310      	adds	r3, #16
 8004146:	4618      	mov	r0, r3
 8004148:	f001 f956 	bl	80053f8 <xTaskRemoveFromEventList>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d012      	beq.n	8004178 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004152:	4b0d      	ldr	r3, [pc, #52]	@ (8004188 <xQueueGenericReset+0xd0>)
 8004154:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	e009      	b.n	8004178 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	3310      	adds	r3, #16
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fef1 	bl	8003f50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3324      	adds	r3, #36	@ 0x24
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff feec 	bl	8003f50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004178:	f002 f9a0 	bl	80064bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800417c:	2301      	movs	r3, #1
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	e000ed04 	.word	0xe000ed04

0800418c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08e      	sub	sp, #56	@ 0x38
 8004190:	af02      	add	r7, sp, #8
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10b      	bne.n	80041b8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80041b2:	bf00      	nop
 80041b4:	bf00      	nop
 80041b6:	e7fd      	b.n	80041b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10b      	bne.n	80041d6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop
 80041d4:	e7fd      	b.n	80041d2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <xQueueGenericCreateStatic+0x56>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <xQueueGenericCreateStatic+0x5a>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <xQueueGenericCreateStatic+0x5c>
 80041e6:	2300      	movs	r3, #0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10b      	bne.n	8004204 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	623b      	str	r3, [r7, #32]
}
 80041fe:	bf00      	nop
 8004200:	bf00      	nop
 8004202:	e7fd      	b.n	8004200 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d102      	bne.n	8004210 <xQueueGenericCreateStatic+0x84>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <xQueueGenericCreateStatic+0x88>
 8004210:	2301      	movs	r3, #1
 8004212:	e000      	b.n	8004216 <xQueueGenericCreateStatic+0x8a>
 8004214:	2300      	movs	r3, #0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	61fb      	str	r3, [r7, #28]
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	e7fd      	b.n	800422e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004232:	2350      	movs	r3, #80	@ 0x50
 8004234:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2b50      	cmp	r3, #80	@ 0x50
 800423a:	d00b      	beq.n	8004254 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	61bb      	str	r3, [r7, #24]
}
 800424e:	bf00      	nop
 8004250:	bf00      	nop
 8004252:	e7fd      	b.n	8004250 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004254:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800425a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00d      	beq.n	800427c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004268:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800426c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 f840 	bl	80042fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800427c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800427e:	4618      	mov	r0, r3
 8004280:	3730      	adds	r7, #48	@ 0x30
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004286:	b580      	push	{r7, lr}
 8004288:	b08a      	sub	sp, #40	@ 0x28
 800428a:	af02      	add	r7, sp, #8
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	4613      	mov	r3, r2
 8004292:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10b      	bne.n	80042b2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	613b      	str	r3, [r7, #16]
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	e7fd      	b.n	80042ae <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	fb02 f303 	mul.w	r3, r2, r3
 80042ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	3350      	adds	r3, #80	@ 0x50
 80042c0:	4618      	mov	r0, r3
 80042c2:	f002 f9eb 	bl	800669c <pvPortMalloc>
 80042c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d011      	beq.n	80042f2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	3350      	adds	r3, #80	@ 0x50
 80042d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042e0:	79fa      	ldrb	r2, [r7, #7]
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	4613      	mov	r3, r2
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f805 	bl	80042fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042f2:	69bb      	ldr	r3, [r7, #24]
	}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3720      	adds	r7, #32
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
 8004308:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d103      	bne.n	8004318 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	e002      	b.n	800431e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800432a:	2101      	movs	r1, #1
 800432c:	69b8      	ldr	r0, [r7, #24]
 800432e:	f7ff fec3 	bl	80040b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	78fa      	ldrb	r2, [r7, #3]
 8004336:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800433a:	bf00      	nop
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08e      	sub	sp, #56	@ 0x38
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004352:	2300      	movs	r3, #0
 8004354:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800435a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10b      	bne.n	8004378 <xQueueGenericSend+0x34>
	__asm volatile
 8004360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004372:	bf00      	nop
 8004374:	bf00      	nop
 8004376:	e7fd      	b.n	8004374 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d103      	bne.n	8004386 <xQueueGenericSend+0x42>
 800437e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <xQueueGenericSend+0x46>
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <xQueueGenericSend+0x48>
 800438a:	2300      	movs	r3, #0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10b      	bne.n	80043a8 <xQueueGenericSend+0x64>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80043a2:	bf00      	nop
 80043a4:	bf00      	nop
 80043a6:	e7fd      	b.n	80043a4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d103      	bne.n	80043b6 <xQueueGenericSend+0x72>
 80043ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <xQueueGenericSend+0x76>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <xQueueGenericSend+0x78>
 80043ba:	2300      	movs	r3, #0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10b      	bne.n	80043d8 <xQueueGenericSend+0x94>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	623b      	str	r3, [r7, #32]
}
 80043d2:	bf00      	nop
 80043d4:	bf00      	nop
 80043d6:	e7fd      	b.n	80043d4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043d8:	f001 f9ce 	bl	8005778 <xTaskGetSchedulerState>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d102      	bne.n	80043e8 <xQueueGenericSend+0xa4>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <xQueueGenericSend+0xa8>
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <xQueueGenericSend+0xaa>
 80043ec:	2300      	movs	r3, #0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10b      	bne.n	800440a <xQueueGenericSend+0xc6>
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	61fb      	str	r3, [r7, #28]
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop
 8004408:	e7fd      	b.n	8004406 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800440a:	f002 f825 	bl	8006458 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800440e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004410:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004416:	429a      	cmp	r2, r3
 8004418:	d302      	bcc.n	8004420 <xQueueGenericSend+0xdc>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d129      	bne.n	8004474 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004426:	f000 fa0f 	bl	8004848 <prvCopyDataToQueue>
 800442a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800442c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	2b00      	cmp	r3, #0
 8004432:	d010      	beq.n	8004456 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004436:	3324      	adds	r3, #36	@ 0x24
 8004438:	4618      	mov	r0, r3
 800443a:	f000 ffdd 	bl	80053f8 <xTaskRemoveFromEventList>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d013      	beq.n	800446c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004444:	4b3f      	ldr	r3, [pc, #252]	@ (8004544 <xQueueGenericSend+0x200>)
 8004446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	e00a      	b.n	800446c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800445c:	4b39      	ldr	r3, [pc, #228]	@ (8004544 <xQueueGenericSend+0x200>)
 800445e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800446c:	f002 f826 	bl	80064bc <vPortExitCritical>
				return pdPASS;
 8004470:	2301      	movs	r3, #1
 8004472:	e063      	b.n	800453c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d103      	bne.n	8004482 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800447a:	f002 f81f 	bl	80064bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800447e:	2300      	movs	r3, #0
 8004480:	e05c      	b.n	800453c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004484:	2b00      	cmp	r3, #0
 8004486:	d106      	bne.n	8004496 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004488:	f107 0314 	add.w	r3, r7, #20
 800448c:	4618      	mov	r0, r3
 800448e:	f001 f817 	bl	80054c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004492:	2301      	movs	r3, #1
 8004494:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004496:	f002 f811 	bl	80064bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800449a:	f000 fd87 	bl	8004fac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800449e:	f001 ffdb 	bl	8006458 <vPortEnterCritical>
 80044a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044a8:	b25b      	sxtb	r3, r3
 80044aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044ae:	d103      	bne.n	80044b8 <xQueueGenericSend+0x174>
 80044b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044be:	b25b      	sxtb	r3, r3
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044c4:	d103      	bne.n	80044ce <xQueueGenericSend+0x18a>
 80044c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044ce:	f001 fff5 	bl	80064bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044d2:	1d3a      	adds	r2, r7, #4
 80044d4:	f107 0314 	add.w	r3, r7, #20
 80044d8:	4611      	mov	r1, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	f001 f806 	bl	80054ec <xTaskCheckForTimeOut>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d124      	bne.n	8004530 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044e8:	f000 faa6 	bl	8004a38 <prvIsQueueFull>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d018      	beq.n	8004524 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f4:	3310      	adds	r3, #16
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	4611      	mov	r1, r2
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 ff2a 	bl	8005354 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004500:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004502:	f000 fa31 	bl	8004968 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004506:	f000 fd5f 	bl	8004fc8 <xTaskResumeAll>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	f47f af7c 	bne.w	800440a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004512:	4b0c      	ldr	r3, [pc, #48]	@ (8004544 <xQueueGenericSend+0x200>)
 8004514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	e772      	b.n	800440a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004524:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004526:	f000 fa1f 	bl	8004968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800452a:	f000 fd4d 	bl	8004fc8 <xTaskResumeAll>
 800452e:	e76c      	b.n	800440a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004530:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004532:	f000 fa19 	bl	8004968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004536:	f000 fd47 	bl	8004fc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800453a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800453c:	4618      	mov	r0, r3
 800453e:	3738      	adds	r7, #56	@ 0x38
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	e000ed04 	.word	0xe000ed04

08004548 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b090      	sub	sp, #64	@ 0x40
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800455a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10b      	bne.n	8004578 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004572:	bf00      	nop
 8004574:	bf00      	nop
 8004576:	e7fd      	b.n	8004574 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d103      	bne.n	8004586 <xQueueGenericSendFromISR+0x3e>
 800457e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <xQueueGenericSendFromISR+0x42>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <xQueueGenericSendFromISR+0x44>
 800458a:	2300      	movs	r3, #0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80045a2:	bf00      	nop
 80045a4:	bf00      	nop
 80045a6:	e7fd      	b.n	80045a4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d103      	bne.n	80045b6 <xQueueGenericSendFromISR+0x6e>
 80045ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <xQueueGenericSendFromISR+0x72>
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <xQueueGenericSendFromISR+0x74>
 80045ba:	2300      	movs	r3, #0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10b      	bne.n	80045d8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	623b      	str	r3, [r7, #32]
}
 80045d2:	bf00      	nop
 80045d4:	bf00      	nop
 80045d6:	e7fd      	b.n	80045d4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045d8:	f002 f81e 	bl	8006618 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045dc:	f3ef 8211 	mrs	r2, BASEPRI
 80045e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	61fa      	str	r2, [r7, #28]
 80045f2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045f4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045f6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004600:	429a      	cmp	r2, r3
 8004602:	d302      	bcc.n	800460a <xQueueGenericSendFromISR+0xc2>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d12f      	bne.n	800466a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800460a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004610:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004618:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004620:	f000 f912 	bl	8004848 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004624:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004628:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800462c:	d112      	bne.n	8004654 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800462e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004632:	2b00      	cmp	r3, #0
 8004634:	d016      	beq.n	8004664 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004638:	3324      	adds	r3, #36	@ 0x24
 800463a:	4618      	mov	r0, r3
 800463c:	f000 fedc 	bl	80053f8 <xTaskRemoveFromEventList>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00e      	beq.n	8004664 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00b      	beq.n	8004664 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	e007      	b.n	8004664 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004654:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004658:	3301      	adds	r3, #1
 800465a:	b2db      	uxtb	r3, r3
 800465c:	b25a      	sxtb	r2, r3
 800465e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004664:	2301      	movs	r3, #1
 8004666:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004668:	e001      	b.n	800466e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800466a:	2300      	movs	r3, #0
 800466c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800466e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004670:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004678:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800467a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800467c:	4618      	mov	r0, r3
 800467e:	3740      	adds	r7, #64	@ 0x40
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08c      	sub	sp, #48	@ 0x30
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004690:	2300      	movs	r3, #0
 8004692:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10b      	bne.n	80046b6 <xQueueReceive+0x32>
	__asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	623b      	str	r3, [r7, #32]
}
 80046b0:	bf00      	nop
 80046b2:	bf00      	nop
 80046b4:	e7fd      	b.n	80046b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d103      	bne.n	80046c4 <xQueueReceive+0x40>
 80046bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <xQueueReceive+0x44>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <xQueueReceive+0x46>
 80046c8:	2300      	movs	r3, #0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10b      	bne.n	80046e6 <xQueueReceive+0x62>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	61fb      	str	r3, [r7, #28]
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	e7fd      	b.n	80046e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046e6:	f001 f847 	bl	8005778 <xTaskGetSchedulerState>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d102      	bne.n	80046f6 <xQueueReceive+0x72>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <xQueueReceive+0x76>
 80046f6:	2301      	movs	r3, #1
 80046f8:	e000      	b.n	80046fc <xQueueReceive+0x78>
 80046fa:	2300      	movs	r3, #0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10b      	bne.n	8004718 <xQueueReceive+0x94>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	61bb      	str	r3, [r7, #24]
}
 8004712:	bf00      	nop
 8004714:	bf00      	nop
 8004716:	e7fd      	b.n	8004714 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004718:	f001 fe9e 	bl	8006458 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800471c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004720:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	2b00      	cmp	r3, #0
 8004726:	d01f      	beq.n	8004768 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800472c:	f000 f8f6 	bl	800491c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	1e5a      	subs	r2, r3, #1
 8004734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004736:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00f      	beq.n	8004760 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004742:	3310      	adds	r3, #16
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fe57 	bl	80053f8 <xTaskRemoveFromEventList>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d007      	beq.n	8004760 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004750:	4b3c      	ldr	r3, [pc, #240]	@ (8004844 <xQueueReceive+0x1c0>)
 8004752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004760:	f001 feac 	bl	80064bc <vPortExitCritical>
				return pdPASS;
 8004764:	2301      	movs	r3, #1
 8004766:	e069      	b.n	800483c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d103      	bne.n	8004776 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800476e:	f001 fea5 	bl	80064bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004772:	2300      	movs	r3, #0
 8004774:	e062      	b.n	800483c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d106      	bne.n	800478a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800477c:	f107 0310 	add.w	r3, r7, #16
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fe9d 	bl	80054c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004786:	2301      	movs	r3, #1
 8004788:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800478a:	f001 fe97 	bl	80064bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800478e:	f000 fc0d 	bl	8004fac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004792:	f001 fe61 	bl	8006458 <vPortEnterCritical>
 8004796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004798:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800479c:	b25b      	sxtb	r3, r3
 800479e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047a2:	d103      	bne.n	80047ac <xQueueReceive+0x128>
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047b2:	b25b      	sxtb	r3, r3
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80047b8:	d103      	bne.n	80047c2 <xQueueReceive+0x13e>
 80047ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047c2:	f001 fe7b 	bl	80064bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047c6:	1d3a      	adds	r2, r7, #4
 80047c8:	f107 0310 	add.w	r3, r7, #16
 80047cc:	4611      	mov	r1, r2
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fe8c 	bl	80054ec <xTaskCheckForTimeOut>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d123      	bne.n	8004822 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047dc:	f000 f916 	bl	8004a0c <prvIsQueueEmpty>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d017      	beq.n	8004816 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e8:	3324      	adds	r3, #36	@ 0x24
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	4611      	mov	r1, r2
 80047ee:	4618      	mov	r0, r3
 80047f0:	f000 fdb0 	bl	8005354 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047f6:	f000 f8b7 	bl	8004968 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047fa:	f000 fbe5 	bl	8004fc8 <xTaskResumeAll>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d189      	bne.n	8004718 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004804:	4b0f      	ldr	r3, [pc, #60]	@ (8004844 <xQueueReceive+0x1c0>)
 8004806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	e780      	b.n	8004718 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004816:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004818:	f000 f8a6 	bl	8004968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800481c:	f000 fbd4 	bl	8004fc8 <xTaskResumeAll>
 8004820:	e77a      	b.n	8004718 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004824:	f000 f8a0 	bl	8004968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004828:	f000 fbce 	bl	8004fc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800482c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800482e:	f000 f8ed 	bl	8004a0c <prvIsQueueEmpty>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	f43f af6f 	beq.w	8004718 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800483a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800483c:	4618      	mov	r0, r3
 800483e:	3730      	adds	r7, #48	@ 0x30
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	e000ed04 	.word	0xe000ed04

08004848 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10d      	bne.n	8004882 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d14d      	bne.n	800490a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	4618      	mov	r0, r3
 8004874:	f000 ff9e 	bl	80057b4 <xTaskPriorityDisinherit>
 8004878:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	609a      	str	r2, [r3, #8]
 8004880:	e043      	b.n	800490a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d119      	bne.n	80048bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6858      	ldr	r0, [r3, #4]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004890:	461a      	mov	r2, r3
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	f002 fb75 	bl	8006f82 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a0:	441a      	add	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d32b      	bcc.n	800490a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	605a      	str	r2, [r3, #4]
 80048ba:	e026      	b.n	800490a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	68d8      	ldr	r0, [r3, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c4:	461a      	mov	r2, r3
 80048c6:	68b9      	ldr	r1, [r7, #8]
 80048c8:	f002 fb5b 	bl	8006f82 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d4:	425b      	negs	r3, r3
 80048d6:	441a      	add	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d207      	bcs.n	80048f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f0:	425b      	negs	r3, r3
 80048f2:	441a      	add	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d105      	bne.n	800490a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	3b01      	subs	r3, #1
 8004908:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004912:	697b      	ldr	r3, [r7, #20]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d018      	beq.n	8004960 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68da      	ldr	r2, [r3, #12]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004936:	441a      	add	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	429a      	cmp	r2, r3
 8004946:	d303      	bcc.n	8004950 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68d9      	ldr	r1, [r3, #12]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004958:	461a      	mov	r2, r3
 800495a:	6838      	ldr	r0, [r7, #0]
 800495c:	f002 fb11 	bl	8006f82 <memcpy>
	}
}
 8004960:	bf00      	nop
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004970:	f001 fd72 	bl	8006458 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800497a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800497c:	e011      	b.n	80049a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	2b00      	cmp	r3, #0
 8004984:	d012      	beq.n	80049ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3324      	adds	r3, #36	@ 0x24
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fd34 	bl	80053f8 <xTaskRemoveFromEventList>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004996:	f000 fe0d 	bl	80055b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	3b01      	subs	r3, #1
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	dce9      	bgt.n	800497e <prvUnlockQueue+0x16>
 80049aa:	e000      	b.n	80049ae <prvUnlockQueue+0x46>
					break;
 80049ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	22ff      	movs	r2, #255	@ 0xff
 80049b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80049b6:	f001 fd81 	bl	80064bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049ba:	f001 fd4d 	bl	8006458 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049c6:	e011      	b.n	80049ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d012      	beq.n	80049f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3310      	adds	r3, #16
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 fd0f 	bl	80053f8 <xTaskRemoveFromEventList>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049e0:	f000 fde8 	bl	80055b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049e4:	7bbb      	ldrb	r3, [r7, #14]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	dce9      	bgt.n	80049c8 <prvUnlockQueue+0x60>
 80049f4:	e000      	b.n	80049f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	22ff      	movs	r2, #255	@ 0xff
 80049fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004a00:	f001 fd5c 	bl	80064bc <vPortExitCritical>
}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a14:	f001 fd20 	bl	8006458 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a20:	2301      	movs	r3, #1
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	e001      	b.n	8004a2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a2a:	f001 fd47 	bl	80064bc <vPortExitCritical>

	return xReturn;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a40:	f001 fd0a 	bl	8006458 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d102      	bne.n	8004a56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a50:	2301      	movs	r3, #1
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	e001      	b.n	8004a5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a5a:	f001 fd2f 	bl	80064bc <vPortExitCritical>

	return xReturn;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a72:	2300      	movs	r3, #0
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	e014      	b.n	8004aa2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a78:	4a0f      	ldr	r2, [pc, #60]	@ (8004ab8 <vQueueAddToRegistry+0x50>)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10b      	bne.n	8004a9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a84:	490c      	ldr	r1, [pc, #48]	@ (8004ab8 <vQueueAddToRegistry+0x50>)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab8 <vQueueAddToRegistry+0x50>)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4413      	add	r3, r2
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a9a:	e006      	b.n	8004aaa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b07      	cmp	r3, #7
 8004aa6:	d9e7      	bls.n	8004a78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004aa8:	bf00      	nop
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	20000898 	.word	0x20000898

08004abc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004acc:	f001 fcc4 	bl	8006458 <vPortEnterCritical>
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ad6:	b25b      	sxtb	r3, r3
 8004ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004adc:	d103      	bne.n	8004ae6 <vQueueWaitForMessageRestricted+0x2a>
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004aec:	b25b      	sxtb	r3, r3
 8004aee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004af2:	d103      	bne.n	8004afc <vQueueWaitForMessageRestricted+0x40>
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004afc:	f001 fcde 	bl	80064bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d106      	bne.n	8004b16 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	3324      	adds	r3, #36	@ 0x24
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fc45 	bl	80053a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b16:	6978      	ldr	r0, [r7, #20]
 8004b18:	f7ff ff26 	bl	8004968 <prvUnlockQueue>
	}
 8004b1c:	bf00      	nop
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08e      	sub	sp, #56	@ 0x38
 8004b28:	af04      	add	r7, sp, #16
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10b      	bne.n	8004b50 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	623b      	str	r3, [r7, #32]
}
 8004b4a:	bf00      	nop
 8004b4c:	bf00      	nop
 8004b4e:	e7fd      	b.n	8004b4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10b      	bne.n	8004b6e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5a:	f383 8811 	msr	BASEPRI, r3
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	61fb      	str	r3, [r7, #28]
}
 8004b68:	bf00      	nop
 8004b6a:	bf00      	nop
 8004b6c:	e7fd      	b.n	8004b6a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b6e:	235c      	movs	r3, #92	@ 0x5c
 8004b70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2b5c      	cmp	r3, #92	@ 0x5c
 8004b76:	d00b      	beq.n	8004b90 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	61bb      	str	r3, [r7, #24]
}
 8004b8a:	bf00      	nop
 8004b8c:	bf00      	nop
 8004b8e:	e7fd      	b.n	8004b8c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01e      	beq.n	8004bd6 <xTaskCreateStatic+0xb2>
 8004b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d01b      	beq.n	8004bd6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ba6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	9303      	str	r3, [sp, #12]
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb6:	9302      	str	r3, [sp, #8]
 8004bb8:	f107 0314 	add.w	r3, r7, #20
 8004bbc:	9301      	str	r3, [sp, #4]
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	68b9      	ldr	r1, [r7, #8]
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 f850 	bl	8004c6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bd0:	f000 f8de 	bl	8004d90 <prvAddNewTaskToReadyList>
 8004bd4:	e001      	b.n	8004bda <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004bda:	697b      	ldr	r3, [r7, #20]
	}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3728      	adds	r7, #40	@ 0x28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08c      	sub	sp, #48	@ 0x30
 8004be8:	af04      	add	r7, sp, #16
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004bf4:	88fb      	ldrh	r3, [r7, #6]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f001 fd4f 	bl	800669c <pvPortMalloc>
 8004bfe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00e      	beq.n	8004c24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c06:	205c      	movs	r0, #92	@ 0x5c
 8004c08:	f001 fd48 	bl	800669c <pvPortMalloc>
 8004c0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c1a:	e005      	b.n	8004c28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c1c:	6978      	ldr	r0, [r7, #20]
 8004c1e:	f001 fe0b 	bl	8006838 <vPortFree>
 8004c22:	e001      	b.n	8004c28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c24:	2300      	movs	r3, #0
 8004c26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d017      	beq.n	8004c5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c36:	88fa      	ldrh	r2, [r7, #6]
 8004c38:	2300      	movs	r3, #0
 8004c3a:	9303      	str	r3, [sp, #12]
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	9302      	str	r3, [sp, #8]
 8004c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c42:	9301      	str	r3, [sp, #4]
 8004c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f80e 	bl	8004c6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c52:	69f8      	ldr	r0, [r7, #28]
 8004c54:	f000 f89c 	bl	8004d90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	61bb      	str	r3, [r7, #24]
 8004c5c:	e002      	b.n	8004c64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c64:	69bb      	ldr	r3, [r7, #24]
	}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3720      	adds	r7, #32
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b088      	sub	sp, #32
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	607a      	str	r2, [r7, #4]
 8004c7a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	461a      	mov	r2, r3
 8004c86:	21a5      	movs	r1, #165	@ 0xa5
 8004c88:	f002 f900 	bl	8006e8c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c96:	3b01      	subs	r3, #1
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	f023 0307 	bic.w	r3, r3, #7
 8004ca4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00b      	beq.n	8004cc8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	617b      	str	r3, [r7, #20]
}
 8004cc2:	bf00      	nop
 8004cc4:	bf00      	nop
 8004cc6:	e7fd      	b.n	8004cc4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d01f      	beq.n	8004d0e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
 8004cd2:	e012      	b.n	8004cfa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	7819      	ldrb	r1, [r3, #0]
 8004cdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	3334      	adds	r3, #52	@ 0x34
 8004ce4:	460a      	mov	r2, r1
 8004ce6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	4413      	add	r3, r2
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d006      	beq.n	8004d02 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	2b0f      	cmp	r3, #15
 8004cfe:	d9e9      	bls.n	8004cd4 <prvInitialiseNewTask+0x66>
 8004d00:	e000      	b.n	8004d04 <prvInitialiseNewTask+0x96>
			{
				break;
 8004d02:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d0c:	e003      	b.n	8004d16 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d18:	2b37      	cmp	r3, #55	@ 0x37
 8004d1a:	d901      	bls.n	8004d20 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d1c:	2337      	movs	r3, #55	@ 0x37
 8004d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d24:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d2a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2e:	2200      	movs	r2, #0
 8004d30:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d34:	3304      	adds	r3, #4
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff f92a 	bl	8003f90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d3e:	3318      	adds	r3, #24
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff f925 	bl	8003f90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d4a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d4e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d54:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d5a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5e:	2200      	movs	r2, #0
 8004d60:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	68f9      	ldr	r1, [r7, #12]
 8004d6e:	69b8      	ldr	r0, [r7, #24]
 8004d70:	f001 fa40 	bl	80061f4 <pxPortInitialiseStack>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d86:	bf00      	nop
 8004d88:	3720      	adds	r7, #32
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d98:	f001 fb5e 	bl	8006458 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8004e54 <prvAddNewTaskToReadyList+0xc4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3301      	adds	r3, #1
 8004da2:	4a2c      	ldr	r2, [pc, #176]	@ (8004e54 <prvAddNewTaskToReadyList+0xc4>)
 8004da4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004da6:	4b2c      	ldr	r3, [pc, #176]	@ (8004e58 <prvAddNewTaskToReadyList+0xc8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004dae:	4a2a      	ldr	r2, [pc, #168]	@ (8004e58 <prvAddNewTaskToReadyList+0xc8>)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004db4:	4b27      	ldr	r3, [pc, #156]	@ (8004e54 <prvAddNewTaskToReadyList+0xc4>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d110      	bne.n	8004dde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004dbc:	f000 fc1e 	bl	80055fc <prvInitialiseTaskLists>
 8004dc0:	e00d      	b.n	8004dde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004dc2:	4b26      	ldr	r3, [pc, #152]	@ (8004e5c <prvAddNewTaskToReadyList+0xcc>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004dca:	4b23      	ldr	r3, [pc, #140]	@ (8004e58 <prvAddNewTaskToReadyList+0xc8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d802      	bhi.n	8004dde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004dd8:	4a1f      	ldr	r2, [pc, #124]	@ (8004e58 <prvAddNewTaskToReadyList+0xc8>)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004dde:	4b20      	ldr	r3, [pc, #128]	@ (8004e60 <prvAddNewTaskToReadyList+0xd0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3301      	adds	r3, #1
 8004de4:	4a1e      	ldr	r2, [pc, #120]	@ (8004e60 <prvAddNewTaskToReadyList+0xd0>)
 8004de6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004de8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e60 <prvAddNewTaskToReadyList+0xd0>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e64 <prvAddNewTaskToReadyList+0xd4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d903      	bls.n	8004e04 <prvAddNewTaskToReadyList+0x74>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e00:	4a18      	ldr	r2, [pc, #96]	@ (8004e64 <prvAddNewTaskToReadyList+0xd4>)
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4a15      	ldr	r2, [pc, #84]	@ (8004e68 <prvAddNewTaskToReadyList+0xd8>)
 8004e12:	441a      	add	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3304      	adds	r3, #4
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	f7ff f8c5 	bl	8003faa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e20:	f001 fb4c 	bl	80064bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e24:	4b0d      	ldr	r3, [pc, #52]	@ (8004e5c <prvAddNewTaskToReadyList+0xcc>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00e      	beq.n	8004e4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e58 <prvAddNewTaskToReadyList+0xc8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d207      	bcs.n	8004e4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004e6c <prvAddNewTaskToReadyList+0xdc>)
 8004e3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000dac 	.word	0x20000dac
 8004e58:	200008d8 	.word	0x200008d8
 8004e5c:	20000db8 	.word	0x20000db8
 8004e60:	20000dc8 	.word	0x20000dc8
 8004e64:	20000db4 	.word	0x20000db4
 8004e68:	200008dc 	.word	0x200008dc
 8004e6c:	e000ed04 	.word	0xe000ed04

08004e70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d018      	beq.n	8004eb4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e82:	4b14      	ldr	r3, [pc, #80]	@ (8004ed4 <vTaskDelay+0x64>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00b      	beq.n	8004ea2 <vTaskDelay+0x32>
	__asm volatile
 8004e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8e:	f383 8811 	msr	BASEPRI, r3
 8004e92:	f3bf 8f6f 	isb	sy
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	60bb      	str	r3, [r7, #8]
}
 8004e9c:	bf00      	nop
 8004e9e:	bf00      	nop
 8004ea0:	e7fd      	b.n	8004e9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ea2:	f000 f883 	bl	8004fac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fdf5 	bl	8005a98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004eae:	f000 f88b 	bl	8004fc8 <xTaskResumeAll>
 8004eb2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d107      	bne.n	8004eca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004eba:	4b07      	ldr	r3, [pc, #28]	@ (8004ed8 <vTaskDelay+0x68>)
 8004ebc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004eca:	bf00      	nop
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000dd4 	.word	0x20000dd4
 8004ed8:	e000ed04 	.word	0xe000ed04

08004edc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	@ 0x28
 8004ee0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004eea:	463a      	mov	r2, r7
 8004eec:	1d39      	adds	r1, r7, #4
 8004eee:	f107 0308 	add.w	r3, r7, #8
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fe fff8 	bl	8003ee8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ef8:	6839      	ldr	r1, [r7, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	9202      	str	r2, [sp, #8]
 8004f00:	9301      	str	r3, [sp, #4]
 8004f02:	2300      	movs	r3, #0
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	2300      	movs	r3, #0
 8004f08:	460a      	mov	r2, r1
 8004f0a:	4922      	ldr	r1, [pc, #136]	@ (8004f94 <vTaskStartScheduler+0xb8>)
 8004f0c:	4822      	ldr	r0, [pc, #136]	@ (8004f98 <vTaskStartScheduler+0xbc>)
 8004f0e:	f7ff fe09 	bl	8004b24 <xTaskCreateStatic>
 8004f12:	4603      	mov	r3, r0
 8004f14:	4a21      	ldr	r2, [pc, #132]	@ (8004f9c <vTaskStartScheduler+0xc0>)
 8004f16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f18:	4b20      	ldr	r3, [pc, #128]	@ (8004f9c <vTaskStartScheduler+0xc0>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f20:	2301      	movs	r3, #1
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	e001      	b.n	8004f2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d102      	bne.n	8004f36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f30:	f000 fe06 	bl	8005b40 <xTimerCreateTimerTask>
 8004f34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d116      	bne.n	8004f6a <vTaskStartScheduler+0x8e>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	613b      	str	r3, [r7, #16]
}
 8004f4e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f50:	4b13      	ldr	r3, [pc, #76]	@ (8004fa0 <vTaskStartScheduler+0xc4>)
 8004f52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f58:	4b12      	ldr	r3, [pc, #72]	@ (8004fa4 <vTaskStartScheduler+0xc8>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f5e:	4b12      	ldr	r3, [pc, #72]	@ (8004fa8 <vTaskStartScheduler+0xcc>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f64:	f001 f9d4 	bl	8006310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f68:	e00f      	b.n	8004f8a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f70:	d10b      	bne.n	8004f8a <vTaskStartScheduler+0xae>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	60fb      	str	r3, [r7, #12]
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop
 8004f88:	e7fd      	b.n	8004f86 <vTaskStartScheduler+0xaa>
}
 8004f8a:	bf00      	nop
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	08007a7c 	.word	0x08007a7c
 8004f98:	080055cd 	.word	0x080055cd
 8004f9c:	20000dd0 	.word	0x20000dd0
 8004fa0:	20000dcc 	.word	0x20000dcc
 8004fa4:	20000db8 	.word	0x20000db8
 8004fa8:	20000db0 	.word	0x20000db0

08004fac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004fb0:	4b04      	ldr	r3, [pc, #16]	@ (8004fc4 <vTaskSuspendAll+0x18>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	4a03      	ldr	r2, [pc, #12]	@ (8004fc4 <vTaskSuspendAll+0x18>)
 8004fb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004fba:	bf00      	nop
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	20000dd4 	.word	0x20000dd4

08004fc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004fd6:	4b42      	ldr	r3, [pc, #264]	@ (80050e0 <xTaskResumeAll+0x118>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10b      	bne.n	8004ff6 <xTaskResumeAll+0x2e>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	603b      	str	r3, [r7, #0]
}
 8004ff0:	bf00      	nop
 8004ff2:	bf00      	nop
 8004ff4:	e7fd      	b.n	8004ff2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ff6:	f001 fa2f 	bl	8006458 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ffa:	4b39      	ldr	r3, [pc, #228]	@ (80050e0 <xTaskResumeAll+0x118>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	4a37      	ldr	r2, [pc, #220]	@ (80050e0 <xTaskResumeAll+0x118>)
 8005002:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005004:	4b36      	ldr	r3, [pc, #216]	@ (80050e0 <xTaskResumeAll+0x118>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d162      	bne.n	80050d2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800500c:	4b35      	ldr	r3, [pc, #212]	@ (80050e4 <xTaskResumeAll+0x11c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d05e      	beq.n	80050d2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005014:	e02f      	b.n	8005076 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005016:	4b34      	ldr	r3, [pc, #208]	@ (80050e8 <xTaskResumeAll+0x120>)
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3318      	adds	r3, #24
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff f81e 	bl	8004064 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	3304      	adds	r3, #4
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff f819 	bl	8004064 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005036:	4b2d      	ldr	r3, [pc, #180]	@ (80050ec <xTaskResumeAll+0x124>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d903      	bls.n	8005046 <xTaskResumeAll+0x7e>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005042:	4a2a      	ldr	r2, [pc, #168]	@ (80050ec <xTaskResumeAll+0x124>)
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800504a:	4613      	mov	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4413      	add	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4a27      	ldr	r2, [pc, #156]	@ (80050f0 <xTaskResumeAll+0x128>)
 8005054:	441a      	add	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3304      	adds	r3, #4
 800505a:	4619      	mov	r1, r3
 800505c:	4610      	mov	r0, r2
 800505e:	f7fe ffa4 	bl	8003faa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005066:	4b23      	ldr	r3, [pc, #140]	@ (80050f4 <xTaskResumeAll+0x12c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506c:	429a      	cmp	r2, r3
 800506e:	d302      	bcc.n	8005076 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005070:	4b21      	ldr	r3, [pc, #132]	@ (80050f8 <xTaskResumeAll+0x130>)
 8005072:	2201      	movs	r2, #1
 8005074:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005076:	4b1c      	ldr	r3, [pc, #112]	@ (80050e8 <xTaskResumeAll+0x120>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1cb      	bne.n	8005016 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005084:	f000 fb58 	bl	8005738 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005088:	4b1c      	ldr	r3, [pc, #112]	@ (80050fc <xTaskResumeAll+0x134>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d010      	beq.n	80050b6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005094:	f000 f846 	bl	8005124 <xTaskIncrementTick>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d002      	beq.n	80050a4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800509e:	4b16      	ldr	r3, [pc, #88]	@ (80050f8 <xTaskResumeAll+0x130>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1f1      	bne.n	8005094 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80050b0:	4b12      	ldr	r3, [pc, #72]	@ (80050fc <xTaskResumeAll+0x134>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80050b6:	4b10      	ldr	r3, [pc, #64]	@ (80050f8 <xTaskResumeAll+0x130>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d009      	beq.n	80050d2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050be:	2301      	movs	r3, #1
 80050c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005100 <xTaskResumeAll+0x138>)
 80050c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050d2:	f001 f9f3 	bl	80064bc <vPortExitCritical>

	return xAlreadyYielded;
 80050d6:	68bb      	ldr	r3, [r7, #8]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20000dd4 	.word	0x20000dd4
 80050e4:	20000dac 	.word	0x20000dac
 80050e8:	20000d6c 	.word	0x20000d6c
 80050ec:	20000db4 	.word	0x20000db4
 80050f0:	200008dc 	.word	0x200008dc
 80050f4:	200008d8 	.word	0x200008d8
 80050f8:	20000dc0 	.word	0x20000dc0
 80050fc:	20000dbc 	.word	0x20000dbc
 8005100:	e000ed04 	.word	0xe000ed04

08005104 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800510a:	4b05      	ldr	r3, [pc, #20]	@ (8005120 <xTaskGetTickCount+0x1c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005110:	687b      	ldr	r3, [r7, #4]
}
 8005112:	4618      	mov	r0, r3
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	20000db0 	.word	0x20000db0

08005124 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800512a:	2300      	movs	r3, #0
 800512c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800512e:	4b4f      	ldr	r3, [pc, #316]	@ (800526c <xTaskIncrementTick+0x148>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	f040 8090 	bne.w	8005258 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005138:	4b4d      	ldr	r3, [pc, #308]	@ (8005270 <xTaskIncrementTick+0x14c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3301      	adds	r3, #1
 800513e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005140:	4a4b      	ldr	r2, [pc, #300]	@ (8005270 <xTaskIncrementTick+0x14c>)
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d121      	bne.n	8005190 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800514c:	4b49      	ldr	r3, [pc, #292]	@ (8005274 <xTaskIncrementTick+0x150>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00b      	beq.n	800516e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	603b      	str	r3, [r7, #0]
}
 8005168:	bf00      	nop
 800516a:	bf00      	nop
 800516c:	e7fd      	b.n	800516a <xTaskIncrementTick+0x46>
 800516e:	4b41      	ldr	r3, [pc, #260]	@ (8005274 <xTaskIncrementTick+0x150>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	4b40      	ldr	r3, [pc, #256]	@ (8005278 <xTaskIncrementTick+0x154>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a3e      	ldr	r2, [pc, #248]	@ (8005274 <xTaskIncrementTick+0x150>)
 800517a:	6013      	str	r3, [r2, #0]
 800517c:	4a3e      	ldr	r2, [pc, #248]	@ (8005278 <xTaskIncrementTick+0x154>)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	4b3e      	ldr	r3, [pc, #248]	@ (800527c <xTaskIncrementTick+0x158>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3301      	adds	r3, #1
 8005188:	4a3c      	ldr	r2, [pc, #240]	@ (800527c <xTaskIncrementTick+0x158>)
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	f000 fad4 	bl	8005738 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005190:	4b3b      	ldr	r3, [pc, #236]	@ (8005280 <xTaskIncrementTick+0x15c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	429a      	cmp	r2, r3
 8005198:	d349      	bcc.n	800522e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800519a:	4b36      	ldr	r3, [pc, #216]	@ (8005274 <xTaskIncrementTick+0x150>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d104      	bne.n	80051ae <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051a4:	4b36      	ldr	r3, [pc, #216]	@ (8005280 <xTaskIncrementTick+0x15c>)
 80051a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051aa:	601a      	str	r2, [r3, #0]
					break;
 80051ac:	e03f      	b.n	800522e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ae:	4b31      	ldr	r3, [pc, #196]	@ (8005274 <xTaskIncrementTick+0x150>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d203      	bcs.n	80051ce <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051c6:	4a2e      	ldr	r2, [pc, #184]	@ (8005280 <xTaskIncrementTick+0x15c>)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051cc:	e02f      	b.n	800522e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	3304      	adds	r3, #4
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe ff46 	bl	8004064 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d004      	beq.n	80051ea <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	3318      	adds	r3, #24
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fe ff3d 	bl	8004064 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ee:	4b25      	ldr	r3, [pc, #148]	@ (8005284 <xTaskIncrementTick+0x160>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d903      	bls.n	80051fe <xTaskIncrementTick+0xda>
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fa:	4a22      	ldr	r2, [pc, #136]	@ (8005284 <xTaskIncrementTick+0x160>)
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005202:	4613      	mov	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4a1f      	ldr	r2, [pc, #124]	@ (8005288 <xTaskIncrementTick+0x164>)
 800520c:	441a      	add	r2, r3
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	3304      	adds	r3, #4
 8005212:	4619      	mov	r1, r3
 8005214:	4610      	mov	r0, r2
 8005216:	f7fe fec8 	bl	8003faa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800521e:	4b1b      	ldr	r3, [pc, #108]	@ (800528c <xTaskIncrementTick+0x168>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005224:	429a      	cmp	r2, r3
 8005226:	d3b8      	bcc.n	800519a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005228:	2301      	movs	r3, #1
 800522a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800522c:	e7b5      	b.n	800519a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800522e:	4b17      	ldr	r3, [pc, #92]	@ (800528c <xTaskIncrementTick+0x168>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005234:	4914      	ldr	r1, [pc, #80]	@ (8005288 <xTaskIncrementTick+0x164>)
 8005236:	4613      	mov	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	440b      	add	r3, r1
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d901      	bls.n	800524a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005246:	2301      	movs	r3, #1
 8005248:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800524a:	4b11      	ldr	r3, [pc, #68]	@ (8005290 <xTaskIncrementTick+0x16c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d007      	beq.n	8005262 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005252:	2301      	movs	r3, #1
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	e004      	b.n	8005262 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005258:	4b0e      	ldr	r3, [pc, #56]	@ (8005294 <xTaskIncrementTick+0x170>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3301      	adds	r3, #1
 800525e:	4a0d      	ldr	r2, [pc, #52]	@ (8005294 <xTaskIncrementTick+0x170>)
 8005260:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005262:	697b      	ldr	r3, [r7, #20]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20000dd4 	.word	0x20000dd4
 8005270:	20000db0 	.word	0x20000db0
 8005274:	20000d64 	.word	0x20000d64
 8005278:	20000d68 	.word	0x20000d68
 800527c:	20000dc4 	.word	0x20000dc4
 8005280:	20000dcc 	.word	0x20000dcc
 8005284:	20000db4 	.word	0x20000db4
 8005288:	200008dc 	.word	0x200008dc
 800528c:	200008d8 	.word	0x200008d8
 8005290:	20000dc0 	.word	0x20000dc0
 8005294:	20000dbc 	.word	0x20000dbc

08005298 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800529e:	4b28      	ldr	r3, [pc, #160]	@ (8005340 <vTaskSwitchContext+0xa8>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052a6:	4b27      	ldr	r3, [pc, #156]	@ (8005344 <vTaskSwitchContext+0xac>)
 80052a8:	2201      	movs	r2, #1
 80052aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80052ac:	e042      	b.n	8005334 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80052ae:	4b25      	ldr	r3, [pc, #148]	@ (8005344 <vTaskSwitchContext+0xac>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052b4:	4b24      	ldr	r3, [pc, #144]	@ (8005348 <vTaskSwitchContext+0xb0>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	e011      	b.n	80052e0 <vTaskSwitchContext+0x48>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10b      	bne.n	80052da <vTaskSwitchContext+0x42>
	__asm volatile
 80052c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	607b      	str	r3, [r7, #4]
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop
 80052d8:	e7fd      	b.n	80052d6 <vTaskSwitchContext+0x3e>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3b01      	subs	r3, #1
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	491a      	ldr	r1, [pc, #104]	@ (800534c <vTaskSwitchContext+0xb4>)
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	4613      	mov	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d0e3      	beq.n	80052bc <vTaskSwitchContext+0x24>
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4a13      	ldr	r2, [pc, #76]	@ (800534c <vTaskSwitchContext+0xb4>)
 8005300:	4413      	add	r3, r2
 8005302:	60bb      	str	r3, [r7, #8]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	3308      	adds	r3, #8
 8005316:	429a      	cmp	r2, r3
 8005318:	d104      	bne.n	8005324 <vTaskSwitchContext+0x8c>
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	605a      	str	r2, [r3, #4]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	4a09      	ldr	r2, [pc, #36]	@ (8005350 <vTaskSwitchContext+0xb8>)
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	4a06      	ldr	r2, [pc, #24]	@ (8005348 <vTaskSwitchContext+0xb0>)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6013      	str	r3, [r2, #0]
}
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	20000dd4 	.word	0x20000dd4
 8005344:	20000dc0 	.word	0x20000dc0
 8005348:	20000db4 	.word	0x20000db4
 800534c:	200008dc 	.word	0x200008dc
 8005350:	200008d8 	.word	0x200008d8

08005354 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10b      	bne.n	800537c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	60fb      	str	r3, [r7, #12]
}
 8005376:	bf00      	nop
 8005378:	bf00      	nop
 800537a:	e7fd      	b.n	8005378 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800537c:	4b07      	ldr	r3, [pc, #28]	@ (800539c <vTaskPlaceOnEventList+0x48>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3318      	adds	r3, #24
 8005382:	4619      	mov	r1, r3
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7fe fe34 	bl	8003ff2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800538a:	2101      	movs	r1, #1
 800538c:	6838      	ldr	r0, [r7, #0]
 800538e:	f000 fb83 	bl	8005a98 <prvAddCurrentTaskToDelayedList>
}
 8005392:	bf00      	nop
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	200008d8 	.word	0x200008d8

080053a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10b      	bne.n	80053ca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80053b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	617b      	str	r3, [r7, #20]
}
 80053c4:	bf00      	nop
 80053c6:	bf00      	nop
 80053c8:	e7fd      	b.n	80053c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053ca:	4b0a      	ldr	r3, [pc, #40]	@ (80053f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3318      	adds	r3, #24
 80053d0:	4619      	mov	r1, r3
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f7fe fde9 	bl	8003faa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80053de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	68b8      	ldr	r0, [r7, #8]
 80053e8:	f000 fb56 	bl	8005a98 <prvAddCurrentTaskToDelayedList>
	}
 80053ec:	bf00      	nop
 80053ee:	3718      	adds	r7, #24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	200008d8 	.word	0x200008d8

080053f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10b      	bne.n	8005426 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	60fb      	str	r3, [r7, #12]
}
 8005420:	bf00      	nop
 8005422:	bf00      	nop
 8005424:	e7fd      	b.n	8005422 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	3318      	adds	r3, #24
 800542a:	4618      	mov	r0, r3
 800542c:	f7fe fe1a 	bl	8004064 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005430:	4b1d      	ldr	r3, [pc, #116]	@ (80054a8 <xTaskRemoveFromEventList+0xb0>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d11d      	bne.n	8005474 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	3304      	adds	r3, #4
 800543c:	4618      	mov	r0, r3
 800543e:	f7fe fe11 	bl	8004064 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005446:	4b19      	ldr	r3, [pc, #100]	@ (80054ac <xTaskRemoveFromEventList+0xb4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d903      	bls.n	8005456 <xTaskRemoveFromEventList+0x5e>
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005452:	4a16      	ldr	r2, [pc, #88]	@ (80054ac <xTaskRemoveFromEventList+0xb4>)
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800545a:	4613      	mov	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4a13      	ldr	r2, [pc, #76]	@ (80054b0 <xTaskRemoveFromEventList+0xb8>)
 8005464:	441a      	add	r2, r3
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	3304      	adds	r3, #4
 800546a:	4619      	mov	r1, r3
 800546c:	4610      	mov	r0, r2
 800546e:	f7fe fd9c 	bl	8003faa <vListInsertEnd>
 8005472:	e005      	b.n	8005480 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	3318      	adds	r3, #24
 8005478:	4619      	mov	r1, r3
 800547a:	480e      	ldr	r0, [pc, #56]	@ (80054b4 <xTaskRemoveFromEventList+0xbc>)
 800547c:	f7fe fd95 	bl	8003faa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005484:	4b0c      	ldr	r3, [pc, #48]	@ (80054b8 <xTaskRemoveFromEventList+0xc0>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548a:	429a      	cmp	r2, r3
 800548c:	d905      	bls.n	800549a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800548e:	2301      	movs	r3, #1
 8005490:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005492:	4b0a      	ldr	r3, [pc, #40]	@ (80054bc <xTaskRemoveFromEventList+0xc4>)
 8005494:	2201      	movs	r2, #1
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	e001      	b.n	800549e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800549a:	2300      	movs	r3, #0
 800549c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800549e:	697b      	ldr	r3, [r7, #20]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20000dd4 	.word	0x20000dd4
 80054ac:	20000db4 	.word	0x20000db4
 80054b0:	200008dc 	.word	0x200008dc
 80054b4:	20000d6c 	.word	0x20000d6c
 80054b8:	200008d8 	.word	0x200008d8
 80054bc:	20000dc0 	.word	0x20000dc0

080054c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80054c8:	4b06      	ldr	r3, [pc, #24]	@ (80054e4 <vTaskInternalSetTimeOutState+0x24>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80054d0:	4b05      	ldr	r3, [pc, #20]	@ (80054e8 <vTaskInternalSetTimeOutState+0x28>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	605a      	str	r2, [r3, #4]
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	20000dc4 	.word	0x20000dc4
 80054e8:	20000db0 	.word	0x20000db0

080054ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10b      	bne.n	8005514 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80054fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005500:	f383 8811 	msr	BASEPRI, r3
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	613b      	str	r3, [r7, #16]
}
 800550e:	bf00      	nop
 8005510:	bf00      	nop
 8005512:	e7fd      	b.n	8005510 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10b      	bne.n	8005532 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	60fb      	str	r3, [r7, #12]
}
 800552c:	bf00      	nop
 800552e:	bf00      	nop
 8005530:	e7fd      	b.n	800552e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005532:	f000 ff91 	bl	8006458 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005536:	4b1d      	ldr	r3, [pc, #116]	@ (80055ac <xTaskCheckForTimeOut+0xc0>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800554e:	d102      	bne.n	8005556 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005550:	2300      	movs	r3, #0
 8005552:	61fb      	str	r3, [r7, #28]
 8005554:	e023      	b.n	800559e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	4b15      	ldr	r3, [pc, #84]	@ (80055b0 <xTaskCheckForTimeOut+0xc4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d007      	beq.n	8005572 <xTaskCheckForTimeOut+0x86>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	429a      	cmp	r2, r3
 800556a:	d302      	bcc.n	8005572 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800556c:	2301      	movs	r3, #1
 800556e:	61fb      	str	r3, [r7, #28]
 8005570:	e015      	b.n	800559e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	429a      	cmp	r2, r3
 800557a:	d20b      	bcs.n	8005594 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	1ad2      	subs	r2, r2, r3
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f7ff ff99 	bl	80054c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800558e:	2300      	movs	r3, #0
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	e004      	b.n	800559e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800559a:	2301      	movs	r3, #1
 800559c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800559e:	f000 ff8d 	bl	80064bc <vPortExitCritical>

	return xReturn;
 80055a2:	69fb      	ldr	r3, [r7, #28]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3720      	adds	r7, #32
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20000db0 	.word	0x20000db0
 80055b0:	20000dc4 	.word	0x20000dc4

080055b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80055b8:	4b03      	ldr	r3, [pc, #12]	@ (80055c8 <vTaskMissedYield+0x14>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
}
 80055be:	bf00      	nop
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	20000dc0 	.word	0x20000dc0

080055cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80055d4:	f000 f852 	bl	800567c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055d8:	4b06      	ldr	r3, [pc, #24]	@ (80055f4 <prvIdleTask+0x28>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d9f9      	bls.n	80055d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80055e0:	4b05      	ldr	r3, [pc, #20]	@ (80055f8 <prvIdleTask+0x2c>)
 80055e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055f0:	e7f0      	b.n	80055d4 <prvIdleTask+0x8>
 80055f2:	bf00      	nop
 80055f4:	200008dc 	.word	0x200008dc
 80055f8:	e000ed04 	.word	0xe000ed04

080055fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005602:	2300      	movs	r3, #0
 8005604:	607b      	str	r3, [r7, #4]
 8005606:	e00c      	b.n	8005622 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	4613      	mov	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4a12      	ldr	r2, [pc, #72]	@ (800565c <prvInitialiseTaskLists+0x60>)
 8005614:	4413      	add	r3, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f7fe fc9a 	bl	8003f50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3301      	adds	r3, #1
 8005620:	607b      	str	r3, [r7, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b37      	cmp	r3, #55	@ 0x37
 8005626:	d9ef      	bls.n	8005608 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005628:	480d      	ldr	r0, [pc, #52]	@ (8005660 <prvInitialiseTaskLists+0x64>)
 800562a:	f7fe fc91 	bl	8003f50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800562e:	480d      	ldr	r0, [pc, #52]	@ (8005664 <prvInitialiseTaskLists+0x68>)
 8005630:	f7fe fc8e 	bl	8003f50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005634:	480c      	ldr	r0, [pc, #48]	@ (8005668 <prvInitialiseTaskLists+0x6c>)
 8005636:	f7fe fc8b 	bl	8003f50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800563a:	480c      	ldr	r0, [pc, #48]	@ (800566c <prvInitialiseTaskLists+0x70>)
 800563c:	f7fe fc88 	bl	8003f50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005640:	480b      	ldr	r0, [pc, #44]	@ (8005670 <prvInitialiseTaskLists+0x74>)
 8005642:	f7fe fc85 	bl	8003f50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005646:	4b0b      	ldr	r3, [pc, #44]	@ (8005674 <prvInitialiseTaskLists+0x78>)
 8005648:	4a05      	ldr	r2, [pc, #20]	@ (8005660 <prvInitialiseTaskLists+0x64>)
 800564a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800564c:	4b0a      	ldr	r3, [pc, #40]	@ (8005678 <prvInitialiseTaskLists+0x7c>)
 800564e:	4a05      	ldr	r2, [pc, #20]	@ (8005664 <prvInitialiseTaskLists+0x68>)
 8005650:	601a      	str	r2, [r3, #0]
}
 8005652:	bf00      	nop
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	200008dc 	.word	0x200008dc
 8005660:	20000d3c 	.word	0x20000d3c
 8005664:	20000d50 	.word	0x20000d50
 8005668:	20000d6c 	.word	0x20000d6c
 800566c:	20000d80 	.word	0x20000d80
 8005670:	20000d98 	.word	0x20000d98
 8005674:	20000d64 	.word	0x20000d64
 8005678:	20000d68 	.word	0x20000d68

0800567c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005682:	e019      	b.n	80056b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005684:	f000 fee8 	bl	8006458 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005688:	4b10      	ldr	r3, [pc, #64]	@ (80056cc <prvCheckTasksWaitingTermination+0x50>)
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	4618      	mov	r0, r3
 8005696:	f7fe fce5 	bl	8004064 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800569a:	4b0d      	ldr	r3, [pc, #52]	@ (80056d0 <prvCheckTasksWaitingTermination+0x54>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3b01      	subs	r3, #1
 80056a0:	4a0b      	ldr	r2, [pc, #44]	@ (80056d0 <prvCheckTasksWaitingTermination+0x54>)
 80056a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80056a4:	4b0b      	ldr	r3, [pc, #44]	@ (80056d4 <prvCheckTasksWaitingTermination+0x58>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3b01      	subs	r3, #1
 80056aa:	4a0a      	ldr	r2, [pc, #40]	@ (80056d4 <prvCheckTasksWaitingTermination+0x58>)
 80056ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056ae:	f000 ff05 	bl	80064bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f810 	bl	80056d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056b8:	4b06      	ldr	r3, [pc, #24]	@ (80056d4 <prvCheckTasksWaitingTermination+0x58>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e1      	bne.n	8005684 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056c0:	bf00      	nop
 80056c2:	bf00      	nop
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20000d80 	.word	0x20000d80
 80056d0:	20000dac 	.word	0x20000dac
 80056d4:	20000d94 	.word	0x20000d94

080056d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d108      	bne.n	80056fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ee:	4618      	mov	r0, r3
 80056f0:	f001 f8a2 	bl	8006838 <vPortFree>
				vPortFree( pxTCB );
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f001 f89f 	bl	8006838 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056fa:	e019      	b.n	8005730 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005702:	2b01      	cmp	r3, #1
 8005704:	d103      	bne.n	800570e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f001 f896 	bl	8006838 <vPortFree>
	}
 800570c:	e010      	b.n	8005730 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005714:	2b02      	cmp	r3, #2
 8005716:	d00b      	beq.n	8005730 <prvDeleteTCB+0x58>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	60fb      	str	r3, [r7, #12]
}
 800572a:	bf00      	nop
 800572c:	bf00      	nop
 800572e:	e7fd      	b.n	800572c <prvDeleteTCB+0x54>
	}
 8005730:	bf00      	nop
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800573e:	4b0c      	ldr	r3, [pc, #48]	@ (8005770 <prvResetNextTaskUnblockTime+0x38>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d104      	bne.n	8005752 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005748:	4b0a      	ldr	r3, [pc, #40]	@ (8005774 <prvResetNextTaskUnblockTime+0x3c>)
 800574a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800574e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005750:	e008      	b.n	8005764 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005752:	4b07      	ldr	r3, [pc, #28]	@ (8005770 <prvResetNextTaskUnblockTime+0x38>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	4a04      	ldr	r2, [pc, #16]	@ (8005774 <prvResetNextTaskUnblockTime+0x3c>)
 8005762:	6013      	str	r3, [r2, #0]
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	20000d64 	.word	0x20000d64
 8005774:	20000dcc 	.word	0x20000dcc

08005778 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800577e:	4b0b      	ldr	r3, [pc, #44]	@ (80057ac <xTaskGetSchedulerState+0x34>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d102      	bne.n	800578c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005786:	2301      	movs	r3, #1
 8005788:	607b      	str	r3, [r7, #4]
 800578a:	e008      	b.n	800579e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800578c:	4b08      	ldr	r3, [pc, #32]	@ (80057b0 <xTaskGetSchedulerState+0x38>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d102      	bne.n	800579a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005794:	2302      	movs	r3, #2
 8005796:	607b      	str	r3, [r7, #4]
 8005798:	e001      	b.n	800579e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800579a:	2300      	movs	r3, #0
 800579c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800579e:	687b      	ldr	r3, [r7, #4]
	}
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	20000db8 	.word	0x20000db8
 80057b0:	20000dd4 	.word	0x20000dd4

080057b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80057c0:	2300      	movs	r3, #0
 80057c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d058      	beq.n	800587c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80057ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005888 <xTaskPriorityDisinherit+0xd4>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d00b      	beq.n	80057ec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	60fb      	str	r3, [r7, #12]
}
 80057e6:	bf00      	nop
 80057e8:	bf00      	nop
 80057ea:	e7fd      	b.n	80057e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10b      	bne.n	800580c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	60bb      	str	r3, [r7, #8]
}
 8005806:	bf00      	nop
 8005808:	bf00      	nop
 800580a:	e7fd      	b.n	8005808 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005810:	1e5a      	subs	r2, r3, #1
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800581e:	429a      	cmp	r2, r3
 8005820:	d02c      	beq.n	800587c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005826:	2b00      	cmp	r3, #0
 8005828:	d128      	bne.n	800587c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	3304      	adds	r3, #4
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe fc18 	bl	8004064 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005840:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800584c:	4b0f      	ldr	r3, [pc, #60]	@ (800588c <xTaskPriorityDisinherit+0xd8>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	429a      	cmp	r2, r3
 8005852:	d903      	bls.n	800585c <xTaskPriorityDisinherit+0xa8>
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005858:	4a0c      	ldr	r2, [pc, #48]	@ (800588c <xTaskPriorityDisinherit+0xd8>)
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4a09      	ldr	r2, [pc, #36]	@ (8005890 <xTaskPriorityDisinherit+0xdc>)
 800586a:	441a      	add	r2, r3
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	3304      	adds	r3, #4
 8005870:	4619      	mov	r1, r3
 8005872:	4610      	mov	r0, r2
 8005874:	f7fe fb99 	bl	8003faa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005878:	2301      	movs	r3, #1
 800587a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800587c:	697b      	ldr	r3, [r7, #20]
	}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	200008d8 	.word	0x200008d8
 800588c:	20000db4 	.word	0x20000db4
 8005890:	200008dc 	.word	0x200008dc

08005894 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800589e:	f000 fddb 	bl	8006458 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80058a2:	4b1e      	ldr	r3, [pc, #120]	@ (800591c <ulTaskNotifyTake+0x88>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d113      	bne.n	80058d4 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80058ac:	4b1b      	ldr	r3, [pc, #108]	@ (800591c <ulTaskNotifyTake+0x88>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00b      	beq.n	80058d4 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058bc:	2101      	movs	r1, #1
 80058be:	6838      	ldr	r0, [r7, #0]
 80058c0:	f000 f8ea 	bl	8005a98 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80058c4:	4b16      	ldr	r3, [pc, #88]	@ (8005920 <ulTaskNotifyTake+0x8c>)
 80058c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80058d4:	f000 fdf2 	bl	80064bc <vPortExitCritical>

		taskENTER_CRITICAL();
 80058d8:	f000 fdbe 	bl	8006458 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80058dc:	4b0f      	ldr	r3, [pc, #60]	@ (800591c <ulTaskNotifyTake+0x88>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00c      	beq.n	8005904 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d004      	beq.n	80058fa <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80058f0:	4b0a      	ldr	r3, [pc, #40]	@ (800591c <ulTaskNotifyTake+0x88>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2200      	movs	r2, #0
 80058f6:	655a      	str	r2, [r3, #84]	@ 0x54
 80058f8:	e004      	b.n	8005904 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80058fa:	4b08      	ldr	r3, [pc, #32]	@ (800591c <ulTaskNotifyTake+0x88>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	3a01      	subs	r2, #1
 8005902:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005904:	4b05      	ldr	r3, [pc, #20]	@ (800591c <ulTaskNotifyTake+0x88>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800590e:	f000 fdd5 	bl	80064bc <vPortExitCritical>

		return ulReturn;
 8005912:	68fb      	ldr	r3, [r7, #12]
	}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	200008d8 	.word	0x200008d8
 8005920:	e000ed04 	.word	0xe000ed04

08005924 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	@ 0x28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	603b      	str	r3, [r7, #0]
 8005930:	4613      	mov	r3, r2
 8005932:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005934:	2301      	movs	r3, #1
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10b      	bne.n	8005956 <xTaskGenericNotify+0x32>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	61bb      	str	r3, [r7, #24]
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	e7fd      	b.n	8005952 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800595a:	f000 fd7d 	bl	8006458 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005972:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	2b04      	cmp	r3, #4
 8005980:	d827      	bhi.n	80059d2 <xTaskGenericNotify+0xae>
 8005982:	a201      	add	r2, pc, #4	@ (adr r2, 8005988 <xTaskGenericNotify+0x64>)
 8005984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005988:	080059f5 	.word	0x080059f5
 800598c:	0800599d 	.word	0x0800599d
 8005990:	080059ab 	.word	0x080059ab
 8005994:	080059b7 	.word	0x080059b7
 8005998:	080059bf 	.word	0x080059bf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	431a      	orrs	r2, r3
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80059a8:	e027      	b.n	80059fa <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80059b4:	e021      	b.n	80059fa <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80059bc:	e01d      	b.n	80059fa <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80059be:	7ffb      	ldrb	r3, [r7, #31]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d003      	beq.n	80059cc <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80059ca:	e016      	b.n	80059fa <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 80059cc:	2300      	movs	r3, #0
 80059ce:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80059d0:	e013      	b.n	80059fa <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059da:	d00d      	beq.n	80059f8 <xTaskGenericNotify+0xd4>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	617b      	str	r3, [r7, #20]
}
 80059ee:	bf00      	nop
 80059f0:	bf00      	nop
 80059f2:	e7fd      	b.n	80059f0 <xTaskGenericNotify+0xcc>
					break;
 80059f4:	bf00      	nop
 80059f6:	e000      	b.n	80059fa <xTaskGenericNotify+0xd6>

					break;
 80059f8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80059fa:	7ffb      	ldrb	r3, [r7, #31]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d13b      	bne.n	8005a78 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fe fb2d 	bl	8004064 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005a88 <xTaskGenericNotify+0x164>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d903      	bls.n	8005a1e <xTaskGenericNotify+0xfa>
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a1a:	4a1b      	ldr	r2, [pc, #108]	@ (8005a88 <xTaskGenericNotify+0x164>)
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4a18      	ldr	r2, [pc, #96]	@ (8005a8c <xTaskGenericNotify+0x168>)
 8005a2c:	441a      	add	r2, r3
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	3304      	adds	r3, #4
 8005a32:	4619      	mov	r1, r3
 8005a34:	4610      	mov	r0, r2
 8005a36:	f7fe fab8 	bl	8003faa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00b      	beq.n	8005a5a <xTaskGenericNotify+0x136>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	613b      	str	r3, [r7, #16]
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop
 8005a58:	e7fd      	b.n	8005a56 <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a90 <xTaskGenericNotify+0x16c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d907      	bls.n	8005a78 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005a68:	4b0a      	ldr	r3, [pc, #40]	@ (8005a94 <xTaskGenericNotify+0x170>)
 8005a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005a78:	f000 fd20 	bl	80064bc <vPortExitCritical>

		return xReturn;
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3728      	adds	r7, #40	@ 0x28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20000db4 	.word	0x20000db4
 8005a8c:	200008dc 	.word	0x200008dc
 8005a90:	200008d8 	.word	0x200008d8
 8005a94:	e000ed04 	.word	0xe000ed04

08005a98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005aa2:	4b21      	ldr	r3, [pc, #132]	@ (8005b28 <prvAddCurrentTaskToDelayedList+0x90>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aa8:	4b20      	ldr	r3, [pc, #128]	@ (8005b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3304      	adds	r3, #4
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fe fad8 	bl	8004064 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005aba:	d10a      	bne.n	8005ad2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8005b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4819      	ldr	r0, [pc, #100]	@ (8005b30 <prvAddCurrentTaskToDelayedList+0x98>)
 8005acc:	f7fe fa6d 	bl	8003faa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ad0:	e026      	b.n	8005b20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ada:	4b14      	ldr	r3, [pc, #80]	@ (8005b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d209      	bcs.n	8005afe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005aea:	4b12      	ldr	r3, [pc, #72]	@ (8005b34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	4b0f      	ldr	r3, [pc, #60]	@ (8005b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4619      	mov	r1, r3
 8005af6:	4610      	mov	r0, r2
 8005af8:	f7fe fa7b 	bl	8003ff2 <vListInsert>
}
 8005afc:	e010      	b.n	8005b20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005afe:	4b0e      	ldr	r3, [pc, #56]	@ (8005b38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	4b0a      	ldr	r3, [pc, #40]	@ (8005b2c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3304      	adds	r3, #4
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	f7fe fa71 	bl	8003ff2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b10:	4b0a      	ldr	r3, [pc, #40]	@ (8005b3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d202      	bcs.n	8005b20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b1a:	4a08      	ldr	r2, [pc, #32]	@ (8005b3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	6013      	str	r3, [r2, #0]
}
 8005b20:	bf00      	nop
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	20000db0 	.word	0x20000db0
 8005b2c:	200008d8 	.word	0x200008d8
 8005b30:	20000d98 	.word	0x20000d98
 8005b34:	20000d68 	.word	0x20000d68
 8005b38:	20000d64 	.word	0x20000d64
 8005b3c:	20000dcc 	.word	0x20000dcc

08005b40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08a      	sub	sp, #40	@ 0x28
 8005b44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b4a:	f000 fb13 	bl	8006174 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8005bc4 <xTimerCreateTimerTask+0x84>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d021      	beq.n	8005b9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b5e:	1d3a      	adds	r2, r7, #4
 8005b60:	f107 0108 	add.w	r1, r7, #8
 8005b64:	f107 030c 	add.w	r3, r7, #12
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7fe f9d7 	bl	8003f1c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	9202      	str	r2, [sp, #8]
 8005b76:	9301      	str	r3, [sp, #4]
 8005b78:	2302      	movs	r3, #2
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	460a      	mov	r2, r1
 8005b80:	4911      	ldr	r1, [pc, #68]	@ (8005bc8 <xTimerCreateTimerTask+0x88>)
 8005b82:	4812      	ldr	r0, [pc, #72]	@ (8005bcc <xTimerCreateTimerTask+0x8c>)
 8005b84:	f7fe ffce 	bl	8004b24 <xTaskCreateStatic>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	4a11      	ldr	r2, [pc, #68]	@ (8005bd0 <xTimerCreateTimerTask+0x90>)
 8005b8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b8e:	4b10      	ldr	r3, [pc, #64]	@ (8005bd0 <xTimerCreateTimerTask+0x90>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b96:	2301      	movs	r3, #1
 8005b98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10b      	bne.n	8005bb8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	613b      	str	r3, [r7, #16]
}
 8005bb2:	bf00      	nop
 8005bb4:	bf00      	nop
 8005bb6:	e7fd      	b.n	8005bb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005bb8:	697b      	ldr	r3, [r7, #20]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3718      	adds	r7, #24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	20000e08 	.word	0x20000e08
 8005bc8:	08007a84 	.word	0x08007a84
 8005bcc:	08005d0d 	.word	0x08005d0d
 8005bd0:	20000e0c 	.word	0x20000e0c

08005bd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08a      	sub	sp, #40	@ 0x28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10b      	bne.n	8005c04 <xTimerGenericCommand+0x30>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	623b      	str	r3, [r7, #32]
}
 8005bfe:	bf00      	nop
 8005c00:	bf00      	nop
 8005c02:	e7fd      	b.n	8005c00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c04:	4b19      	ldr	r3, [pc, #100]	@ (8005c6c <xTimerGenericCommand+0x98>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d02a      	beq.n	8005c62 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2b05      	cmp	r3, #5
 8005c1c:	dc18      	bgt.n	8005c50 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c1e:	f7ff fdab 	bl	8005778 <xTaskGetSchedulerState>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d109      	bne.n	8005c3c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c28:	4b10      	ldr	r3, [pc, #64]	@ (8005c6c <xTimerGenericCommand+0x98>)
 8005c2a:	6818      	ldr	r0, [r3, #0]
 8005c2c:	f107 0110 	add.w	r1, r7, #16
 8005c30:	2300      	movs	r3, #0
 8005c32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c34:	f7fe fb86 	bl	8004344 <xQueueGenericSend>
 8005c38:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c3a:	e012      	b.n	8005c62 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c6c <xTimerGenericCommand+0x98>)
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	f107 0110 	add.w	r1, r7, #16
 8005c44:	2300      	movs	r3, #0
 8005c46:	2200      	movs	r2, #0
 8005c48:	f7fe fb7c 	bl	8004344 <xQueueGenericSend>
 8005c4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c4e:	e008      	b.n	8005c62 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c50:	4b06      	ldr	r3, [pc, #24]	@ (8005c6c <xTimerGenericCommand+0x98>)
 8005c52:	6818      	ldr	r0, [r3, #0]
 8005c54:	f107 0110 	add.w	r1, r7, #16
 8005c58:	2300      	movs	r3, #0
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	f7fe fc74 	bl	8004548 <xQueueGenericSendFromISR>
 8005c60:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3728      	adds	r7, #40	@ 0x28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	20000e08 	.word	0x20000e08

08005c70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c7a:	4b23      	ldr	r3, [pc, #140]	@ (8005d08 <prvProcessExpiredTimer+0x98>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	3304      	adds	r3, #4
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fe f9eb 	bl	8004064 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d023      	beq.n	8005ce4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	699a      	ldr	r2, [r3, #24]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	18d1      	adds	r1, r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	6978      	ldr	r0, [r7, #20]
 8005caa:	f000 f8d5 	bl	8005e58 <prvInsertTimerInActiveList>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d020      	beq.n	8005cf6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	2300      	movs	r3, #0
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	6978      	ldr	r0, [r7, #20]
 8005cc0:	f7ff ff88 	bl	8005bd4 <xTimerGenericCommand>
 8005cc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d114      	bne.n	8005cf6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	60fb      	str	r3, [r7, #12]
}
 8005cde:	bf00      	nop
 8005ce0:	bf00      	nop
 8005ce2:	e7fd      	b.n	8005ce0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cea:	f023 0301 	bic.w	r3, r3, #1
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	6978      	ldr	r0, [r7, #20]
 8005cfc:	4798      	blx	r3
}
 8005cfe:	bf00      	nop
 8005d00:	3718      	adds	r7, #24
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
 8005d06:	bf00      	nop
 8005d08:	20000e00 	.word	0x20000e00

08005d0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d14:	f107 0308 	add.w	r3, r7, #8
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 f859 	bl	8005dd0 <prvGetNextExpireTime>
 8005d1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4619      	mov	r1, r3
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 f805 	bl	8005d34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d2a:	f000 f8d7 	bl	8005edc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d2e:	bf00      	nop
 8005d30:	e7f0      	b.n	8005d14 <prvTimerTask+0x8>
	...

08005d34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d3e:	f7ff f935 	bl	8004fac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d42:	f107 0308 	add.w	r3, r7, #8
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 f866 	bl	8005e18 <prvSampleTimeNow>
 8005d4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d130      	bne.n	8005db6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10a      	bne.n	8005d70 <prvProcessTimerOrBlockTask+0x3c>
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d806      	bhi.n	8005d70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d62:	f7ff f931 	bl	8004fc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d66:	68f9      	ldr	r1, [r7, #12]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff ff81 	bl	8005c70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d6e:	e024      	b.n	8005dba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d008      	beq.n	8005d88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d76:	4b13      	ldr	r3, [pc, #76]	@ (8005dc4 <prvProcessTimerOrBlockTask+0x90>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <prvProcessTimerOrBlockTask+0x50>
 8005d80:	2301      	movs	r3, #1
 8005d82:	e000      	b.n	8005d86 <prvProcessTimerOrBlockTask+0x52>
 8005d84:	2300      	movs	r3, #0
 8005d86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d88:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc8 <prvProcessTimerOrBlockTask+0x94>)
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	4619      	mov	r1, r3
 8005d96:	f7fe fe91 	bl	8004abc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d9a:	f7ff f915 	bl	8004fc8 <xTaskResumeAll>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005da4:	4b09      	ldr	r3, [pc, #36]	@ (8005dcc <prvProcessTimerOrBlockTask+0x98>)
 8005da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	f3bf 8f6f 	isb	sy
}
 8005db4:	e001      	b.n	8005dba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005db6:	f7ff f907 	bl	8004fc8 <xTaskResumeAll>
}
 8005dba:	bf00      	nop
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20000e04 	.word	0x20000e04
 8005dc8:	20000e08 	.word	0x20000e08
 8005dcc:	e000ed04 	.word	0xe000ed04

08005dd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8005e14 <prvGetNextExpireTime+0x44>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <prvGetNextExpireTime+0x16>
 8005de2:	2201      	movs	r2, #1
 8005de4:	e000      	b.n	8005de8 <prvGetNextExpireTime+0x18>
 8005de6:	2200      	movs	r2, #0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d105      	bne.n	8005e00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005df4:	4b07      	ldr	r3, [pc, #28]	@ (8005e14 <prvGetNextExpireTime+0x44>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	e001      	b.n	8005e04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e04:	68fb      	ldr	r3, [r7, #12]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20000e00 	.word	0x20000e00

08005e18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e20:	f7ff f970 	bl	8005104 <xTaskGetTickCount>
 8005e24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e26:	4b0b      	ldr	r3, [pc, #44]	@ (8005e54 <prvSampleTimeNow+0x3c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d205      	bcs.n	8005e3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e30:	f000 f93a 	bl	80060a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e002      	b.n	8005e42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e42:	4a04      	ldr	r2, [pc, #16]	@ (8005e54 <prvSampleTimeNow+0x3c>)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e48:	68fb      	ldr	r3, [r7, #12]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	20000e10 	.word	0x20000e10

08005e58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d812      	bhi.n	8005ea4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	1ad2      	subs	r2, r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d302      	bcc.n	8005e92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	e01b      	b.n	8005eca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e92:	4b10      	ldr	r3, [pc, #64]	@ (8005ed4 <prvInsertTimerInActiveList+0x7c>)
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	f7fe f8a8 	bl	8003ff2 <vListInsert>
 8005ea2:	e012      	b.n	8005eca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d206      	bcs.n	8005eba <prvInsertTimerInActiveList+0x62>
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d302      	bcc.n	8005eba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	e007      	b.n	8005eca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005eba:	4b07      	ldr	r3, [pc, #28]	@ (8005ed8 <prvInsertTimerInActiveList+0x80>)
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	f7fe f894 	bl	8003ff2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005eca:	697b      	ldr	r3, [r7, #20]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	20000e04 	.word	0x20000e04
 8005ed8:	20000e00 	.word	0x20000e00

08005edc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08e      	sub	sp, #56	@ 0x38
 8005ee0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ee2:	e0ce      	b.n	8006082 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	da19      	bge.n	8005f1e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005eea:	1d3b      	adds	r3, r7, #4
 8005eec:	3304      	adds	r3, #4
 8005eee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10b      	bne.n	8005f0e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	61fb      	str	r3, [r7, #28]
}
 8005f08:	bf00      	nop
 8005f0a:	bf00      	nop
 8005f0c:	e7fd      	b.n	8005f0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f14:	6850      	ldr	r0, [r2, #4]
 8005f16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f18:	6892      	ldr	r2, [r2, #8]
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f2c0 80ae 	blt.w	8006082 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d004      	beq.n	8005f3c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f34:	3304      	adds	r3, #4
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fe f894 	bl	8004064 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f3c:	463b      	mov	r3, r7
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff ff6a 	bl	8005e18 <prvSampleTimeNow>
 8005f44:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b09      	cmp	r3, #9
 8005f4a:	f200 8097 	bhi.w	800607c <prvProcessReceivedCommands+0x1a0>
 8005f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f54 <prvProcessReceivedCommands+0x78>)
 8005f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f54:	08005f7d 	.word	0x08005f7d
 8005f58:	08005f7d 	.word	0x08005f7d
 8005f5c:	08005f7d 	.word	0x08005f7d
 8005f60:	08005ff3 	.word	0x08005ff3
 8005f64:	08006007 	.word	0x08006007
 8005f68:	08006053 	.word	0x08006053
 8005f6c:	08005f7d 	.word	0x08005f7d
 8005f70:	08005f7d 	.word	0x08005f7d
 8005f74:	08005ff3 	.word	0x08005ff3
 8005f78:	08006007 	.word	0x08006007
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f82:	f043 0301 	orr.w	r3, r3, #1
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	18d1      	adds	r1, r2, r3
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f9c:	f7ff ff5c 	bl	8005e58 <prvInsertTimerInActiveList>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d06c      	beq.n	8006080 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d061      	beq.n	8006080 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	441a      	add	r2, r3
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	2100      	movs	r1, #0
 8005fcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fce:	f7ff fe01 	bl	8005bd4 <xTimerGenericCommand>
 8005fd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d152      	bne.n	8006080 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fde:	f383 8811 	msr	BASEPRI, r3
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	f3bf 8f4f 	dsb	sy
 8005fea:	61bb      	str	r3, [r7, #24]
}
 8005fec:	bf00      	nop
 8005fee:	bf00      	nop
 8005ff0:	e7fd      	b.n	8005fee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ff8:	f023 0301 	bic.w	r3, r3, #1
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006000:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006004:	e03d      	b.n	8006082 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006008:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800600c:	f043 0301 	orr.w	r3, r3, #1
 8006010:	b2da      	uxtb	r2, r3
 8006012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006014:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800601e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10b      	bne.n	800603e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	617b      	str	r3, [r7, #20]
}
 8006038:	bf00      	nop
 800603a:	bf00      	nop
 800603c:	e7fd      	b.n	800603a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800603e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006040:	699a      	ldr	r2, [r3, #24]
 8006042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006044:	18d1      	adds	r1, r2, r3
 8006046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800604a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800604c:	f7ff ff04 	bl	8005e58 <prvInsertTimerInActiveList>
					break;
 8006050:	e017      	b.n	8006082 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006054:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d103      	bne.n	8006068 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006060:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006062:	f000 fbe9 	bl	8006838 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006066:	e00c      	b.n	8006082 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800606e:	f023 0301 	bic.w	r3, r3, #1
 8006072:	b2da      	uxtb	r2, r3
 8006074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006076:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800607a:	e002      	b.n	8006082 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800607c:	bf00      	nop
 800607e:	e000      	b.n	8006082 <prvProcessReceivedCommands+0x1a6>
					break;
 8006080:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006082:	4b08      	ldr	r3, [pc, #32]	@ (80060a4 <prvProcessReceivedCommands+0x1c8>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	1d39      	adds	r1, r7, #4
 8006088:	2200      	movs	r2, #0
 800608a:	4618      	mov	r0, r3
 800608c:	f7fe fafa 	bl	8004684 <xQueueReceive>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	f47f af26 	bne.w	8005ee4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006098:	bf00      	nop
 800609a:	bf00      	nop
 800609c:	3730      	adds	r7, #48	@ 0x30
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000e08 	.word	0x20000e08

080060a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060ae:	e049      	b.n	8006144 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060b0:	4b2e      	ldr	r3, [pc, #184]	@ (800616c <prvSwitchTimerLists+0xc4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ba:	4b2c      	ldr	r3, [pc, #176]	@ (800616c <prvSwitchTimerLists+0xc4>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fd ffcb 	bl	8004064 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d02f      	beq.n	8006144 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4413      	add	r3, r2
 80060ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d90e      	bls.n	8006114 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006102:	4b1a      	ldr	r3, [pc, #104]	@ (800616c <prvSwitchTimerLists+0xc4>)
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3304      	adds	r3, #4
 800610a:	4619      	mov	r1, r3
 800610c:	4610      	mov	r0, r2
 800610e:	f7fd ff70 	bl	8003ff2 <vListInsert>
 8006112:	e017      	b.n	8006144 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006114:	2300      	movs	r3, #0
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	2300      	movs	r3, #0
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	2100      	movs	r1, #0
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7ff fd58 	bl	8005bd4 <xTimerGenericCommand>
 8006124:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10b      	bne.n	8006144 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	603b      	str	r3, [r7, #0]
}
 800613e:	bf00      	nop
 8006140:	bf00      	nop
 8006142:	e7fd      	b.n	8006140 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006144:	4b09      	ldr	r3, [pc, #36]	@ (800616c <prvSwitchTimerLists+0xc4>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1b0      	bne.n	80060b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800614e:	4b07      	ldr	r3, [pc, #28]	@ (800616c <prvSwitchTimerLists+0xc4>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006154:	4b06      	ldr	r3, [pc, #24]	@ (8006170 <prvSwitchTimerLists+0xc8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a04      	ldr	r2, [pc, #16]	@ (800616c <prvSwitchTimerLists+0xc4>)
 800615a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800615c:	4a04      	ldr	r2, [pc, #16]	@ (8006170 <prvSwitchTimerLists+0xc8>)
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	6013      	str	r3, [r2, #0]
}
 8006162:	bf00      	nop
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20000e00 	.word	0x20000e00
 8006170:	20000e04 	.word	0x20000e04

08006174 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800617a:	f000 f96d 	bl	8006458 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800617e:	4b15      	ldr	r3, [pc, #84]	@ (80061d4 <prvCheckForValidListAndQueue+0x60>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d120      	bne.n	80061c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006186:	4814      	ldr	r0, [pc, #80]	@ (80061d8 <prvCheckForValidListAndQueue+0x64>)
 8006188:	f7fd fee2 	bl	8003f50 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800618c:	4813      	ldr	r0, [pc, #76]	@ (80061dc <prvCheckForValidListAndQueue+0x68>)
 800618e:	f7fd fedf 	bl	8003f50 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006192:	4b13      	ldr	r3, [pc, #76]	@ (80061e0 <prvCheckForValidListAndQueue+0x6c>)
 8006194:	4a10      	ldr	r2, [pc, #64]	@ (80061d8 <prvCheckForValidListAndQueue+0x64>)
 8006196:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006198:	4b12      	ldr	r3, [pc, #72]	@ (80061e4 <prvCheckForValidListAndQueue+0x70>)
 800619a:	4a10      	ldr	r2, [pc, #64]	@ (80061dc <prvCheckForValidListAndQueue+0x68>)
 800619c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800619e:	2300      	movs	r3, #0
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	4b11      	ldr	r3, [pc, #68]	@ (80061e8 <prvCheckForValidListAndQueue+0x74>)
 80061a4:	4a11      	ldr	r2, [pc, #68]	@ (80061ec <prvCheckForValidListAndQueue+0x78>)
 80061a6:	2110      	movs	r1, #16
 80061a8:	200a      	movs	r0, #10
 80061aa:	f7fd ffef 	bl	800418c <xQueueGenericCreateStatic>
 80061ae:	4603      	mov	r3, r0
 80061b0:	4a08      	ldr	r2, [pc, #32]	@ (80061d4 <prvCheckForValidListAndQueue+0x60>)
 80061b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061b4:	4b07      	ldr	r3, [pc, #28]	@ (80061d4 <prvCheckForValidListAndQueue+0x60>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061bc:	4b05      	ldr	r3, [pc, #20]	@ (80061d4 <prvCheckForValidListAndQueue+0x60>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	490b      	ldr	r1, [pc, #44]	@ (80061f0 <prvCheckForValidListAndQueue+0x7c>)
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe fc50 	bl	8004a68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061c8:	f000 f978 	bl	80064bc <vPortExitCritical>
}
 80061cc:	bf00      	nop
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000e08 	.word	0x20000e08
 80061d8:	20000dd8 	.word	0x20000dd8
 80061dc:	20000dec 	.word	0x20000dec
 80061e0:	20000e00 	.word	0x20000e00
 80061e4:	20000e04 	.word	0x20000e04
 80061e8:	20000eb4 	.word	0x20000eb4
 80061ec:	20000e14 	.word	0x20000e14
 80061f0:	08007a8c 	.word	0x08007a8c

080061f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3b04      	subs	r3, #4
 8006204:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800620c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3b04      	subs	r3, #4
 8006212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f023 0201 	bic.w	r2, r3, #1
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3b04      	subs	r3, #4
 8006222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006224:	4a0c      	ldr	r2, [pc, #48]	@ (8006258 <pxPortInitialiseStack+0x64>)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3b14      	subs	r3, #20
 800622e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3b04      	subs	r3, #4
 800623a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f06f 0202 	mvn.w	r2, #2
 8006242:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	3b20      	subs	r3, #32
 8006248:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800624a:	68fb      	ldr	r3, [r7, #12]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	0800625d 	.word	0x0800625d

0800625c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006262:	2300      	movs	r3, #0
 8006264:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006266:	4b13      	ldr	r3, [pc, #76]	@ (80062b4 <prvTaskExitError+0x58>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800626e:	d00b      	beq.n	8006288 <prvTaskExitError+0x2c>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	60fb      	str	r3, [r7, #12]
}
 8006282:	bf00      	nop
 8006284:	bf00      	nop
 8006286:	e7fd      	b.n	8006284 <prvTaskExitError+0x28>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	60bb      	str	r3, [r7, #8]
}
 800629a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800629c:	bf00      	nop
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d0fc      	beq.n	800629e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	2000000c 	.word	0x2000000c
	...

080062c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062c0:	4b07      	ldr	r3, [pc, #28]	@ (80062e0 <pxCurrentTCBConst2>)
 80062c2:	6819      	ldr	r1, [r3, #0]
 80062c4:	6808      	ldr	r0, [r1, #0]
 80062c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ca:	f380 8809 	msr	PSP, r0
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f04f 0000 	mov.w	r0, #0
 80062d6:	f380 8811 	msr	BASEPRI, r0
 80062da:	4770      	bx	lr
 80062dc:	f3af 8000 	nop.w

080062e0 <pxCurrentTCBConst2>:
 80062e0:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop

080062e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80062e8:	4808      	ldr	r0, [pc, #32]	@ (800630c <prvPortStartFirstTask+0x24>)
 80062ea:	6800      	ldr	r0, [r0, #0]
 80062ec:	6800      	ldr	r0, [r0, #0]
 80062ee:	f380 8808 	msr	MSP, r0
 80062f2:	f04f 0000 	mov.w	r0, #0
 80062f6:	f380 8814 	msr	CONTROL, r0
 80062fa:	b662      	cpsie	i
 80062fc:	b661      	cpsie	f
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	df00      	svc	0
 8006308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800630a:	bf00      	nop
 800630c:	e000ed08 	.word	0xe000ed08

08006310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006316:	4b47      	ldr	r3, [pc, #284]	@ (8006434 <xPortStartScheduler+0x124>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a47      	ldr	r2, [pc, #284]	@ (8006438 <xPortStartScheduler+0x128>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d10b      	bne.n	8006338 <xPortStartScheduler+0x28>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	613b      	str	r3, [r7, #16]
}
 8006332:	bf00      	nop
 8006334:	bf00      	nop
 8006336:	e7fd      	b.n	8006334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006338:	4b3e      	ldr	r3, [pc, #248]	@ (8006434 <xPortStartScheduler+0x124>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a3f      	ldr	r2, [pc, #252]	@ (800643c <xPortStartScheduler+0x12c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d10b      	bne.n	800635a <xPortStartScheduler+0x4a>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	60fb      	str	r3, [r7, #12]
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop
 8006358:	e7fd      	b.n	8006356 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800635a:	4b39      	ldr	r3, [pc, #228]	@ (8006440 <xPortStartScheduler+0x130>)
 800635c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	b2db      	uxtb	r3, r3
 8006364:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	22ff      	movs	r2, #255	@ 0xff
 800636a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	b2db      	uxtb	r3, r3
 8006372:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800637c:	b2da      	uxtb	r2, r3
 800637e:	4b31      	ldr	r3, [pc, #196]	@ (8006444 <xPortStartScheduler+0x134>)
 8006380:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006382:	4b31      	ldr	r3, [pc, #196]	@ (8006448 <xPortStartScheduler+0x138>)
 8006384:	2207      	movs	r2, #7
 8006386:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006388:	e009      	b.n	800639e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800638a:	4b2f      	ldr	r3, [pc, #188]	@ (8006448 <xPortStartScheduler+0x138>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3b01      	subs	r3, #1
 8006390:	4a2d      	ldr	r2, [pc, #180]	@ (8006448 <xPortStartScheduler+0x138>)
 8006392:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	b2db      	uxtb	r3, r3
 8006398:	005b      	lsls	r3, r3, #1
 800639a:	b2db      	uxtb	r3, r3
 800639c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a6:	2b80      	cmp	r3, #128	@ 0x80
 80063a8:	d0ef      	beq.n	800638a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063aa:	4b27      	ldr	r3, [pc, #156]	@ (8006448 <xPortStartScheduler+0x138>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f1c3 0307 	rsb	r3, r3, #7
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d00b      	beq.n	80063ce <xPortStartScheduler+0xbe>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	60bb      	str	r3, [r7, #8]
}
 80063c8:	bf00      	nop
 80063ca:	bf00      	nop
 80063cc:	e7fd      	b.n	80063ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006448 <xPortStartScheduler+0x138>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	021b      	lsls	r3, r3, #8
 80063d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006448 <xPortStartScheduler+0x138>)
 80063d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006448 <xPortStartScheduler+0x138>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80063e0:	4a19      	ldr	r2, [pc, #100]	@ (8006448 <xPortStartScheduler+0x138>)
 80063e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80063ec:	4b17      	ldr	r3, [pc, #92]	@ (800644c <xPortStartScheduler+0x13c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a16      	ldr	r2, [pc, #88]	@ (800644c <xPortStartScheduler+0x13c>)
 80063f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80063f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063f8:	4b14      	ldr	r3, [pc, #80]	@ (800644c <xPortStartScheduler+0x13c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a13      	ldr	r2, [pc, #76]	@ (800644c <xPortStartScheduler+0x13c>)
 80063fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006402:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006404:	f000 f8da 	bl	80065bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006408:	4b11      	ldr	r3, [pc, #68]	@ (8006450 <xPortStartScheduler+0x140>)
 800640a:	2200      	movs	r2, #0
 800640c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800640e:	f000 f8f9 	bl	8006604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006412:	4b10      	ldr	r3, [pc, #64]	@ (8006454 <xPortStartScheduler+0x144>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a0f      	ldr	r2, [pc, #60]	@ (8006454 <xPortStartScheduler+0x144>)
 8006418:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800641c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800641e:	f7ff ff63 	bl	80062e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006422:	f7fe ff39 	bl	8005298 <vTaskSwitchContext>
	prvTaskExitError();
 8006426:	f7ff ff19 	bl	800625c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	e000ed00 	.word	0xe000ed00
 8006438:	410fc271 	.word	0x410fc271
 800643c:	410fc270 	.word	0x410fc270
 8006440:	e000e400 	.word	0xe000e400
 8006444:	20000f04 	.word	0x20000f04
 8006448:	20000f08 	.word	0x20000f08
 800644c:	e000ed20 	.word	0xe000ed20
 8006450:	2000000c 	.word	0x2000000c
 8006454:	e000ef34 	.word	0xe000ef34

08006458 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	607b      	str	r3, [r7, #4]
}
 8006470:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006472:	4b10      	ldr	r3, [pc, #64]	@ (80064b4 <vPortEnterCritical+0x5c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3301      	adds	r3, #1
 8006478:	4a0e      	ldr	r2, [pc, #56]	@ (80064b4 <vPortEnterCritical+0x5c>)
 800647a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800647c:	4b0d      	ldr	r3, [pc, #52]	@ (80064b4 <vPortEnterCritical+0x5c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d110      	bne.n	80064a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006484:	4b0c      	ldr	r3, [pc, #48]	@ (80064b8 <vPortEnterCritical+0x60>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00b      	beq.n	80064a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	603b      	str	r3, [r7, #0]
}
 80064a0:	bf00      	nop
 80064a2:	bf00      	nop
 80064a4:	e7fd      	b.n	80064a2 <vPortEnterCritical+0x4a>
	}
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	2000000c 	.word	0x2000000c
 80064b8:	e000ed04 	.word	0xe000ed04

080064bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064c2:	4b12      	ldr	r3, [pc, #72]	@ (800650c <vPortExitCritical+0x50>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10b      	bne.n	80064e2 <vPortExitCritical+0x26>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	607b      	str	r3, [r7, #4]
}
 80064dc:	bf00      	nop
 80064de:	bf00      	nop
 80064e0:	e7fd      	b.n	80064de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80064e2:	4b0a      	ldr	r3, [pc, #40]	@ (800650c <vPortExitCritical+0x50>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	4a08      	ldr	r2, [pc, #32]	@ (800650c <vPortExitCritical+0x50>)
 80064ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064ec:	4b07      	ldr	r3, [pc, #28]	@ (800650c <vPortExitCritical+0x50>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d105      	bne.n	8006500 <vPortExitCritical+0x44>
 80064f4:	2300      	movs	r3, #0
 80064f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	f383 8811 	msr	BASEPRI, r3
}
 80064fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	2000000c 	.word	0x2000000c

08006510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006510:	f3ef 8009 	mrs	r0, PSP
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	4b15      	ldr	r3, [pc, #84]	@ (8006570 <pxCurrentTCBConst>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	f01e 0f10 	tst.w	lr, #16
 8006520:	bf08      	it	eq
 8006522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800652a:	6010      	str	r0, [r2, #0]
 800652c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006530:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006534:	f380 8811 	msr	BASEPRI, r0
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f7fe feaa 	bl	8005298 <vTaskSwitchContext>
 8006544:	f04f 0000 	mov.w	r0, #0
 8006548:	f380 8811 	msr	BASEPRI, r0
 800654c:	bc09      	pop	{r0, r3}
 800654e:	6819      	ldr	r1, [r3, #0]
 8006550:	6808      	ldr	r0, [r1, #0]
 8006552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006556:	f01e 0f10 	tst.w	lr, #16
 800655a:	bf08      	it	eq
 800655c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006560:	f380 8809 	msr	PSP, r0
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	f3af 8000 	nop.w

08006570 <pxCurrentTCBConst>:
 8006570:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop

08006578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	607b      	str	r3, [r7, #4]
}
 8006590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006592:	f7fe fdc7 	bl	8005124 <xTaskIncrementTick>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800659c:	4b06      	ldr	r3, [pc, #24]	@ (80065b8 <xPortSysTickHandler+0x40>)
 800659e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	2300      	movs	r3, #0
 80065a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	f383 8811 	msr	BASEPRI, r3
}
 80065ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065b0:	bf00      	nop
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	e000ed04 	.word	0xe000ed04

080065bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065c0:	4b0b      	ldr	r3, [pc, #44]	@ (80065f0 <vPortSetupTimerInterrupt+0x34>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065c6:	4b0b      	ldr	r3, [pc, #44]	@ (80065f4 <vPortSetupTimerInterrupt+0x38>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065cc:	4b0a      	ldr	r3, [pc, #40]	@ (80065f8 <vPortSetupTimerInterrupt+0x3c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a0a      	ldr	r2, [pc, #40]	@ (80065fc <vPortSetupTimerInterrupt+0x40>)
 80065d2:	fba2 2303 	umull	r2, r3, r2, r3
 80065d6:	099b      	lsrs	r3, r3, #6
 80065d8:	4a09      	ldr	r2, [pc, #36]	@ (8006600 <vPortSetupTimerInterrupt+0x44>)
 80065da:	3b01      	subs	r3, #1
 80065dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065de:	4b04      	ldr	r3, [pc, #16]	@ (80065f0 <vPortSetupTimerInterrupt+0x34>)
 80065e0:	2207      	movs	r2, #7
 80065e2:	601a      	str	r2, [r3, #0]
}
 80065e4:	bf00      	nop
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	e000e010 	.word	0xe000e010
 80065f4:	e000e018 	.word	0xe000e018
 80065f8:	20000000 	.word	0x20000000
 80065fc:	10624dd3 	.word	0x10624dd3
 8006600:	e000e014 	.word	0xe000e014

08006604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006604:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006614 <vPortEnableVFP+0x10>
 8006608:	6801      	ldr	r1, [r0, #0]
 800660a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800660e:	6001      	str	r1, [r0, #0]
 8006610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006612:	bf00      	nop
 8006614:	e000ed88 	.word	0xe000ed88

08006618 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800661e:	f3ef 8305 	mrs	r3, IPSR
 8006622:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b0f      	cmp	r3, #15
 8006628:	d915      	bls.n	8006656 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800662a:	4a18      	ldr	r2, [pc, #96]	@ (800668c <vPortValidateInterruptPriority+0x74>)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4413      	add	r3, r2
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006634:	4b16      	ldr	r3, [pc, #88]	@ (8006690 <vPortValidateInterruptPriority+0x78>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	7afa      	ldrb	r2, [r7, #11]
 800663a:	429a      	cmp	r2, r3
 800663c:	d20b      	bcs.n	8006656 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800663e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	607b      	str	r3, [r7, #4]
}
 8006650:	bf00      	nop
 8006652:	bf00      	nop
 8006654:	e7fd      	b.n	8006652 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006656:	4b0f      	ldr	r3, [pc, #60]	@ (8006694 <vPortValidateInterruptPriority+0x7c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800665e:	4b0e      	ldr	r3, [pc, #56]	@ (8006698 <vPortValidateInterruptPriority+0x80>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	429a      	cmp	r2, r3
 8006664:	d90b      	bls.n	800667e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	603b      	str	r3, [r7, #0]
}
 8006678:	bf00      	nop
 800667a:	bf00      	nop
 800667c:	e7fd      	b.n	800667a <vPortValidateInterruptPriority+0x62>
	}
 800667e:	bf00      	nop
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	e000e3f0 	.word	0xe000e3f0
 8006690:	20000f04 	.word	0x20000f04
 8006694:	e000ed0c 	.word	0xe000ed0c
 8006698:	20000f08 	.word	0x20000f08

0800669c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b08a      	sub	sp, #40	@ 0x28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066a4:	2300      	movs	r3, #0
 80066a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066a8:	f7fe fc80 	bl	8004fac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066ac:	4b5c      	ldr	r3, [pc, #368]	@ (8006820 <pvPortMalloc+0x184>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066b4:	f000 f924 	bl	8006900 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066b8:	4b5a      	ldr	r3, [pc, #360]	@ (8006824 <pvPortMalloc+0x188>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4013      	ands	r3, r2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f040 8095 	bne.w	80067f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01e      	beq.n	800670a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80066cc:	2208      	movs	r2, #8
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4413      	add	r3, r2
 80066d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d015      	beq.n	800670a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f023 0307 	bic.w	r3, r3, #7
 80066e4:	3308      	adds	r3, #8
 80066e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f003 0307 	and.w	r3, r3, #7
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00b      	beq.n	800670a <pvPortMalloc+0x6e>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	617b      	str	r3, [r7, #20]
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop
 8006708:	e7fd      	b.n	8006706 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d06f      	beq.n	80067f0 <pvPortMalloc+0x154>
 8006710:	4b45      	ldr	r3, [pc, #276]	@ (8006828 <pvPortMalloc+0x18c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	429a      	cmp	r2, r3
 8006718:	d86a      	bhi.n	80067f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800671a:	4b44      	ldr	r3, [pc, #272]	@ (800682c <pvPortMalloc+0x190>)
 800671c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800671e:	4b43      	ldr	r3, [pc, #268]	@ (800682c <pvPortMalloc+0x190>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006724:	e004      	b.n	8006730 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800672a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	429a      	cmp	r2, r3
 8006738:	d903      	bls.n	8006742 <pvPortMalloc+0xa6>
 800673a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1f1      	bne.n	8006726 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006742:	4b37      	ldr	r3, [pc, #220]	@ (8006820 <pvPortMalloc+0x184>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006748:	429a      	cmp	r2, r3
 800674a:	d051      	beq.n	80067f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2208      	movs	r2, #8
 8006752:	4413      	add	r3, r2
 8006754:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	685a      	ldr	r2, [r3, #4]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	1ad2      	subs	r2, r2, r3
 8006766:	2308      	movs	r3, #8
 8006768:	005b      	lsls	r3, r3, #1
 800676a:	429a      	cmp	r2, r3
 800676c:	d920      	bls.n	80067b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800676e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4413      	add	r3, r2
 8006774:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <pvPortMalloc+0xfc>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	613b      	str	r3, [r7, #16]
}
 8006792:	bf00      	nop
 8006794:	bf00      	nop
 8006796:	e7fd      	b.n	8006794 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	1ad2      	subs	r2, r2, r3
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067aa:	69b8      	ldr	r0, [r7, #24]
 80067ac:	f000 f90a 	bl	80069c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006828 <pvPortMalloc+0x18c>)
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	4a1b      	ldr	r2, [pc, #108]	@ (8006828 <pvPortMalloc+0x18c>)
 80067bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067be:	4b1a      	ldr	r3, [pc, #104]	@ (8006828 <pvPortMalloc+0x18c>)
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006830 <pvPortMalloc+0x194>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d203      	bcs.n	80067d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067ca:	4b17      	ldr	r3, [pc, #92]	@ (8006828 <pvPortMalloc+0x18c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a18      	ldr	r2, [pc, #96]	@ (8006830 <pvPortMalloc+0x194>)
 80067d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	4b13      	ldr	r3, [pc, #76]	@ (8006824 <pvPortMalloc+0x188>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	431a      	orrs	r2, r3
 80067dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80067e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80067e6:	4b13      	ldr	r3, [pc, #76]	@ (8006834 <pvPortMalloc+0x198>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3301      	adds	r3, #1
 80067ec:	4a11      	ldr	r2, [pc, #68]	@ (8006834 <pvPortMalloc+0x198>)
 80067ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80067f0:	f7fe fbea 	bl	8004fc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00b      	beq.n	8006816 <pvPortMalloc+0x17a>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	60fb      	str	r3, [r7, #12]
}
 8006810:	bf00      	nop
 8006812:	bf00      	nop
 8006814:	e7fd      	b.n	8006812 <pvPortMalloc+0x176>
	return pvReturn;
 8006816:	69fb      	ldr	r3, [r7, #28]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3728      	adds	r7, #40	@ 0x28
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	20001b14 	.word	0x20001b14
 8006824:	20001b28 	.word	0x20001b28
 8006828:	20001b18 	.word	0x20001b18
 800682c:	20001b0c 	.word	0x20001b0c
 8006830:	20001b1c 	.word	0x20001b1c
 8006834:	20001b20 	.word	0x20001b20

08006838 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d04f      	beq.n	80068ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800684a:	2308      	movs	r3, #8
 800684c:	425b      	negs	r3, r3
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	4413      	add	r3, r2
 8006852:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	4b25      	ldr	r3, [pc, #148]	@ (80068f4 <vPortFree+0xbc>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4013      	ands	r3, r2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10b      	bne.n	800687e <vPortFree+0x46>
	__asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	60fb      	str	r3, [r7, #12]
}
 8006878:	bf00      	nop
 800687a:	bf00      	nop
 800687c:	e7fd      	b.n	800687a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00b      	beq.n	800689e <vPortFree+0x66>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	60bb      	str	r3, [r7, #8]
}
 8006898:	bf00      	nop
 800689a:	bf00      	nop
 800689c:	e7fd      	b.n	800689a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	4b14      	ldr	r3, [pc, #80]	@ (80068f4 <vPortFree+0xbc>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4013      	ands	r3, r2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01e      	beq.n	80068ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d11a      	bne.n	80068ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	4b0e      	ldr	r3, [pc, #56]	@ (80068f4 <vPortFree+0xbc>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	43db      	mvns	r3, r3
 80068be:	401a      	ands	r2, r3
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068c4:	f7fe fb72 	bl	8004fac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	4b0a      	ldr	r3, [pc, #40]	@ (80068f8 <vPortFree+0xc0>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4413      	add	r3, r2
 80068d2:	4a09      	ldr	r2, [pc, #36]	@ (80068f8 <vPortFree+0xc0>)
 80068d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068d6:	6938      	ldr	r0, [r7, #16]
 80068d8:	f000 f874 	bl	80069c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80068dc:	4b07      	ldr	r3, [pc, #28]	@ (80068fc <vPortFree+0xc4>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3301      	adds	r3, #1
 80068e2:	4a06      	ldr	r2, [pc, #24]	@ (80068fc <vPortFree+0xc4>)
 80068e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80068e6:	f7fe fb6f 	bl	8004fc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80068ea:	bf00      	nop
 80068ec:	3718      	adds	r7, #24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	20001b28 	.word	0x20001b28
 80068f8:	20001b18 	.word	0x20001b18
 80068fc:	20001b24 	.word	0x20001b24

08006900 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006900:	b480      	push	{r7}
 8006902:	b085      	sub	sp, #20
 8006904:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006906:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800690a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800690c:	4b27      	ldr	r3, [pc, #156]	@ (80069ac <prvHeapInit+0xac>)
 800690e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00c      	beq.n	8006934 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3307      	adds	r3, #7
 800691e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0307 	bic.w	r3, r3, #7
 8006926:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	4a1f      	ldr	r2, [pc, #124]	@ (80069ac <prvHeapInit+0xac>)
 8006930:	4413      	add	r3, r2
 8006932:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006938:	4a1d      	ldr	r2, [pc, #116]	@ (80069b0 <prvHeapInit+0xb0>)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800693e:	4b1c      	ldr	r3, [pc, #112]	@ (80069b0 <prvHeapInit+0xb0>)
 8006940:	2200      	movs	r2, #0
 8006942:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	4413      	add	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800694c:	2208      	movs	r2, #8
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	1a9b      	subs	r3, r3, r2
 8006952:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f023 0307 	bic.w	r3, r3, #7
 800695a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4a15      	ldr	r2, [pc, #84]	@ (80069b4 <prvHeapInit+0xb4>)
 8006960:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006962:	4b14      	ldr	r3, [pc, #80]	@ (80069b4 <prvHeapInit+0xb4>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2200      	movs	r2, #0
 8006968:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800696a:	4b12      	ldr	r3, [pc, #72]	@ (80069b4 <prvHeapInit+0xb4>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2200      	movs	r2, #0
 8006970:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	1ad2      	subs	r2, r2, r3
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006980:	4b0c      	ldr	r3, [pc, #48]	@ (80069b4 <prvHeapInit+0xb4>)
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	4a0a      	ldr	r2, [pc, #40]	@ (80069b8 <prvHeapInit+0xb8>)
 800698e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	4a09      	ldr	r2, [pc, #36]	@ (80069bc <prvHeapInit+0xbc>)
 8006996:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006998:	4b09      	ldr	r3, [pc, #36]	@ (80069c0 <prvHeapInit+0xc0>)
 800699a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800699e:	601a      	str	r2, [r3, #0]
}
 80069a0:	bf00      	nop
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	20000f0c 	.word	0x20000f0c
 80069b0:	20001b0c 	.word	0x20001b0c
 80069b4:	20001b14 	.word	0x20001b14
 80069b8:	20001b1c 	.word	0x20001b1c
 80069bc:	20001b18 	.word	0x20001b18
 80069c0:	20001b28 	.word	0x20001b28

080069c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069cc:	4b28      	ldr	r3, [pc, #160]	@ (8006a70 <prvInsertBlockIntoFreeList+0xac>)
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	e002      	b.n	80069d8 <prvInsertBlockIntoFreeList+0x14>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d8f7      	bhi.n	80069d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	4413      	add	r3, r2
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d108      	bne.n	8006a06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	441a      	add	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	441a      	add	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d118      	bne.n	8006a4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	4b15      	ldr	r3, [pc, #84]	@ (8006a74 <prvInsertBlockIntoFreeList+0xb0>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d00d      	beq.n	8006a42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	441a      	add	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	e008      	b.n	8006a54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a42:	4b0c      	ldr	r3, [pc, #48]	@ (8006a74 <prvInsertBlockIntoFreeList+0xb0>)
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	e003      	b.n	8006a54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d002      	beq.n	8006a62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a62:	bf00      	nop
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	20001b0c 	.word	0x20001b0c
 8006a74:	20001b14 	.word	0x20001b14

08006a78 <std>:
 8006a78:	2300      	movs	r3, #0
 8006a7a:	b510      	push	{r4, lr}
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8006a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a86:	6083      	str	r3, [r0, #8]
 8006a88:	8181      	strh	r1, [r0, #12]
 8006a8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a8c:	81c2      	strh	r2, [r0, #14]
 8006a8e:	6183      	str	r3, [r0, #24]
 8006a90:	4619      	mov	r1, r3
 8006a92:	2208      	movs	r2, #8
 8006a94:	305c      	adds	r0, #92	@ 0x5c
 8006a96:	f000 f9f9 	bl	8006e8c <memset>
 8006a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad0 <std+0x58>)
 8006a9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad4 <std+0x5c>)
 8006aa0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad8 <std+0x60>)
 8006aa4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8006adc <std+0x64>)
 8006aa8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae0 <std+0x68>)
 8006aac:	6224      	str	r4, [r4, #32]
 8006aae:	429c      	cmp	r4, r3
 8006ab0:	d006      	beq.n	8006ac0 <std+0x48>
 8006ab2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ab6:	4294      	cmp	r4, r2
 8006ab8:	d002      	beq.n	8006ac0 <std+0x48>
 8006aba:	33d0      	adds	r3, #208	@ 0xd0
 8006abc:	429c      	cmp	r4, r3
 8006abe:	d105      	bne.n	8006acc <std+0x54>
 8006ac0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ac8:	f000 ba58 	b.w	8006f7c <__retarget_lock_init_recursive>
 8006acc:	bd10      	pop	{r4, pc}
 8006ace:	bf00      	nop
 8006ad0:	08006cdd 	.word	0x08006cdd
 8006ad4:	08006cff 	.word	0x08006cff
 8006ad8:	08006d37 	.word	0x08006d37
 8006adc:	08006d5b 	.word	0x08006d5b
 8006ae0:	20001b2c 	.word	0x20001b2c

08006ae4 <stdio_exit_handler>:
 8006ae4:	4a02      	ldr	r2, [pc, #8]	@ (8006af0 <stdio_exit_handler+0xc>)
 8006ae6:	4903      	ldr	r1, [pc, #12]	@ (8006af4 <stdio_exit_handler+0x10>)
 8006ae8:	4803      	ldr	r0, [pc, #12]	@ (8006af8 <stdio_exit_handler+0x14>)
 8006aea:	f000 b869 	b.w	8006bc0 <_fwalk_sglue>
 8006aee:	bf00      	nop
 8006af0:	20000010 	.word	0x20000010
 8006af4:	08007839 	.word	0x08007839
 8006af8:	20000020 	.word	0x20000020

08006afc <cleanup_stdio>:
 8006afc:	6841      	ldr	r1, [r0, #4]
 8006afe:	4b0c      	ldr	r3, [pc, #48]	@ (8006b30 <cleanup_stdio+0x34>)
 8006b00:	4299      	cmp	r1, r3
 8006b02:	b510      	push	{r4, lr}
 8006b04:	4604      	mov	r4, r0
 8006b06:	d001      	beq.n	8006b0c <cleanup_stdio+0x10>
 8006b08:	f000 fe96 	bl	8007838 <_fflush_r>
 8006b0c:	68a1      	ldr	r1, [r4, #8]
 8006b0e:	4b09      	ldr	r3, [pc, #36]	@ (8006b34 <cleanup_stdio+0x38>)
 8006b10:	4299      	cmp	r1, r3
 8006b12:	d002      	beq.n	8006b1a <cleanup_stdio+0x1e>
 8006b14:	4620      	mov	r0, r4
 8006b16:	f000 fe8f 	bl	8007838 <_fflush_r>
 8006b1a:	68e1      	ldr	r1, [r4, #12]
 8006b1c:	4b06      	ldr	r3, [pc, #24]	@ (8006b38 <cleanup_stdio+0x3c>)
 8006b1e:	4299      	cmp	r1, r3
 8006b20:	d004      	beq.n	8006b2c <cleanup_stdio+0x30>
 8006b22:	4620      	mov	r0, r4
 8006b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b28:	f000 be86 	b.w	8007838 <_fflush_r>
 8006b2c:	bd10      	pop	{r4, pc}
 8006b2e:	bf00      	nop
 8006b30:	20001b2c 	.word	0x20001b2c
 8006b34:	20001b94 	.word	0x20001b94
 8006b38:	20001bfc 	.word	0x20001bfc

08006b3c <global_stdio_init.part.0>:
 8006b3c:	b510      	push	{r4, lr}
 8006b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b6c <global_stdio_init.part.0+0x30>)
 8006b40:	4c0b      	ldr	r4, [pc, #44]	@ (8006b70 <global_stdio_init.part.0+0x34>)
 8006b42:	4a0c      	ldr	r2, [pc, #48]	@ (8006b74 <global_stdio_init.part.0+0x38>)
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	4620      	mov	r0, r4
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2104      	movs	r1, #4
 8006b4c:	f7ff ff94 	bl	8006a78 <std>
 8006b50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b54:	2201      	movs	r2, #1
 8006b56:	2109      	movs	r1, #9
 8006b58:	f7ff ff8e 	bl	8006a78 <std>
 8006b5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b60:	2202      	movs	r2, #2
 8006b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b66:	2112      	movs	r1, #18
 8006b68:	f7ff bf86 	b.w	8006a78 <std>
 8006b6c:	20001c64 	.word	0x20001c64
 8006b70:	20001b2c 	.word	0x20001b2c
 8006b74:	08006ae5 	.word	0x08006ae5

08006b78 <__sfp_lock_acquire>:
 8006b78:	4801      	ldr	r0, [pc, #4]	@ (8006b80 <__sfp_lock_acquire+0x8>)
 8006b7a:	f000 ba00 	b.w	8006f7e <__retarget_lock_acquire_recursive>
 8006b7e:	bf00      	nop
 8006b80:	20001c6d 	.word	0x20001c6d

08006b84 <__sfp_lock_release>:
 8006b84:	4801      	ldr	r0, [pc, #4]	@ (8006b8c <__sfp_lock_release+0x8>)
 8006b86:	f000 b9fb 	b.w	8006f80 <__retarget_lock_release_recursive>
 8006b8a:	bf00      	nop
 8006b8c:	20001c6d 	.word	0x20001c6d

08006b90 <__sinit>:
 8006b90:	b510      	push	{r4, lr}
 8006b92:	4604      	mov	r4, r0
 8006b94:	f7ff fff0 	bl	8006b78 <__sfp_lock_acquire>
 8006b98:	6a23      	ldr	r3, [r4, #32]
 8006b9a:	b11b      	cbz	r3, 8006ba4 <__sinit+0x14>
 8006b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ba0:	f7ff bff0 	b.w	8006b84 <__sfp_lock_release>
 8006ba4:	4b04      	ldr	r3, [pc, #16]	@ (8006bb8 <__sinit+0x28>)
 8006ba6:	6223      	str	r3, [r4, #32]
 8006ba8:	4b04      	ldr	r3, [pc, #16]	@ (8006bbc <__sinit+0x2c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1f5      	bne.n	8006b9c <__sinit+0xc>
 8006bb0:	f7ff ffc4 	bl	8006b3c <global_stdio_init.part.0>
 8006bb4:	e7f2      	b.n	8006b9c <__sinit+0xc>
 8006bb6:	bf00      	nop
 8006bb8:	08006afd 	.word	0x08006afd
 8006bbc:	20001c64 	.word	0x20001c64

08006bc0 <_fwalk_sglue>:
 8006bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bc4:	4607      	mov	r7, r0
 8006bc6:	4688      	mov	r8, r1
 8006bc8:	4614      	mov	r4, r2
 8006bca:	2600      	movs	r6, #0
 8006bcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bd0:	f1b9 0901 	subs.w	r9, r9, #1
 8006bd4:	d505      	bpl.n	8006be2 <_fwalk_sglue+0x22>
 8006bd6:	6824      	ldr	r4, [r4, #0]
 8006bd8:	2c00      	cmp	r4, #0
 8006bda:	d1f7      	bne.n	8006bcc <_fwalk_sglue+0xc>
 8006bdc:	4630      	mov	r0, r6
 8006bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006be2:	89ab      	ldrh	r3, [r5, #12]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d907      	bls.n	8006bf8 <_fwalk_sglue+0x38>
 8006be8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bec:	3301      	adds	r3, #1
 8006bee:	d003      	beq.n	8006bf8 <_fwalk_sglue+0x38>
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	47c0      	blx	r8
 8006bf6:	4306      	orrs	r6, r0
 8006bf8:	3568      	adds	r5, #104	@ 0x68
 8006bfa:	e7e9      	b.n	8006bd0 <_fwalk_sglue+0x10>

08006bfc <iprintf>:
 8006bfc:	b40f      	push	{r0, r1, r2, r3}
 8006bfe:	b507      	push	{r0, r1, r2, lr}
 8006c00:	4906      	ldr	r1, [pc, #24]	@ (8006c1c <iprintf+0x20>)
 8006c02:	ab04      	add	r3, sp, #16
 8006c04:	6808      	ldr	r0, [r1, #0]
 8006c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c0a:	6881      	ldr	r1, [r0, #8]
 8006c0c:	9301      	str	r3, [sp, #4]
 8006c0e:	f000 fae9 	bl	80071e4 <_vfiprintf_r>
 8006c12:	b003      	add	sp, #12
 8006c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c18:	b004      	add	sp, #16
 8006c1a:	4770      	bx	lr
 8006c1c:	2000001c 	.word	0x2000001c

08006c20 <_puts_r>:
 8006c20:	6a03      	ldr	r3, [r0, #32]
 8006c22:	b570      	push	{r4, r5, r6, lr}
 8006c24:	6884      	ldr	r4, [r0, #8]
 8006c26:	4605      	mov	r5, r0
 8006c28:	460e      	mov	r6, r1
 8006c2a:	b90b      	cbnz	r3, 8006c30 <_puts_r+0x10>
 8006c2c:	f7ff ffb0 	bl	8006b90 <__sinit>
 8006c30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c32:	07db      	lsls	r3, r3, #31
 8006c34:	d405      	bmi.n	8006c42 <_puts_r+0x22>
 8006c36:	89a3      	ldrh	r3, [r4, #12]
 8006c38:	0598      	lsls	r0, r3, #22
 8006c3a:	d402      	bmi.n	8006c42 <_puts_r+0x22>
 8006c3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c3e:	f000 f99e 	bl	8006f7e <__retarget_lock_acquire_recursive>
 8006c42:	89a3      	ldrh	r3, [r4, #12]
 8006c44:	0719      	lsls	r1, r3, #28
 8006c46:	d502      	bpl.n	8006c4e <_puts_r+0x2e>
 8006c48:	6923      	ldr	r3, [r4, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d135      	bne.n	8006cba <_puts_r+0x9a>
 8006c4e:	4621      	mov	r1, r4
 8006c50:	4628      	mov	r0, r5
 8006c52:	f000 f8c5 	bl	8006de0 <__swsetup_r>
 8006c56:	b380      	cbz	r0, 8006cba <_puts_r+0x9a>
 8006c58:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006c5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c5e:	07da      	lsls	r2, r3, #31
 8006c60:	d405      	bmi.n	8006c6e <_puts_r+0x4e>
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	059b      	lsls	r3, r3, #22
 8006c66:	d402      	bmi.n	8006c6e <_puts_r+0x4e>
 8006c68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c6a:	f000 f989 	bl	8006f80 <__retarget_lock_release_recursive>
 8006c6e:	4628      	mov	r0, r5
 8006c70:	bd70      	pop	{r4, r5, r6, pc}
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	da04      	bge.n	8006c80 <_puts_r+0x60>
 8006c76:	69a2      	ldr	r2, [r4, #24]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	dc17      	bgt.n	8006cac <_puts_r+0x8c>
 8006c7c:	290a      	cmp	r1, #10
 8006c7e:	d015      	beq.n	8006cac <_puts_r+0x8c>
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	6022      	str	r2, [r4, #0]
 8006c86:	7019      	strb	r1, [r3, #0]
 8006c88:	68a3      	ldr	r3, [r4, #8]
 8006c8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	60a3      	str	r3, [r4, #8]
 8006c92:	2900      	cmp	r1, #0
 8006c94:	d1ed      	bne.n	8006c72 <_puts_r+0x52>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	da11      	bge.n	8006cbe <_puts_r+0x9e>
 8006c9a:	4622      	mov	r2, r4
 8006c9c:	210a      	movs	r1, #10
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f000 f85f 	bl	8006d62 <__swbuf_r>
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	d0d7      	beq.n	8006c58 <_puts_r+0x38>
 8006ca8:	250a      	movs	r5, #10
 8006caa:	e7d7      	b.n	8006c5c <_puts_r+0x3c>
 8006cac:	4622      	mov	r2, r4
 8006cae:	4628      	mov	r0, r5
 8006cb0:	f000 f857 	bl	8006d62 <__swbuf_r>
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d1e7      	bne.n	8006c88 <_puts_r+0x68>
 8006cb8:	e7ce      	b.n	8006c58 <_puts_r+0x38>
 8006cba:	3e01      	subs	r6, #1
 8006cbc:	e7e4      	b.n	8006c88 <_puts_r+0x68>
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	1c5a      	adds	r2, r3, #1
 8006cc2:	6022      	str	r2, [r4, #0]
 8006cc4:	220a      	movs	r2, #10
 8006cc6:	701a      	strb	r2, [r3, #0]
 8006cc8:	e7ee      	b.n	8006ca8 <_puts_r+0x88>
	...

08006ccc <puts>:
 8006ccc:	4b02      	ldr	r3, [pc, #8]	@ (8006cd8 <puts+0xc>)
 8006cce:	4601      	mov	r1, r0
 8006cd0:	6818      	ldr	r0, [r3, #0]
 8006cd2:	f7ff bfa5 	b.w	8006c20 <_puts_r>
 8006cd6:	bf00      	nop
 8006cd8:	2000001c 	.word	0x2000001c

08006cdc <__sread>:
 8006cdc:	b510      	push	{r4, lr}
 8006cde:	460c      	mov	r4, r1
 8006ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce4:	f000 f8fc 	bl	8006ee0 <_read_r>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	bfab      	itete	ge
 8006cec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006cee:	89a3      	ldrhlt	r3, [r4, #12]
 8006cf0:	181b      	addge	r3, r3, r0
 8006cf2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006cf6:	bfac      	ite	ge
 8006cf8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006cfa:	81a3      	strhlt	r3, [r4, #12]
 8006cfc:	bd10      	pop	{r4, pc}

08006cfe <__swrite>:
 8006cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d02:	461f      	mov	r7, r3
 8006d04:	898b      	ldrh	r3, [r1, #12]
 8006d06:	05db      	lsls	r3, r3, #23
 8006d08:	4605      	mov	r5, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	4616      	mov	r6, r2
 8006d0e:	d505      	bpl.n	8006d1c <__swrite+0x1e>
 8006d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d14:	2302      	movs	r3, #2
 8006d16:	2200      	movs	r2, #0
 8006d18:	f000 f8d0 	bl	8006ebc <_lseek_r>
 8006d1c:	89a3      	ldrh	r3, [r4, #12]
 8006d1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d26:	81a3      	strh	r3, [r4, #12]
 8006d28:	4632      	mov	r2, r6
 8006d2a:	463b      	mov	r3, r7
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d32:	f000 b8e7 	b.w	8006f04 <_write_r>

08006d36 <__sseek>:
 8006d36:	b510      	push	{r4, lr}
 8006d38:	460c      	mov	r4, r1
 8006d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d3e:	f000 f8bd 	bl	8006ebc <_lseek_r>
 8006d42:	1c43      	adds	r3, r0, #1
 8006d44:	89a3      	ldrh	r3, [r4, #12]
 8006d46:	bf15      	itete	ne
 8006d48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d52:	81a3      	strheq	r3, [r4, #12]
 8006d54:	bf18      	it	ne
 8006d56:	81a3      	strhne	r3, [r4, #12]
 8006d58:	bd10      	pop	{r4, pc}

08006d5a <__sclose>:
 8006d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d5e:	f000 b89d 	b.w	8006e9c <_close_r>

08006d62 <__swbuf_r>:
 8006d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d64:	460e      	mov	r6, r1
 8006d66:	4614      	mov	r4, r2
 8006d68:	4605      	mov	r5, r0
 8006d6a:	b118      	cbz	r0, 8006d74 <__swbuf_r+0x12>
 8006d6c:	6a03      	ldr	r3, [r0, #32]
 8006d6e:	b90b      	cbnz	r3, 8006d74 <__swbuf_r+0x12>
 8006d70:	f7ff ff0e 	bl	8006b90 <__sinit>
 8006d74:	69a3      	ldr	r3, [r4, #24]
 8006d76:	60a3      	str	r3, [r4, #8]
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	071a      	lsls	r2, r3, #28
 8006d7c:	d501      	bpl.n	8006d82 <__swbuf_r+0x20>
 8006d7e:	6923      	ldr	r3, [r4, #16]
 8006d80:	b943      	cbnz	r3, 8006d94 <__swbuf_r+0x32>
 8006d82:	4621      	mov	r1, r4
 8006d84:	4628      	mov	r0, r5
 8006d86:	f000 f82b 	bl	8006de0 <__swsetup_r>
 8006d8a:	b118      	cbz	r0, 8006d94 <__swbuf_r+0x32>
 8006d8c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006d90:	4638      	mov	r0, r7
 8006d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	6922      	ldr	r2, [r4, #16]
 8006d98:	1a98      	subs	r0, r3, r2
 8006d9a:	6963      	ldr	r3, [r4, #20]
 8006d9c:	b2f6      	uxtb	r6, r6
 8006d9e:	4283      	cmp	r3, r0
 8006da0:	4637      	mov	r7, r6
 8006da2:	dc05      	bgt.n	8006db0 <__swbuf_r+0x4e>
 8006da4:	4621      	mov	r1, r4
 8006da6:	4628      	mov	r0, r5
 8006da8:	f000 fd46 	bl	8007838 <_fflush_r>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d1ed      	bne.n	8006d8c <__swbuf_r+0x2a>
 8006db0:	68a3      	ldr	r3, [r4, #8]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	60a3      	str	r3, [r4, #8]
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	6022      	str	r2, [r4, #0]
 8006dbc:	701e      	strb	r6, [r3, #0]
 8006dbe:	6962      	ldr	r2, [r4, #20]
 8006dc0:	1c43      	adds	r3, r0, #1
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d004      	beq.n	8006dd0 <__swbuf_r+0x6e>
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	07db      	lsls	r3, r3, #31
 8006dca:	d5e1      	bpl.n	8006d90 <__swbuf_r+0x2e>
 8006dcc:	2e0a      	cmp	r6, #10
 8006dce:	d1df      	bne.n	8006d90 <__swbuf_r+0x2e>
 8006dd0:	4621      	mov	r1, r4
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f000 fd30 	bl	8007838 <_fflush_r>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	d0d9      	beq.n	8006d90 <__swbuf_r+0x2e>
 8006ddc:	e7d6      	b.n	8006d8c <__swbuf_r+0x2a>
	...

08006de0 <__swsetup_r>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	4b29      	ldr	r3, [pc, #164]	@ (8006e88 <__swsetup_r+0xa8>)
 8006de4:	4605      	mov	r5, r0
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	460c      	mov	r4, r1
 8006dea:	b118      	cbz	r0, 8006df4 <__swsetup_r+0x14>
 8006dec:	6a03      	ldr	r3, [r0, #32]
 8006dee:	b90b      	cbnz	r3, 8006df4 <__swsetup_r+0x14>
 8006df0:	f7ff fece 	bl	8006b90 <__sinit>
 8006df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006df8:	0719      	lsls	r1, r3, #28
 8006dfa:	d422      	bmi.n	8006e42 <__swsetup_r+0x62>
 8006dfc:	06da      	lsls	r2, r3, #27
 8006dfe:	d407      	bmi.n	8006e10 <__swsetup_r+0x30>
 8006e00:	2209      	movs	r2, #9
 8006e02:	602a      	str	r2, [r5, #0]
 8006e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e08:	81a3      	strh	r3, [r4, #12]
 8006e0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e0e:	e033      	b.n	8006e78 <__swsetup_r+0x98>
 8006e10:	0758      	lsls	r0, r3, #29
 8006e12:	d512      	bpl.n	8006e3a <__swsetup_r+0x5a>
 8006e14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e16:	b141      	cbz	r1, 8006e2a <__swsetup_r+0x4a>
 8006e18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e1c:	4299      	cmp	r1, r3
 8006e1e:	d002      	beq.n	8006e26 <__swsetup_r+0x46>
 8006e20:	4628      	mov	r0, r5
 8006e22:	f000 f8bd 	bl	8006fa0 <_free_r>
 8006e26:	2300      	movs	r3, #0
 8006e28:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e30:	81a3      	strh	r3, [r4, #12]
 8006e32:	2300      	movs	r3, #0
 8006e34:	6063      	str	r3, [r4, #4]
 8006e36:	6923      	ldr	r3, [r4, #16]
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	89a3      	ldrh	r3, [r4, #12]
 8006e3c:	f043 0308 	orr.w	r3, r3, #8
 8006e40:	81a3      	strh	r3, [r4, #12]
 8006e42:	6923      	ldr	r3, [r4, #16]
 8006e44:	b94b      	cbnz	r3, 8006e5a <__swsetup_r+0x7a>
 8006e46:	89a3      	ldrh	r3, [r4, #12]
 8006e48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e50:	d003      	beq.n	8006e5a <__swsetup_r+0x7a>
 8006e52:	4621      	mov	r1, r4
 8006e54:	4628      	mov	r0, r5
 8006e56:	f000 fd3d 	bl	80078d4 <__smakebuf_r>
 8006e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e5e:	f013 0201 	ands.w	r2, r3, #1
 8006e62:	d00a      	beq.n	8006e7a <__swsetup_r+0x9a>
 8006e64:	2200      	movs	r2, #0
 8006e66:	60a2      	str	r2, [r4, #8]
 8006e68:	6962      	ldr	r2, [r4, #20]
 8006e6a:	4252      	negs	r2, r2
 8006e6c:	61a2      	str	r2, [r4, #24]
 8006e6e:	6922      	ldr	r2, [r4, #16]
 8006e70:	b942      	cbnz	r2, 8006e84 <__swsetup_r+0xa4>
 8006e72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e76:	d1c5      	bne.n	8006e04 <__swsetup_r+0x24>
 8006e78:	bd38      	pop	{r3, r4, r5, pc}
 8006e7a:	0799      	lsls	r1, r3, #30
 8006e7c:	bf58      	it	pl
 8006e7e:	6962      	ldrpl	r2, [r4, #20]
 8006e80:	60a2      	str	r2, [r4, #8]
 8006e82:	e7f4      	b.n	8006e6e <__swsetup_r+0x8e>
 8006e84:	2000      	movs	r0, #0
 8006e86:	e7f7      	b.n	8006e78 <__swsetup_r+0x98>
 8006e88:	2000001c 	.word	0x2000001c

08006e8c <memset>:
 8006e8c:	4402      	add	r2, r0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d100      	bne.n	8006e96 <memset+0xa>
 8006e94:	4770      	bx	lr
 8006e96:	f803 1b01 	strb.w	r1, [r3], #1
 8006e9a:	e7f9      	b.n	8006e90 <memset+0x4>

08006e9c <_close_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4d06      	ldr	r5, [pc, #24]	@ (8006eb8 <_close_r+0x1c>)
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	602b      	str	r3, [r5, #0]
 8006ea8:	f7f9 ff55 	bl	8000d56 <_close>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d102      	bne.n	8006eb6 <_close_r+0x1a>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	b103      	cbz	r3, 8006eb6 <_close_r+0x1a>
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	20001c68 	.word	0x20001c68

08006ebc <_lseek_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4d07      	ldr	r5, [pc, #28]	@ (8006edc <_lseek_r+0x20>)
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	4608      	mov	r0, r1
 8006ec4:	4611      	mov	r1, r2
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	602a      	str	r2, [r5, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f7f9 ff6a 	bl	8000da4 <_lseek>
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	d102      	bne.n	8006eda <_lseek_r+0x1e>
 8006ed4:	682b      	ldr	r3, [r5, #0]
 8006ed6:	b103      	cbz	r3, 8006eda <_lseek_r+0x1e>
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	20001c68 	.word	0x20001c68

08006ee0 <_read_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4d07      	ldr	r5, [pc, #28]	@ (8006f00 <_read_r+0x20>)
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	4608      	mov	r0, r1
 8006ee8:	4611      	mov	r1, r2
 8006eea:	2200      	movs	r2, #0
 8006eec:	602a      	str	r2, [r5, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f7f9 fef8 	bl	8000ce4 <_read>
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	d102      	bne.n	8006efe <_read_r+0x1e>
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	b103      	cbz	r3, 8006efe <_read_r+0x1e>
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	bd38      	pop	{r3, r4, r5, pc}
 8006f00:	20001c68 	.word	0x20001c68

08006f04 <_write_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4d07      	ldr	r5, [pc, #28]	@ (8006f24 <_write_r+0x20>)
 8006f08:	4604      	mov	r4, r0
 8006f0a:	4608      	mov	r0, r1
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	2200      	movs	r2, #0
 8006f10:	602a      	str	r2, [r5, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	f7f9 ff03 	bl	8000d1e <_write>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	d102      	bne.n	8006f22 <_write_r+0x1e>
 8006f1c:	682b      	ldr	r3, [r5, #0]
 8006f1e:	b103      	cbz	r3, 8006f22 <_write_r+0x1e>
 8006f20:	6023      	str	r3, [r4, #0]
 8006f22:	bd38      	pop	{r3, r4, r5, pc}
 8006f24:	20001c68 	.word	0x20001c68

08006f28 <__errno>:
 8006f28:	4b01      	ldr	r3, [pc, #4]	@ (8006f30 <__errno+0x8>)
 8006f2a:	6818      	ldr	r0, [r3, #0]
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	2000001c 	.word	0x2000001c

08006f34 <__libc_init_array>:
 8006f34:	b570      	push	{r4, r5, r6, lr}
 8006f36:	4d0d      	ldr	r5, [pc, #52]	@ (8006f6c <__libc_init_array+0x38>)
 8006f38:	4c0d      	ldr	r4, [pc, #52]	@ (8006f70 <__libc_init_array+0x3c>)
 8006f3a:	1b64      	subs	r4, r4, r5
 8006f3c:	10a4      	asrs	r4, r4, #2
 8006f3e:	2600      	movs	r6, #0
 8006f40:	42a6      	cmp	r6, r4
 8006f42:	d109      	bne.n	8006f58 <__libc_init_array+0x24>
 8006f44:	4d0b      	ldr	r5, [pc, #44]	@ (8006f74 <__libc_init_array+0x40>)
 8006f46:	4c0c      	ldr	r4, [pc, #48]	@ (8006f78 <__libc_init_array+0x44>)
 8006f48:	f000 fd32 	bl	80079b0 <_init>
 8006f4c:	1b64      	subs	r4, r4, r5
 8006f4e:	10a4      	asrs	r4, r4, #2
 8006f50:	2600      	movs	r6, #0
 8006f52:	42a6      	cmp	r6, r4
 8006f54:	d105      	bne.n	8006f62 <__libc_init_array+0x2e>
 8006f56:	bd70      	pop	{r4, r5, r6, pc}
 8006f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f5c:	4798      	blx	r3
 8006f5e:	3601      	adds	r6, #1
 8006f60:	e7ee      	b.n	8006f40 <__libc_init_array+0xc>
 8006f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f66:	4798      	blx	r3
 8006f68:	3601      	adds	r6, #1
 8006f6a:	e7f2      	b.n	8006f52 <__libc_init_array+0x1e>
 8006f6c:	08007b34 	.word	0x08007b34
 8006f70:	08007b34 	.word	0x08007b34
 8006f74:	08007b34 	.word	0x08007b34
 8006f78:	08007b38 	.word	0x08007b38

08006f7c <__retarget_lock_init_recursive>:
 8006f7c:	4770      	bx	lr

08006f7e <__retarget_lock_acquire_recursive>:
 8006f7e:	4770      	bx	lr

08006f80 <__retarget_lock_release_recursive>:
 8006f80:	4770      	bx	lr

08006f82 <memcpy>:
 8006f82:	440a      	add	r2, r1
 8006f84:	4291      	cmp	r1, r2
 8006f86:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006f8a:	d100      	bne.n	8006f8e <memcpy+0xc>
 8006f8c:	4770      	bx	lr
 8006f8e:	b510      	push	{r4, lr}
 8006f90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f98:	4291      	cmp	r1, r2
 8006f9a:	d1f9      	bne.n	8006f90 <memcpy+0xe>
 8006f9c:	bd10      	pop	{r4, pc}
	...

08006fa0 <_free_r>:
 8006fa0:	b538      	push	{r3, r4, r5, lr}
 8006fa2:	4605      	mov	r5, r0
 8006fa4:	2900      	cmp	r1, #0
 8006fa6:	d041      	beq.n	800702c <_free_r+0x8c>
 8006fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fac:	1f0c      	subs	r4, r1, #4
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	bfb8      	it	lt
 8006fb2:	18e4      	addlt	r4, r4, r3
 8006fb4:	f000 f8e0 	bl	8007178 <__malloc_lock>
 8006fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8007030 <_free_r+0x90>)
 8006fba:	6813      	ldr	r3, [r2, #0]
 8006fbc:	b933      	cbnz	r3, 8006fcc <_free_r+0x2c>
 8006fbe:	6063      	str	r3, [r4, #4]
 8006fc0:	6014      	str	r4, [r2, #0]
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fc8:	f000 b8dc 	b.w	8007184 <__malloc_unlock>
 8006fcc:	42a3      	cmp	r3, r4
 8006fce:	d908      	bls.n	8006fe2 <_free_r+0x42>
 8006fd0:	6820      	ldr	r0, [r4, #0]
 8006fd2:	1821      	adds	r1, r4, r0
 8006fd4:	428b      	cmp	r3, r1
 8006fd6:	bf01      	itttt	eq
 8006fd8:	6819      	ldreq	r1, [r3, #0]
 8006fda:	685b      	ldreq	r3, [r3, #4]
 8006fdc:	1809      	addeq	r1, r1, r0
 8006fde:	6021      	streq	r1, [r4, #0]
 8006fe0:	e7ed      	b.n	8006fbe <_free_r+0x1e>
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	b10b      	cbz	r3, 8006fec <_free_r+0x4c>
 8006fe8:	42a3      	cmp	r3, r4
 8006fea:	d9fa      	bls.n	8006fe2 <_free_r+0x42>
 8006fec:	6811      	ldr	r1, [r2, #0]
 8006fee:	1850      	adds	r0, r2, r1
 8006ff0:	42a0      	cmp	r0, r4
 8006ff2:	d10b      	bne.n	800700c <_free_r+0x6c>
 8006ff4:	6820      	ldr	r0, [r4, #0]
 8006ff6:	4401      	add	r1, r0
 8006ff8:	1850      	adds	r0, r2, r1
 8006ffa:	4283      	cmp	r3, r0
 8006ffc:	6011      	str	r1, [r2, #0]
 8006ffe:	d1e0      	bne.n	8006fc2 <_free_r+0x22>
 8007000:	6818      	ldr	r0, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	6053      	str	r3, [r2, #4]
 8007006:	4408      	add	r0, r1
 8007008:	6010      	str	r0, [r2, #0]
 800700a:	e7da      	b.n	8006fc2 <_free_r+0x22>
 800700c:	d902      	bls.n	8007014 <_free_r+0x74>
 800700e:	230c      	movs	r3, #12
 8007010:	602b      	str	r3, [r5, #0]
 8007012:	e7d6      	b.n	8006fc2 <_free_r+0x22>
 8007014:	6820      	ldr	r0, [r4, #0]
 8007016:	1821      	adds	r1, r4, r0
 8007018:	428b      	cmp	r3, r1
 800701a:	bf04      	itt	eq
 800701c:	6819      	ldreq	r1, [r3, #0]
 800701e:	685b      	ldreq	r3, [r3, #4]
 8007020:	6063      	str	r3, [r4, #4]
 8007022:	bf04      	itt	eq
 8007024:	1809      	addeq	r1, r1, r0
 8007026:	6021      	streq	r1, [r4, #0]
 8007028:	6054      	str	r4, [r2, #4]
 800702a:	e7ca      	b.n	8006fc2 <_free_r+0x22>
 800702c:	bd38      	pop	{r3, r4, r5, pc}
 800702e:	bf00      	nop
 8007030:	20001c74 	.word	0x20001c74

08007034 <sbrk_aligned>:
 8007034:	b570      	push	{r4, r5, r6, lr}
 8007036:	4e0f      	ldr	r6, [pc, #60]	@ (8007074 <sbrk_aligned+0x40>)
 8007038:	460c      	mov	r4, r1
 800703a:	6831      	ldr	r1, [r6, #0]
 800703c:	4605      	mov	r5, r0
 800703e:	b911      	cbnz	r1, 8007046 <sbrk_aligned+0x12>
 8007040:	f000 fca6 	bl	8007990 <_sbrk_r>
 8007044:	6030      	str	r0, [r6, #0]
 8007046:	4621      	mov	r1, r4
 8007048:	4628      	mov	r0, r5
 800704a:	f000 fca1 	bl	8007990 <_sbrk_r>
 800704e:	1c43      	adds	r3, r0, #1
 8007050:	d103      	bne.n	800705a <sbrk_aligned+0x26>
 8007052:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007056:	4620      	mov	r0, r4
 8007058:	bd70      	pop	{r4, r5, r6, pc}
 800705a:	1cc4      	adds	r4, r0, #3
 800705c:	f024 0403 	bic.w	r4, r4, #3
 8007060:	42a0      	cmp	r0, r4
 8007062:	d0f8      	beq.n	8007056 <sbrk_aligned+0x22>
 8007064:	1a21      	subs	r1, r4, r0
 8007066:	4628      	mov	r0, r5
 8007068:	f000 fc92 	bl	8007990 <_sbrk_r>
 800706c:	3001      	adds	r0, #1
 800706e:	d1f2      	bne.n	8007056 <sbrk_aligned+0x22>
 8007070:	e7ef      	b.n	8007052 <sbrk_aligned+0x1e>
 8007072:	bf00      	nop
 8007074:	20001c70 	.word	0x20001c70

08007078 <_malloc_r>:
 8007078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800707c:	1ccd      	adds	r5, r1, #3
 800707e:	f025 0503 	bic.w	r5, r5, #3
 8007082:	3508      	adds	r5, #8
 8007084:	2d0c      	cmp	r5, #12
 8007086:	bf38      	it	cc
 8007088:	250c      	movcc	r5, #12
 800708a:	2d00      	cmp	r5, #0
 800708c:	4606      	mov	r6, r0
 800708e:	db01      	blt.n	8007094 <_malloc_r+0x1c>
 8007090:	42a9      	cmp	r1, r5
 8007092:	d904      	bls.n	800709e <_malloc_r+0x26>
 8007094:	230c      	movs	r3, #12
 8007096:	6033      	str	r3, [r6, #0]
 8007098:	2000      	movs	r0, #0
 800709a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800709e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007174 <_malloc_r+0xfc>
 80070a2:	f000 f869 	bl	8007178 <__malloc_lock>
 80070a6:	f8d8 3000 	ldr.w	r3, [r8]
 80070aa:	461c      	mov	r4, r3
 80070ac:	bb44      	cbnz	r4, 8007100 <_malloc_r+0x88>
 80070ae:	4629      	mov	r1, r5
 80070b0:	4630      	mov	r0, r6
 80070b2:	f7ff ffbf 	bl	8007034 <sbrk_aligned>
 80070b6:	1c43      	adds	r3, r0, #1
 80070b8:	4604      	mov	r4, r0
 80070ba:	d158      	bne.n	800716e <_malloc_r+0xf6>
 80070bc:	f8d8 4000 	ldr.w	r4, [r8]
 80070c0:	4627      	mov	r7, r4
 80070c2:	2f00      	cmp	r7, #0
 80070c4:	d143      	bne.n	800714e <_malloc_r+0xd6>
 80070c6:	2c00      	cmp	r4, #0
 80070c8:	d04b      	beq.n	8007162 <_malloc_r+0xea>
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	4639      	mov	r1, r7
 80070ce:	4630      	mov	r0, r6
 80070d0:	eb04 0903 	add.w	r9, r4, r3
 80070d4:	f000 fc5c 	bl	8007990 <_sbrk_r>
 80070d8:	4581      	cmp	r9, r0
 80070da:	d142      	bne.n	8007162 <_malloc_r+0xea>
 80070dc:	6821      	ldr	r1, [r4, #0]
 80070de:	1a6d      	subs	r5, r5, r1
 80070e0:	4629      	mov	r1, r5
 80070e2:	4630      	mov	r0, r6
 80070e4:	f7ff ffa6 	bl	8007034 <sbrk_aligned>
 80070e8:	3001      	adds	r0, #1
 80070ea:	d03a      	beq.n	8007162 <_malloc_r+0xea>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	442b      	add	r3, r5
 80070f0:	6023      	str	r3, [r4, #0]
 80070f2:	f8d8 3000 	ldr.w	r3, [r8]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	bb62      	cbnz	r2, 8007154 <_malloc_r+0xdc>
 80070fa:	f8c8 7000 	str.w	r7, [r8]
 80070fe:	e00f      	b.n	8007120 <_malloc_r+0xa8>
 8007100:	6822      	ldr	r2, [r4, #0]
 8007102:	1b52      	subs	r2, r2, r5
 8007104:	d420      	bmi.n	8007148 <_malloc_r+0xd0>
 8007106:	2a0b      	cmp	r2, #11
 8007108:	d917      	bls.n	800713a <_malloc_r+0xc2>
 800710a:	1961      	adds	r1, r4, r5
 800710c:	42a3      	cmp	r3, r4
 800710e:	6025      	str	r5, [r4, #0]
 8007110:	bf18      	it	ne
 8007112:	6059      	strne	r1, [r3, #4]
 8007114:	6863      	ldr	r3, [r4, #4]
 8007116:	bf08      	it	eq
 8007118:	f8c8 1000 	streq.w	r1, [r8]
 800711c:	5162      	str	r2, [r4, r5]
 800711e:	604b      	str	r3, [r1, #4]
 8007120:	4630      	mov	r0, r6
 8007122:	f000 f82f 	bl	8007184 <__malloc_unlock>
 8007126:	f104 000b 	add.w	r0, r4, #11
 800712a:	1d23      	adds	r3, r4, #4
 800712c:	f020 0007 	bic.w	r0, r0, #7
 8007130:	1ac2      	subs	r2, r0, r3
 8007132:	bf1c      	itt	ne
 8007134:	1a1b      	subne	r3, r3, r0
 8007136:	50a3      	strne	r3, [r4, r2]
 8007138:	e7af      	b.n	800709a <_malloc_r+0x22>
 800713a:	6862      	ldr	r2, [r4, #4]
 800713c:	42a3      	cmp	r3, r4
 800713e:	bf0c      	ite	eq
 8007140:	f8c8 2000 	streq.w	r2, [r8]
 8007144:	605a      	strne	r2, [r3, #4]
 8007146:	e7eb      	b.n	8007120 <_malloc_r+0xa8>
 8007148:	4623      	mov	r3, r4
 800714a:	6864      	ldr	r4, [r4, #4]
 800714c:	e7ae      	b.n	80070ac <_malloc_r+0x34>
 800714e:	463c      	mov	r4, r7
 8007150:	687f      	ldr	r7, [r7, #4]
 8007152:	e7b6      	b.n	80070c2 <_malloc_r+0x4a>
 8007154:	461a      	mov	r2, r3
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	42a3      	cmp	r3, r4
 800715a:	d1fb      	bne.n	8007154 <_malloc_r+0xdc>
 800715c:	2300      	movs	r3, #0
 800715e:	6053      	str	r3, [r2, #4]
 8007160:	e7de      	b.n	8007120 <_malloc_r+0xa8>
 8007162:	230c      	movs	r3, #12
 8007164:	6033      	str	r3, [r6, #0]
 8007166:	4630      	mov	r0, r6
 8007168:	f000 f80c 	bl	8007184 <__malloc_unlock>
 800716c:	e794      	b.n	8007098 <_malloc_r+0x20>
 800716e:	6005      	str	r5, [r0, #0]
 8007170:	e7d6      	b.n	8007120 <_malloc_r+0xa8>
 8007172:	bf00      	nop
 8007174:	20001c74 	.word	0x20001c74

08007178 <__malloc_lock>:
 8007178:	4801      	ldr	r0, [pc, #4]	@ (8007180 <__malloc_lock+0x8>)
 800717a:	f7ff bf00 	b.w	8006f7e <__retarget_lock_acquire_recursive>
 800717e:	bf00      	nop
 8007180:	20001c6c 	.word	0x20001c6c

08007184 <__malloc_unlock>:
 8007184:	4801      	ldr	r0, [pc, #4]	@ (800718c <__malloc_unlock+0x8>)
 8007186:	f7ff befb 	b.w	8006f80 <__retarget_lock_release_recursive>
 800718a:	bf00      	nop
 800718c:	20001c6c 	.word	0x20001c6c

08007190 <__sfputc_r>:
 8007190:	6893      	ldr	r3, [r2, #8]
 8007192:	3b01      	subs	r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	b410      	push	{r4}
 8007198:	6093      	str	r3, [r2, #8]
 800719a:	da08      	bge.n	80071ae <__sfputc_r+0x1e>
 800719c:	6994      	ldr	r4, [r2, #24]
 800719e:	42a3      	cmp	r3, r4
 80071a0:	db01      	blt.n	80071a6 <__sfputc_r+0x16>
 80071a2:	290a      	cmp	r1, #10
 80071a4:	d103      	bne.n	80071ae <__sfputc_r+0x1e>
 80071a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071aa:	f7ff bdda 	b.w	8006d62 <__swbuf_r>
 80071ae:	6813      	ldr	r3, [r2, #0]
 80071b0:	1c58      	adds	r0, r3, #1
 80071b2:	6010      	str	r0, [r2, #0]
 80071b4:	7019      	strb	r1, [r3, #0]
 80071b6:	4608      	mov	r0, r1
 80071b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071bc:	4770      	bx	lr

080071be <__sfputs_r>:
 80071be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c0:	4606      	mov	r6, r0
 80071c2:	460f      	mov	r7, r1
 80071c4:	4614      	mov	r4, r2
 80071c6:	18d5      	adds	r5, r2, r3
 80071c8:	42ac      	cmp	r4, r5
 80071ca:	d101      	bne.n	80071d0 <__sfputs_r+0x12>
 80071cc:	2000      	movs	r0, #0
 80071ce:	e007      	b.n	80071e0 <__sfputs_r+0x22>
 80071d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071d4:	463a      	mov	r2, r7
 80071d6:	4630      	mov	r0, r6
 80071d8:	f7ff ffda 	bl	8007190 <__sfputc_r>
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d1f3      	bne.n	80071c8 <__sfputs_r+0xa>
 80071e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071e4 <_vfiprintf_r>:
 80071e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e8:	460d      	mov	r5, r1
 80071ea:	b09d      	sub	sp, #116	@ 0x74
 80071ec:	4614      	mov	r4, r2
 80071ee:	4698      	mov	r8, r3
 80071f0:	4606      	mov	r6, r0
 80071f2:	b118      	cbz	r0, 80071fc <_vfiprintf_r+0x18>
 80071f4:	6a03      	ldr	r3, [r0, #32]
 80071f6:	b90b      	cbnz	r3, 80071fc <_vfiprintf_r+0x18>
 80071f8:	f7ff fcca 	bl	8006b90 <__sinit>
 80071fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071fe:	07d9      	lsls	r1, r3, #31
 8007200:	d405      	bmi.n	800720e <_vfiprintf_r+0x2a>
 8007202:	89ab      	ldrh	r3, [r5, #12]
 8007204:	059a      	lsls	r2, r3, #22
 8007206:	d402      	bmi.n	800720e <_vfiprintf_r+0x2a>
 8007208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800720a:	f7ff feb8 	bl	8006f7e <__retarget_lock_acquire_recursive>
 800720e:	89ab      	ldrh	r3, [r5, #12]
 8007210:	071b      	lsls	r3, r3, #28
 8007212:	d501      	bpl.n	8007218 <_vfiprintf_r+0x34>
 8007214:	692b      	ldr	r3, [r5, #16]
 8007216:	b99b      	cbnz	r3, 8007240 <_vfiprintf_r+0x5c>
 8007218:	4629      	mov	r1, r5
 800721a:	4630      	mov	r0, r6
 800721c:	f7ff fde0 	bl	8006de0 <__swsetup_r>
 8007220:	b170      	cbz	r0, 8007240 <_vfiprintf_r+0x5c>
 8007222:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007224:	07dc      	lsls	r4, r3, #31
 8007226:	d504      	bpl.n	8007232 <_vfiprintf_r+0x4e>
 8007228:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800722c:	b01d      	add	sp, #116	@ 0x74
 800722e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007232:	89ab      	ldrh	r3, [r5, #12]
 8007234:	0598      	lsls	r0, r3, #22
 8007236:	d4f7      	bmi.n	8007228 <_vfiprintf_r+0x44>
 8007238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800723a:	f7ff fea1 	bl	8006f80 <__retarget_lock_release_recursive>
 800723e:	e7f3      	b.n	8007228 <_vfiprintf_r+0x44>
 8007240:	2300      	movs	r3, #0
 8007242:	9309      	str	r3, [sp, #36]	@ 0x24
 8007244:	2320      	movs	r3, #32
 8007246:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800724a:	f8cd 800c 	str.w	r8, [sp, #12]
 800724e:	2330      	movs	r3, #48	@ 0x30
 8007250:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007400 <_vfiprintf_r+0x21c>
 8007254:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007258:	f04f 0901 	mov.w	r9, #1
 800725c:	4623      	mov	r3, r4
 800725e:	469a      	mov	sl, r3
 8007260:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007264:	b10a      	cbz	r2, 800726a <_vfiprintf_r+0x86>
 8007266:	2a25      	cmp	r2, #37	@ 0x25
 8007268:	d1f9      	bne.n	800725e <_vfiprintf_r+0x7a>
 800726a:	ebba 0b04 	subs.w	fp, sl, r4
 800726e:	d00b      	beq.n	8007288 <_vfiprintf_r+0xa4>
 8007270:	465b      	mov	r3, fp
 8007272:	4622      	mov	r2, r4
 8007274:	4629      	mov	r1, r5
 8007276:	4630      	mov	r0, r6
 8007278:	f7ff ffa1 	bl	80071be <__sfputs_r>
 800727c:	3001      	adds	r0, #1
 800727e:	f000 80a7 	beq.w	80073d0 <_vfiprintf_r+0x1ec>
 8007282:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007284:	445a      	add	r2, fp
 8007286:	9209      	str	r2, [sp, #36]	@ 0x24
 8007288:	f89a 3000 	ldrb.w	r3, [sl]
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 809f 	beq.w	80073d0 <_vfiprintf_r+0x1ec>
 8007292:	2300      	movs	r3, #0
 8007294:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007298:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800729c:	f10a 0a01 	add.w	sl, sl, #1
 80072a0:	9304      	str	r3, [sp, #16]
 80072a2:	9307      	str	r3, [sp, #28]
 80072a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80072aa:	4654      	mov	r4, sl
 80072ac:	2205      	movs	r2, #5
 80072ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b2:	4853      	ldr	r0, [pc, #332]	@ (8007400 <_vfiprintf_r+0x21c>)
 80072b4:	f7f8 ffb4 	bl	8000220 <memchr>
 80072b8:	9a04      	ldr	r2, [sp, #16]
 80072ba:	b9d8      	cbnz	r0, 80072f4 <_vfiprintf_r+0x110>
 80072bc:	06d1      	lsls	r1, r2, #27
 80072be:	bf44      	itt	mi
 80072c0:	2320      	movmi	r3, #32
 80072c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072c6:	0713      	lsls	r3, r2, #28
 80072c8:	bf44      	itt	mi
 80072ca:	232b      	movmi	r3, #43	@ 0x2b
 80072cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072d0:	f89a 3000 	ldrb.w	r3, [sl]
 80072d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80072d6:	d015      	beq.n	8007304 <_vfiprintf_r+0x120>
 80072d8:	9a07      	ldr	r2, [sp, #28]
 80072da:	4654      	mov	r4, sl
 80072dc:	2000      	movs	r0, #0
 80072de:	f04f 0c0a 	mov.w	ip, #10
 80072e2:	4621      	mov	r1, r4
 80072e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072e8:	3b30      	subs	r3, #48	@ 0x30
 80072ea:	2b09      	cmp	r3, #9
 80072ec:	d94b      	bls.n	8007386 <_vfiprintf_r+0x1a2>
 80072ee:	b1b0      	cbz	r0, 800731e <_vfiprintf_r+0x13a>
 80072f0:	9207      	str	r2, [sp, #28]
 80072f2:	e014      	b.n	800731e <_vfiprintf_r+0x13a>
 80072f4:	eba0 0308 	sub.w	r3, r0, r8
 80072f8:	fa09 f303 	lsl.w	r3, r9, r3
 80072fc:	4313      	orrs	r3, r2
 80072fe:	9304      	str	r3, [sp, #16]
 8007300:	46a2      	mov	sl, r4
 8007302:	e7d2      	b.n	80072aa <_vfiprintf_r+0xc6>
 8007304:	9b03      	ldr	r3, [sp, #12]
 8007306:	1d19      	adds	r1, r3, #4
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	9103      	str	r1, [sp, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	bfbb      	ittet	lt
 8007310:	425b      	neglt	r3, r3
 8007312:	f042 0202 	orrlt.w	r2, r2, #2
 8007316:	9307      	strge	r3, [sp, #28]
 8007318:	9307      	strlt	r3, [sp, #28]
 800731a:	bfb8      	it	lt
 800731c:	9204      	strlt	r2, [sp, #16]
 800731e:	7823      	ldrb	r3, [r4, #0]
 8007320:	2b2e      	cmp	r3, #46	@ 0x2e
 8007322:	d10a      	bne.n	800733a <_vfiprintf_r+0x156>
 8007324:	7863      	ldrb	r3, [r4, #1]
 8007326:	2b2a      	cmp	r3, #42	@ 0x2a
 8007328:	d132      	bne.n	8007390 <_vfiprintf_r+0x1ac>
 800732a:	9b03      	ldr	r3, [sp, #12]
 800732c:	1d1a      	adds	r2, r3, #4
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	9203      	str	r2, [sp, #12]
 8007332:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007336:	3402      	adds	r4, #2
 8007338:	9305      	str	r3, [sp, #20]
 800733a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007410 <_vfiprintf_r+0x22c>
 800733e:	7821      	ldrb	r1, [r4, #0]
 8007340:	2203      	movs	r2, #3
 8007342:	4650      	mov	r0, sl
 8007344:	f7f8 ff6c 	bl	8000220 <memchr>
 8007348:	b138      	cbz	r0, 800735a <_vfiprintf_r+0x176>
 800734a:	9b04      	ldr	r3, [sp, #16]
 800734c:	eba0 000a 	sub.w	r0, r0, sl
 8007350:	2240      	movs	r2, #64	@ 0x40
 8007352:	4082      	lsls	r2, r0
 8007354:	4313      	orrs	r3, r2
 8007356:	3401      	adds	r4, #1
 8007358:	9304      	str	r3, [sp, #16]
 800735a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800735e:	4829      	ldr	r0, [pc, #164]	@ (8007404 <_vfiprintf_r+0x220>)
 8007360:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007364:	2206      	movs	r2, #6
 8007366:	f7f8 ff5b 	bl	8000220 <memchr>
 800736a:	2800      	cmp	r0, #0
 800736c:	d03f      	beq.n	80073ee <_vfiprintf_r+0x20a>
 800736e:	4b26      	ldr	r3, [pc, #152]	@ (8007408 <_vfiprintf_r+0x224>)
 8007370:	bb1b      	cbnz	r3, 80073ba <_vfiprintf_r+0x1d6>
 8007372:	9b03      	ldr	r3, [sp, #12]
 8007374:	3307      	adds	r3, #7
 8007376:	f023 0307 	bic.w	r3, r3, #7
 800737a:	3308      	adds	r3, #8
 800737c:	9303      	str	r3, [sp, #12]
 800737e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007380:	443b      	add	r3, r7
 8007382:	9309      	str	r3, [sp, #36]	@ 0x24
 8007384:	e76a      	b.n	800725c <_vfiprintf_r+0x78>
 8007386:	fb0c 3202 	mla	r2, ip, r2, r3
 800738a:	460c      	mov	r4, r1
 800738c:	2001      	movs	r0, #1
 800738e:	e7a8      	b.n	80072e2 <_vfiprintf_r+0xfe>
 8007390:	2300      	movs	r3, #0
 8007392:	3401      	adds	r4, #1
 8007394:	9305      	str	r3, [sp, #20]
 8007396:	4619      	mov	r1, r3
 8007398:	f04f 0c0a 	mov.w	ip, #10
 800739c:	4620      	mov	r0, r4
 800739e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073a2:	3a30      	subs	r2, #48	@ 0x30
 80073a4:	2a09      	cmp	r2, #9
 80073a6:	d903      	bls.n	80073b0 <_vfiprintf_r+0x1cc>
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d0c6      	beq.n	800733a <_vfiprintf_r+0x156>
 80073ac:	9105      	str	r1, [sp, #20]
 80073ae:	e7c4      	b.n	800733a <_vfiprintf_r+0x156>
 80073b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80073b4:	4604      	mov	r4, r0
 80073b6:	2301      	movs	r3, #1
 80073b8:	e7f0      	b.n	800739c <_vfiprintf_r+0x1b8>
 80073ba:	ab03      	add	r3, sp, #12
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	462a      	mov	r2, r5
 80073c0:	4b12      	ldr	r3, [pc, #72]	@ (800740c <_vfiprintf_r+0x228>)
 80073c2:	a904      	add	r1, sp, #16
 80073c4:	4630      	mov	r0, r6
 80073c6:	f3af 8000 	nop.w
 80073ca:	4607      	mov	r7, r0
 80073cc:	1c78      	adds	r0, r7, #1
 80073ce:	d1d6      	bne.n	800737e <_vfiprintf_r+0x19a>
 80073d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073d2:	07d9      	lsls	r1, r3, #31
 80073d4:	d405      	bmi.n	80073e2 <_vfiprintf_r+0x1fe>
 80073d6:	89ab      	ldrh	r3, [r5, #12]
 80073d8:	059a      	lsls	r2, r3, #22
 80073da:	d402      	bmi.n	80073e2 <_vfiprintf_r+0x1fe>
 80073dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073de:	f7ff fdcf 	bl	8006f80 <__retarget_lock_release_recursive>
 80073e2:	89ab      	ldrh	r3, [r5, #12]
 80073e4:	065b      	lsls	r3, r3, #25
 80073e6:	f53f af1f 	bmi.w	8007228 <_vfiprintf_r+0x44>
 80073ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073ec:	e71e      	b.n	800722c <_vfiprintf_r+0x48>
 80073ee:	ab03      	add	r3, sp, #12
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	462a      	mov	r2, r5
 80073f4:	4b05      	ldr	r3, [pc, #20]	@ (800740c <_vfiprintf_r+0x228>)
 80073f6:	a904      	add	r1, sp, #16
 80073f8:	4630      	mov	r0, r6
 80073fa:	f000 f879 	bl	80074f0 <_printf_i>
 80073fe:	e7e4      	b.n	80073ca <_vfiprintf_r+0x1e6>
 8007400:	08007af8 	.word	0x08007af8
 8007404:	08007b02 	.word	0x08007b02
 8007408:	00000000 	.word	0x00000000
 800740c:	080071bf 	.word	0x080071bf
 8007410:	08007afe 	.word	0x08007afe

08007414 <_printf_common>:
 8007414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007418:	4616      	mov	r6, r2
 800741a:	4698      	mov	r8, r3
 800741c:	688a      	ldr	r2, [r1, #8]
 800741e:	690b      	ldr	r3, [r1, #16]
 8007420:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007424:	4293      	cmp	r3, r2
 8007426:	bfb8      	it	lt
 8007428:	4613      	movlt	r3, r2
 800742a:	6033      	str	r3, [r6, #0]
 800742c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007430:	4607      	mov	r7, r0
 8007432:	460c      	mov	r4, r1
 8007434:	b10a      	cbz	r2, 800743a <_printf_common+0x26>
 8007436:	3301      	adds	r3, #1
 8007438:	6033      	str	r3, [r6, #0]
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	0699      	lsls	r1, r3, #26
 800743e:	bf42      	ittt	mi
 8007440:	6833      	ldrmi	r3, [r6, #0]
 8007442:	3302      	addmi	r3, #2
 8007444:	6033      	strmi	r3, [r6, #0]
 8007446:	6825      	ldr	r5, [r4, #0]
 8007448:	f015 0506 	ands.w	r5, r5, #6
 800744c:	d106      	bne.n	800745c <_printf_common+0x48>
 800744e:	f104 0a19 	add.w	sl, r4, #25
 8007452:	68e3      	ldr	r3, [r4, #12]
 8007454:	6832      	ldr	r2, [r6, #0]
 8007456:	1a9b      	subs	r3, r3, r2
 8007458:	42ab      	cmp	r3, r5
 800745a:	dc26      	bgt.n	80074aa <_printf_common+0x96>
 800745c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007460:	6822      	ldr	r2, [r4, #0]
 8007462:	3b00      	subs	r3, #0
 8007464:	bf18      	it	ne
 8007466:	2301      	movne	r3, #1
 8007468:	0692      	lsls	r2, r2, #26
 800746a:	d42b      	bmi.n	80074c4 <_printf_common+0xb0>
 800746c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007470:	4641      	mov	r1, r8
 8007472:	4638      	mov	r0, r7
 8007474:	47c8      	blx	r9
 8007476:	3001      	adds	r0, #1
 8007478:	d01e      	beq.n	80074b8 <_printf_common+0xa4>
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	6922      	ldr	r2, [r4, #16]
 800747e:	f003 0306 	and.w	r3, r3, #6
 8007482:	2b04      	cmp	r3, #4
 8007484:	bf02      	ittt	eq
 8007486:	68e5      	ldreq	r5, [r4, #12]
 8007488:	6833      	ldreq	r3, [r6, #0]
 800748a:	1aed      	subeq	r5, r5, r3
 800748c:	68a3      	ldr	r3, [r4, #8]
 800748e:	bf0c      	ite	eq
 8007490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007494:	2500      	movne	r5, #0
 8007496:	4293      	cmp	r3, r2
 8007498:	bfc4      	itt	gt
 800749a:	1a9b      	subgt	r3, r3, r2
 800749c:	18ed      	addgt	r5, r5, r3
 800749e:	2600      	movs	r6, #0
 80074a0:	341a      	adds	r4, #26
 80074a2:	42b5      	cmp	r5, r6
 80074a4:	d11a      	bne.n	80074dc <_printf_common+0xc8>
 80074a6:	2000      	movs	r0, #0
 80074a8:	e008      	b.n	80074bc <_printf_common+0xa8>
 80074aa:	2301      	movs	r3, #1
 80074ac:	4652      	mov	r2, sl
 80074ae:	4641      	mov	r1, r8
 80074b0:	4638      	mov	r0, r7
 80074b2:	47c8      	blx	r9
 80074b4:	3001      	adds	r0, #1
 80074b6:	d103      	bne.n	80074c0 <_printf_common+0xac>
 80074b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c0:	3501      	adds	r5, #1
 80074c2:	e7c6      	b.n	8007452 <_printf_common+0x3e>
 80074c4:	18e1      	adds	r1, r4, r3
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	2030      	movs	r0, #48	@ 0x30
 80074ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074ce:	4422      	add	r2, r4
 80074d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074d8:	3302      	adds	r3, #2
 80074da:	e7c7      	b.n	800746c <_printf_common+0x58>
 80074dc:	2301      	movs	r3, #1
 80074de:	4622      	mov	r2, r4
 80074e0:	4641      	mov	r1, r8
 80074e2:	4638      	mov	r0, r7
 80074e4:	47c8      	blx	r9
 80074e6:	3001      	adds	r0, #1
 80074e8:	d0e6      	beq.n	80074b8 <_printf_common+0xa4>
 80074ea:	3601      	adds	r6, #1
 80074ec:	e7d9      	b.n	80074a2 <_printf_common+0x8e>
	...

080074f0 <_printf_i>:
 80074f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074f4:	7e0f      	ldrb	r7, [r1, #24]
 80074f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074f8:	2f78      	cmp	r7, #120	@ 0x78
 80074fa:	4691      	mov	r9, r2
 80074fc:	4680      	mov	r8, r0
 80074fe:	460c      	mov	r4, r1
 8007500:	469a      	mov	sl, r3
 8007502:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007506:	d807      	bhi.n	8007518 <_printf_i+0x28>
 8007508:	2f62      	cmp	r7, #98	@ 0x62
 800750a:	d80a      	bhi.n	8007522 <_printf_i+0x32>
 800750c:	2f00      	cmp	r7, #0
 800750e:	f000 80d2 	beq.w	80076b6 <_printf_i+0x1c6>
 8007512:	2f58      	cmp	r7, #88	@ 0x58
 8007514:	f000 80b9 	beq.w	800768a <_printf_i+0x19a>
 8007518:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800751c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007520:	e03a      	b.n	8007598 <_printf_i+0xa8>
 8007522:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007526:	2b15      	cmp	r3, #21
 8007528:	d8f6      	bhi.n	8007518 <_printf_i+0x28>
 800752a:	a101      	add	r1, pc, #4	@ (adr r1, 8007530 <_printf_i+0x40>)
 800752c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007530:	08007589 	.word	0x08007589
 8007534:	0800759d 	.word	0x0800759d
 8007538:	08007519 	.word	0x08007519
 800753c:	08007519 	.word	0x08007519
 8007540:	08007519 	.word	0x08007519
 8007544:	08007519 	.word	0x08007519
 8007548:	0800759d 	.word	0x0800759d
 800754c:	08007519 	.word	0x08007519
 8007550:	08007519 	.word	0x08007519
 8007554:	08007519 	.word	0x08007519
 8007558:	08007519 	.word	0x08007519
 800755c:	0800769d 	.word	0x0800769d
 8007560:	080075c7 	.word	0x080075c7
 8007564:	08007657 	.word	0x08007657
 8007568:	08007519 	.word	0x08007519
 800756c:	08007519 	.word	0x08007519
 8007570:	080076bf 	.word	0x080076bf
 8007574:	08007519 	.word	0x08007519
 8007578:	080075c7 	.word	0x080075c7
 800757c:	08007519 	.word	0x08007519
 8007580:	08007519 	.word	0x08007519
 8007584:	0800765f 	.word	0x0800765f
 8007588:	6833      	ldr	r3, [r6, #0]
 800758a:	1d1a      	adds	r2, r3, #4
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6032      	str	r2, [r6, #0]
 8007590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007594:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007598:	2301      	movs	r3, #1
 800759a:	e09d      	b.n	80076d8 <_printf_i+0x1e8>
 800759c:	6833      	ldr	r3, [r6, #0]
 800759e:	6820      	ldr	r0, [r4, #0]
 80075a0:	1d19      	adds	r1, r3, #4
 80075a2:	6031      	str	r1, [r6, #0]
 80075a4:	0606      	lsls	r6, r0, #24
 80075a6:	d501      	bpl.n	80075ac <_printf_i+0xbc>
 80075a8:	681d      	ldr	r5, [r3, #0]
 80075aa:	e003      	b.n	80075b4 <_printf_i+0xc4>
 80075ac:	0645      	lsls	r5, r0, #25
 80075ae:	d5fb      	bpl.n	80075a8 <_printf_i+0xb8>
 80075b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075b4:	2d00      	cmp	r5, #0
 80075b6:	da03      	bge.n	80075c0 <_printf_i+0xd0>
 80075b8:	232d      	movs	r3, #45	@ 0x2d
 80075ba:	426d      	negs	r5, r5
 80075bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075c0:	4859      	ldr	r0, [pc, #356]	@ (8007728 <_printf_i+0x238>)
 80075c2:	230a      	movs	r3, #10
 80075c4:	e011      	b.n	80075ea <_printf_i+0xfa>
 80075c6:	6821      	ldr	r1, [r4, #0]
 80075c8:	6833      	ldr	r3, [r6, #0]
 80075ca:	0608      	lsls	r0, r1, #24
 80075cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80075d0:	d402      	bmi.n	80075d8 <_printf_i+0xe8>
 80075d2:	0649      	lsls	r1, r1, #25
 80075d4:	bf48      	it	mi
 80075d6:	b2ad      	uxthmi	r5, r5
 80075d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80075da:	4853      	ldr	r0, [pc, #332]	@ (8007728 <_printf_i+0x238>)
 80075dc:	6033      	str	r3, [r6, #0]
 80075de:	bf14      	ite	ne
 80075e0:	230a      	movne	r3, #10
 80075e2:	2308      	moveq	r3, #8
 80075e4:	2100      	movs	r1, #0
 80075e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075ea:	6866      	ldr	r6, [r4, #4]
 80075ec:	60a6      	str	r6, [r4, #8]
 80075ee:	2e00      	cmp	r6, #0
 80075f0:	bfa2      	ittt	ge
 80075f2:	6821      	ldrge	r1, [r4, #0]
 80075f4:	f021 0104 	bicge.w	r1, r1, #4
 80075f8:	6021      	strge	r1, [r4, #0]
 80075fa:	b90d      	cbnz	r5, 8007600 <_printf_i+0x110>
 80075fc:	2e00      	cmp	r6, #0
 80075fe:	d04b      	beq.n	8007698 <_printf_i+0x1a8>
 8007600:	4616      	mov	r6, r2
 8007602:	fbb5 f1f3 	udiv	r1, r5, r3
 8007606:	fb03 5711 	mls	r7, r3, r1, r5
 800760a:	5dc7      	ldrb	r7, [r0, r7]
 800760c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007610:	462f      	mov	r7, r5
 8007612:	42bb      	cmp	r3, r7
 8007614:	460d      	mov	r5, r1
 8007616:	d9f4      	bls.n	8007602 <_printf_i+0x112>
 8007618:	2b08      	cmp	r3, #8
 800761a:	d10b      	bne.n	8007634 <_printf_i+0x144>
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	07df      	lsls	r7, r3, #31
 8007620:	d508      	bpl.n	8007634 <_printf_i+0x144>
 8007622:	6923      	ldr	r3, [r4, #16]
 8007624:	6861      	ldr	r1, [r4, #4]
 8007626:	4299      	cmp	r1, r3
 8007628:	bfde      	ittt	le
 800762a:	2330      	movle	r3, #48	@ 0x30
 800762c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007630:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007634:	1b92      	subs	r2, r2, r6
 8007636:	6122      	str	r2, [r4, #16]
 8007638:	f8cd a000 	str.w	sl, [sp]
 800763c:	464b      	mov	r3, r9
 800763e:	aa03      	add	r2, sp, #12
 8007640:	4621      	mov	r1, r4
 8007642:	4640      	mov	r0, r8
 8007644:	f7ff fee6 	bl	8007414 <_printf_common>
 8007648:	3001      	adds	r0, #1
 800764a:	d14a      	bne.n	80076e2 <_printf_i+0x1f2>
 800764c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007650:	b004      	add	sp, #16
 8007652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	f043 0320 	orr.w	r3, r3, #32
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	4833      	ldr	r0, [pc, #204]	@ (800772c <_printf_i+0x23c>)
 8007660:	2778      	movs	r7, #120	@ 0x78
 8007662:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	6831      	ldr	r1, [r6, #0]
 800766a:	061f      	lsls	r7, r3, #24
 800766c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007670:	d402      	bmi.n	8007678 <_printf_i+0x188>
 8007672:	065f      	lsls	r7, r3, #25
 8007674:	bf48      	it	mi
 8007676:	b2ad      	uxthmi	r5, r5
 8007678:	6031      	str	r1, [r6, #0]
 800767a:	07d9      	lsls	r1, r3, #31
 800767c:	bf44      	itt	mi
 800767e:	f043 0320 	orrmi.w	r3, r3, #32
 8007682:	6023      	strmi	r3, [r4, #0]
 8007684:	b11d      	cbz	r5, 800768e <_printf_i+0x19e>
 8007686:	2310      	movs	r3, #16
 8007688:	e7ac      	b.n	80075e4 <_printf_i+0xf4>
 800768a:	4827      	ldr	r0, [pc, #156]	@ (8007728 <_printf_i+0x238>)
 800768c:	e7e9      	b.n	8007662 <_printf_i+0x172>
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	f023 0320 	bic.w	r3, r3, #32
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	e7f6      	b.n	8007686 <_printf_i+0x196>
 8007698:	4616      	mov	r6, r2
 800769a:	e7bd      	b.n	8007618 <_printf_i+0x128>
 800769c:	6833      	ldr	r3, [r6, #0]
 800769e:	6825      	ldr	r5, [r4, #0]
 80076a0:	6961      	ldr	r1, [r4, #20]
 80076a2:	1d18      	adds	r0, r3, #4
 80076a4:	6030      	str	r0, [r6, #0]
 80076a6:	062e      	lsls	r6, r5, #24
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	d501      	bpl.n	80076b0 <_printf_i+0x1c0>
 80076ac:	6019      	str	r1, [r3, #0]
 80076ae:	e002      	b.n	80076b6 <_printf_i+0x1c6>
 80076b0:	0668      	lsls	r0, r5, #25
 80076b2:	d5fb      	bpl.n	80076ac <_printf_i+0x1bc>
 80076b4:	8019      	strh	r1, [r3, #0]
 80076b6:	2300      	movs	r3, #0
 80076b8:	6123      	str	r3, [r4, #16]
 80076ba:	4616      	mov	r6, r2
 80076bc:	e7bc      	b.n	8007638 <_printf_i+0x148>
 80076be:	6833      	ldr	r3, [r6, #0]
 80076c0:	1d1a      	adds	r2, r3, #4
 80076c2:	6032      	str	r2, [r6, #0]
 80076c4:	681e      	ldr	r6, [r3, #0]
 80076c6:	6862      	ldr	r2, [r4, #4]
 80076c8:	2100      	movs	r1, #0
 80076ca:	4630      	mov	r0, r6
 80076cc:	f7f8 fda8 	bl	8000220 <memchr>
 80076d0:	b108      	cbz	r0, 80076d6 <_printf_i+0x1e6>
 80076d2:	1b80      	subs	r0, r0, r6
 80076d4:	6060      	str	r0, [r4, #4]
 80076d6:	6863      	ldr	r3, [r4, #4]
 80076d8:	6123      	str	r3, [r4, #16]
 80076da:	2300      	movs	r3, #0
 80076dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076e0:	e7aa      	b.n	8007638 <_printf_i+0x148>
 80076e2:	6923      	ldr	r3, [r4, #16]
 80076e4:	4632      	mov	r2, r6
 80076e6:	4649      	mov	r1, r9
 80076e8:	4640      	mov	r0, r8
 80076ea:	47d0      	blx	sl
 80076ec:	3001      	adds	r0, #1
 80076ee:	d0ad      	beq.n	800764c <_printf_i+0x15c>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	079b      	lsls	r3, r3, #30
 80076f4:	d413      	bmi.n	800771e <_printf_i+0x22e>
 80076f6:	68e0      	ldr	r0, [r4, #12]
 80076f8:	9b03      	ldr	r3, [sp, #12]
 80076fa:	4298      	cmp	r0, r3
 80076fc:	bfb8      	it	lt
 80076fe:	4618      	movlt	r0, r3
 8007700:	e7a6      	b.n	8007650 <_printf_i+0x160>
 8007702:	2301      	movs	r3, #1
 8007704:	4632      	mov	r2, r6
 8007706:	4649      	mov	r1, r9
 8007708:	4640      	mov	r0, r8
 800770a:	47d0      	blx	sl
 800770c:	3001      	adds	r0, #1
 800770e:	d09d      	beq.n	800764c <_printf_i+0x15c>
 8007710:	3501      	adds	r5, #1
 8007712:	68e3      	ldr	r3, [r4, #12]
 8007714:	9903      	ldr	r1, [sp, #12]
 8007716:	1a5b      	subs	r3, r3, r1
 8007718:	42ab      	cmp	r3, r5
 800771a:	dcf2      	bgt.n	8007702 <_printf_i+0x212>
 800771c:	e7eb      	b.n	80076f6 <_printf_i+0x206>
 800771e:	2500      	movs	r5, #0
 8007720:	f104 0619 	add.w	r6, r4, #25
 8007724:	e7f5      	b.n	8007712 <_printf_i+0x222>
 8007726:	bf00      	nop
 8007728:	08007b09 	.word	0x08007b09
 800772c:	08007b1a 	.word	0x08007b1a

08007730 <__sflush_r>:
 8007730:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007738:	0716      	lsls	r6, r2, #28
 800773a:	4605      	mov	r5, r0
 800773c:	460c      	mov	r4, r1
 800773e:	d454      	bmi.n	80077ea <__sflush_r+0xba>
 8007740:	684b      	ldr	r3, [r1, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	dc02      	bgt.n	800774c <__sflush_r+0x1c>
 8007746:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007748:	2b00      	cmp	r3, #0
 800774a:	dd48      	ble.n	80077de <__sflush_r+0xae>
 800774c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800774e:	2e00      	cmp	r6, #0
 8007750:	d045      	beq.n	80077de <__sflush_r+0xae>
 8007752:	2300      	movs	r3, #0
 8007754:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007758:	682f      	ldr	r7, [r5, #0]
 800775a:	6a21      	ldr	r1, [r4, #32]
 800775c:	602b      	str	r3, [r5, #0]
 800775e:	d030      	beq.n	80077c2 <__sflush_r+0x92>
 8007760:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007762:	89a3      	ldrh	r3, [r4, #12]
 8007764:	0759      	lsls	r1, r3, #29
 8007766:	d505      	bpl.n	8007774 <__sflush_r+0x44>
 8007768:	6863      	ldr	r3, [r4, #4]
 800776a:	1ad2      	subs	r2, r2, r3
 800776c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800776e:	b10b      	cbz	r3, 8007774 <__sflush_r+0x44>
 8007770:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007772:	1ad2      	subs	r2, r2, r3
 8007774:	2300      	movs	r3, #0
 8007776:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007778:	6a21      	ldr	r1, [r4, #32]
 800777a:	4628      	mov	r0, r5
 800777c:	47b0      	blx	r6
 800777e:	1c43      	adds	r3, r0, #1
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	d106      	bne.n	8007792 <__sflush_r+0x62>
 8007784:	6829      	ldr	r1, [r5, #0]
 8007786:	291d      	cmp	r1, #29
 8007788:	d82b      	bhi.n	80077e2 <__sflush_r+0xb2>
 800778a:	4a2a      	ldr	r2, [pc, #168]	@ (8007834 <__sflush_r+0x104>)
 800778c:	410a      	asrs	r2, r1
 800778e:	07d6      	lsls	r6, r2, #31
 8007790:	d427      	bmi.n	80077e2 <__sflush_r+0xb2>
 8007792:	2200      	movs	r2, #0
 8007794:	6062      	str	r2, [r4, #4]
 8007796:	04d9      	lsls	r1, r3, #19
 8007798:	6922      	ldr	r2, [r4, #16]
 800779a:	6022      	str	r2, [r4, #0]
 800779c:	d504      	bpl.n	80077a8 <__sflush_r+0x78>
 800779e:	1c42      	adds	r2, r0, #1
 80077a0:	d101      	bne.n	80077a6 <__sflush_r+0x76>
 80077a2:	682b      	ldr	r3, [r5, #0]
 80077a4:	b903      	cbnz	r3, 80077a8 <__sflush_r+0x78>
 80077a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80077a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077aa:	602f      	str	r7, [r5, #0]
 80077ac:	b1b9      	cbz	r1, 80077de <__sflush_r+0xae>
 80077ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077b2:	4299      	cmp	r1, r3
 80077b4:	d002      	beq.n	80077bc <__sflush_r+0x8c>
 80077b6:	4628      	mov	r0, r5
 80077b8:	f7ff fbf2 	bl	8006fa0 <_free_r>
 80077bc:	2300      	movs	r3, #0
 80077be:	6363      	str	r3, [r4, #52]	@ 0x34
 80077c0:	e00d      	b.n	80077de <__sflush_r+0xae>
 80077c2:	2301      	movs	r3, #1
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b0      	blx	r6
 80077c8:	4602      	mov	r2, r0
 80077ca:	1c50      	adds	r0, r2, #1
 80077cc:	d1c9      	bne.n	8007762 <__sflush_r+0x32>
 80077ce:	682b      	ldr	r3, [r5, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d0c6      	beq.n	8007762 <__sflush_r+0x32>
 80077d4:	2b1d      	cmp	r3, #29
 80077d6:	d001      	beq.n	80077dc <__sflush_r+0xac>
 80077d8:	2b16      	cmp	r3, #22
 80077da:	d11e      	bne.n	800781a <__sflush_r+0xea>
 80077dc:	602f      	str	r7, [r5, #0]
 80077de:	2000      	movs	r0, #0
 80077e0:	e022      	b.n	8007828 <__sflush_r+0xf8>
 80077e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077e6:	b21b      	sxth	r3, r3
 80077e8:	e01b      	b.n	8007822 <__sflush_r+0xf2>
 80077ea:	690f      	ldr	r7, [r1, #16]
 80077ec:	2f00      	cmp	r7, #0
 80077ee:	d0f6      	beq.n	80077de <__sflush_r+0xae>
 80077f0:	0793      	lsls	r3, r2, #30
 80077f2:	680e      	ldr	r6, [r1, #0]
 80077f4:	bf08      	it	eq
 80077f6:	694b      	ldreq	r3, [r1, #20]
 80077f8:	600f      	str	r7, [r1, #0]
 80077fa:	bf18      	it	ne
 80077fc:	2300      	movne	r3, #0
 80077fe:	eba6 0807 	sub.w	r8, r6, r7
 8007802:	608b      	str	r3, [r1, #8]
 8007804:	f1b8 0f00 	cmp.w	r8, #0
 8007808:	dde9      	ble.n	80077de <__sflush_r+0xae>
 800780a:	6a21      	ldr	r1, [r4, #32]
 800780c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800780e:	4643      	mov	r3, r8
 8007810:	463a      	mov	r2, r7
 8007812:	4628      	mov	r0, r5
 8007814:	47b0      	blx	r6
 8007816:	2800      	cmp	r0, #0
 8007818:	dc08      	bgt.n	800782c <__sflush_r+0xfc>
 800781a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800781e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007822:	81a3      	strh	r3, [r4, #12]
 8007824:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800782c:	4407      	add	r7, r0
 800782e:	eba8 0800 	sub.w	r8, r8, r0
 8007832:	e7e7      	b.n	8007804 <__sflush_r+0xd4>
 8007834:	dfbffffe 	.word	0xdfbffffe

08007838 <_fflush_r>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	690b      	ldr	r3, [r1, #16]
 800783c:	4605      	mov	r5, r0
 800783e:	460c      	mov	r4, r1
 8007840:	b913      	cbnz	r3, 8007848 <_fflush_r+0x10>
 8007842:	2500      	movs	r5, #0
 8007844:	4628      	mov	r0, r5
 8007846:	bd38      	pop	{r3, r4, r5, pc}
 8007848:	b118      	cbz	r0, 8007852 <_fflush_r+0x1a>
 800784a:	6a03      	ldr	r3, [r0, #32]
 800784c:	b90b      	cbnz	r3, 8007852 <_fflush_r+0x1a>
 800784e:	f7ff f99f 	bl	8006b90 <__sinit>
 8007852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d0f3      	beq.n	8007842 <_fflush_r+0xa>
 800785a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800785c:	07d0      	lsls	r0, r2, #31
 800785e:	d404      	bmi.n	800786a <_fflush_r+0x32>
 8007860:	0599      	lsls	r1, r3, #22
 8007862:	d402      	bmi.n	800786a <_fflush_r+0x32>
 8007864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007866:	f7ff fb8a 	bl	8006f7e <__retarget_lock_acquire_recursive>
 800786a:	4628      	mov	r0, r5
 800786c:	4621      	mov	r1, r4
 800786e:	f7ff ff5f 	bl	8007730 <__sflush_r>
 8007872:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007874:	07da      	lsls	r2, r3, #31
 8007876:	4605      	mov	r5, r0
 8007878:	d4e4      	bmi.n	8007844 <_fflush_r+0xc>
 800787a:	89a3      	ldrh	r3, [r4, #12]
 800787c:	059b      	lsls	r3, r3, #22
 800787e:	d4e1      	bmi.n	8007844 <_fflush_r+0xc>
 8007880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007882:	f7ff fb7d 	bl	8006f80 <__retarget_lock_release_recursive>
 8007886:	e7dd      	b.n	8007844 <_fflush_r+0xc>

08007888 <__swhatbuf_r>:
 8007888:	b570      	push	{r4, r5, r6, lr}
 800788a:	460c      	mov	r4, r1
 800788c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007890:	2900      	cmp	r1, #0
 8007892:	b096      	sub	sp, #88	@ 0x58
 8007894:	4615      	mov	r5, r2
 8007896:	461e      	mov	r6, r3
 8007898:	da0d      	bge.n	80078b6 <__swhatbuf_r+0x2e>
 800789a:	89a3      	ldrh	r3, [r4, #12]
 800789c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80078a0:	f04f 0100 	mov.w	r1, #0
 80078a4:	bf14      	ite	ne
 80078a6:	2340      	movne	r3, #64	@ 0x40
 80078a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80078ac:	2000      	movs	r0, #0
 80078ae:	6031      	str	r1, [r6, #0]
 80078b0:	602b      	str	r3, [r5, #0]
 80078b2:	b016      	add	sp, #88	@ 0x58
 80078b4:	bd70      	pop	{r4, r5, r6, pc}
 80078b6:	466a      	mov	r2, sp
 80078b8:	f000 f848 	bl	800794c <_fstat_r>
 80078bc:	2800      	cmp	r0, #0
 80078be:	dbec      	blt.n	800789a <__swhatbuf_r+0x12>
 80078c0:	9901      	ldr	r1, [sp, #4]
 80078c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80078c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80078ca:	4259      	negs	r1, r3
 80078cc:	4159      	adcs	r1, r3
 80078ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078d2:	e7eb      	b.n	80078ac <__swhatbuf_r+0x24>

080078d4 <__smakebuf_r>:
 80078d4:	898b      	ldrh	r3, [r1, #12]
 80078d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078d8:	079d      	lsls	r5, r3, #30
 80078da:	4606      	mov	r6, r0
 80078dc:	460c      	mov	r4, r1
 80078de:	d507      	bpl.n	80078f0 <__smakebuf_r+0x1c>
 80078e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	6123      	str	r3, [r4, #16]
 80078e8:	2301      	movs	r3, #1
 80078ea:	6163      	str	r3, [r4, #20]
 80078ec:	b003      	add	sp, #12
 80078ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078f0:	ab01      	add	r3, sp, #4
 80078f2:	466a      	mov	r2, sp
 80078f4:	f7ff ffc8 	bl	8007888 <__swhatbuf_r>
 80078f8:	9f00      	ldr	r7, [sp, #0]
 80078fa:	4605      	mov	r5, r0
 80078fc:	4639      	mov	r1, r7
 80078fe:	4630      	mov	r0, r6
 8007900:	f7ff fbba 	bl	8007078 <_malloc_r>
 8007904:	b948      	cbnz	r0, 800791a <__smakebuf_r+0x46>
 8007906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800790a:	059a      	lsls	r2, r3, #22
 800790c:	d4ee      	bmi.n	80078ec <__smakebuf_r+0x18>
 800790e:	f023 0303 	bic.w	r3, r3, #3
 8007912:	f043 0302 	orr.w	r3, r3, #2
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	e7e2      	b.n	80078e0 <__smakebuf_r+0xc>
 800791a:	89a3      	ldrh	r3, [r4, #12]
 800791c:	6020      	str	r0, [r4, #0]
 800791e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007922:	81a3      	strh	r3, [r4, #12]
 8007924:	9b01      	ldr	r3, [sp, #4]
 8007926:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800792a:	b15b      	cbz	r3, 8007944 <__smakebuf_r+0x70>
 800792c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007930:	4630      	mov	r0, r6
 8007932:	f000 f81d 	bl	8007970 <_isatty_r>
 8007936:	b128      	cbz	r0, 8007944 <__smakebuf_r+0x70>
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	f023 0303 	bic.w	r3, r3, #3
 800793e:	f043 0301 	orr.w	r3, r3, #1
 8007942:	81a3      	strh	r3, [r4, #12]
 8007944:	89a3      	ldrh	r3, [r4, #12]
 8007946:	431d      	orrs	r5, r3
 8007948:	81a5      	strh	r5, [r4, #12]
 800794a:	e7cf      	b.n	80078ec <__smakebuf_r+0x18>

0800794c <_fstat_r>:
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4d07      	ldr	r5, [pc, #28]	@ (800796c <_fstat_r+0x20>)
 8007950:	2300      	movs	r3, #0
 8007952:	4604      	mov	r4, r0
 8007954:	4608      	mov	r0, r1
 8007956:	4611      	mov	r1, r2
 8007958:	602b      	str	r3, [r5, #0]
 800795a:	f7f9 fa08 	bl	8000d6e <_fstat>
 800795e:	1c43      	adds	r3, r0, #1
 8007960:	d102      	bne.n	8007968 <_fstat_r+0x1c>
 8007962:	682b      	ldr	r3, [r5, #0]
 8007964:	b103      	cbz	r3, 8007968 <_fstat_r+0x1c>
 8007966:	6023      	str	r3, [r4, #0]
 8007968:	bd38      	pop	{r3, r4, r5, pc}
 800796a:	bf00      	nop
 800796c:	20001c68 	.word	0x20001c68

08007970 <_isatty_r>:
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	4d06      	ldr	r5, [pc, #24]	@ (800798c <_isatty_r+0x1c>)
 8007974:	2300      	movs	r3, #0
 8007976:	4604      	mov	r4, r0
 8007978:	4608      	mov	r0, r1
 800797a:	602b      	str	r3, [r5, #0]
 800797c:	f7f9 fa07 	bl	8000d8e <_isatty>
 8007980:	1c43      	adds	r3, r0, #1
 8007982:	d102      	bne.n	800798a <_isatty_r+0x1a>
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	b103      	cbz	r3, 800798a <_isatty_r+0x1a>
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	bd38      	pop	{r3, r4, r5, pc}
 800798c:	20001c68 	.word	0x20001c68

08007990 <_sbrk_r>:
 8007990:	b538      	push	{r3, r4, r5, lr}
 8007992:	4d06      	ldr	r5, [pc, #24]	@ (80079ac <_sbrk_r+0x1c>)
 8007994:	2300      	movs	r3, #0
 8007996:	4604      	mov	r4, r0
 8007998:	4608      	mov	r0, r1
 800799a:	602b      	str	r3, [r5, #0]
 800799c:	f7f9 fa10 	bl	8000dc0 <_sbrk>
 80079a0:	1c43      	adds	r3, r0, #1
 80079a2:	d102      	bne.n	80079aa <_sbrk_r+0x1a>
 80079a4:	682b      	ldr	r3, [r5, #0]
 80079a6:	b103      	cbz	r3, 80079aa <_sbrk_r+0x1a>
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	bd38      	pop	{r3, r4, r5, pc}
 80079ac:	20001c68 	.word	0x20001c68

080079b0 <_init>:
 80079b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b2:	bf00      	nop
 80079b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079b6:	bc08      	pop	{r3}
 80079b8:	469e      	mov	lr, r3
 80079ba:	4770      	bx	lr

080079bc <_fini>:
 80079bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079be:	bf00      	nop
 80079c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c2:	bc08      	pop	{r3}
 80079c4:	469e      	mov	lr, r3
 80079c6:	4770      	bx	lr
