
TP_Noyau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066b4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08006894  08006894  00007894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069e0  080069e0  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  080069e0  080069e0  000079e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069e8  080069e8  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069e8  080069e8  000079e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069ec  080069ec  000079ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080069f0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b68  2000006c  08006a5c  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bd4  08006a5c  00008bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016742  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000360f  00000000  00000000  0001e7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00021df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e35  00000000  00000000  00023090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202f8  00000000  00000000  00023ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015249  00000000  00000000  000441bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2b29  00000000  00000000  00059406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011bf2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051e8  00000000  00000000  0011bf74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0012115c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800687c 	.word	0x0800687c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	0800687c 	.word	0x0800687c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000514:	4a04      	ldr	r2, [pc, #16]	@ (8000528 <MX_FREERTOS_Init+0x18>)
 8000516:	2100      	movs	r1, #0
 8000518:	4804      	ldr	r0, [pc, #16]	@ (800052c <MX_FREERTOS_Init+0x1c>)
 800051a:	f002 fd5d 	bl	8002fd8 <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a03      	ldr	r2, [pc, #12]	@ (8000530 <MX_FREERTOS_Init+0x20>)
 8000522:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	0800697c 	.word	0x0800697c
 800052c:	08000535 	.word	0x08000535
 8000530:	20000088 	.word	0x20000088

08000534 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800053c:	2001      	movs	r0, #1
 800053e:	f002 fddd 	bl	80030fc <osDelay>
 8000542:	e7fb      	b.n	800053c <StartDefaultTask+0x8>

08000544 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000558:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <MX_GPIO_Init+0x5c>)
 800055a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055c:	4a10      	ldr	r2, [pc, #64]	@ (80005a0 <MX_GPIO_Init+0x5c>)
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000564:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <MX_GPIO_Init+0x5c>)
 8000566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	603b      	str	r3, [r7, #0]
 800056e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2120      	movs	r1, #32
 8000574:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000578:	f000 fde0 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800057c:	2320      	movs	r3, #32
 800057e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000580:	2301      	movs	r3, #1
 8000582:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	4619      	mov	r1, r3
 8000590:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000594:	f000 fc38 	bl	8000e08 <HAL_GPIO_Init>

}
 8000598:	bf00      	nop
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000

080005a4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005ac:	1d39      	adds	r1, r7, #4
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005b2:	2201      	movs	r2, #1
 80005b4:	4803      	ldr	r0, [pc, #12]	@ (80005c4 <__io_putchar+0x20>)
 80005b6:	f001 fe15 	bl	80021e4 <HAL_UART_Transmit>
	return ch;
 80005ba:	687b      	ldr	r3, [r7, #4]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200000a0 	.word	0x200000a0

080005c8 <LED_Task>:

void LED_Task()
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005cc:	2120      	movs	r1, #32
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d2:	f000 fdcb 	bl	800116c <HAL_GPIO_TogglePin>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET)
 80005d6:	2120      	movs	r1, #32
 80005d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005dc:	f000 fd96 	bl	800110c <HAL_GPIO_ReadPin>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d103      	bne.n	80005ee <LED_Task+0x26>
		{
			printf("LED ON\r\n");
 80005e6:	4805      	ldr	r0, [pc, #20]	@ (80005fc <LED_Task+0x34>)
 80005e8:	f005 fda6 	bl	8006138 <puts>
 80005ec:	e002      	b.n	80005f4 <LED_Task+0x2c>
		}
		else
		{
			printf("LED OFF\r\n");
 80005ee:	4804      	ldr	r0, [pc, #16]	@ (8000600 <LED_Task+0x38>)
 80005f0:	f005 fda2 	bl	8006138 <puts>
		}
		vTaskDelay(100/portTICK_PERIOD_MS); // portTICK_PERIOD_MS pour convertir les ticks en ms
 80005f4:	2064      	movs	r0, #100	@ 0x64
 80005f6:	f003 fe89 	bl	800430c <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80005fa:	e7e7      	b.n	80005cc <LED_Task+0x4>
 80005fc:	080068a0 	.word	0x080068a0
 8000600:	080068a8 	.word	0x080068a8

08000604 <give_Task>:
	}
}

void give_Task()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Task_give va donner le sem\r\n");
 8000608:	4808      	ldr	r0, [pc, #32]	@ (800062c <give_Task+0x28>)
 800060a:	f005 fd95 	bl	8006138 <puts>
		xSemaphoreGive(sem);
 800060e:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <give_Task+0x2c>)
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	2200      	movs	r2, #0
 8000616:	2100      	movs	r1, #0
 8000618:	f002 ffba 	bl	8003590 <xQueueGenericSend>
		printf("Task_give a donné le sem\r\n");
 800061c:	4805      	ldr	r0, [pc, #20]	@ (8000634 <give_Task+0x30>)
 800061e:	f005 fd8b 	bl	8006138 <puts>
		vTaskDelay(100/portTICK_PERIOD_MS);
 8000622:	2064      	movs	r0, #100	@ 0x64
 8000624:	f003 fe72 	bl	800430c <vTaskDelay>
		printf("Task_give va donner le sem\r\n");
 8000628:	bf00      	nop
 800062a:	e7ed      	b.n	8000608 <give_Task+0x4>
 800062c:	080068b4 	.word	0x080068b4
 8000630:	20000098 	.word	0x20000098
 8000634:	080068d0 	.word	0x080068d0

08000638 <take_Task>:
	}

}

void take_Task()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Task_give va prendre le sem\r\n");
 800063c:	4808      	ldr	r0, [pc, #32]	@ (8000660 <take_Task+0x28>)
 800063e:	f005 fd7b 	bl	8006138 <puts>
		xSemaphoreTake(sem, portMAX_DELAY);
 8000642:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <take_Task+0x2c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800064a:	4618      	mov	r0, r3
 800064c:	f003 fa22 	bl	8003a94 <xQueueSemaphoreTake>
		printf("Task_give a pris le sem\r\n");
 8000650:	4805      	ldr	r0, [pc, #20]	@ (8000668 <take_Task+0x30>)
 8000652:	f005 fd71 	bl	8006138 <puts>
		vTaskDelay(100/portTICK_PERIOD_MS);
 8000656:	2064      	movs	r0, #100	@ 0x64
 8000658:	f003 fe58 	bl	800430c <vTaskDelay>
		printf("Task_give va prendre le sem\r\n");
 800065c:	bf00      	nop
 800065e:	e7ed      	b.n	800063c <take_Task+0x4>
 8000660:	080068ec 	.word	0x080068ec
 8000664:	20000098 	.word	0x20000098
 8000668:	0800690c 	.word	0x0800690c

0800066c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000672:	f000 fa74 	bl	8000b5e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000676:	f000 f84b 	bl	8000710 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800067a:	f7ff ff63 	bl	8000544 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800067e:	f000 f9a1 	bl	80009c4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	printf("==== TD Noyau ==== \r\n");
 8000682:	4818      	ldr	r0, [pc, #96]	@ (80006e4 <main+0x78>)
 8000684:	f005 fd58 	bl	8006138 <puts>

	sem = xSemaphoreCreateBinary();
 8000688:	2203      	movs	r2, #3
 800068a:	2100      	movs	r1, #0
 800068c:	2001      	movs	r0, #1
 800068e:	f002 ff20 	bl	80034d2 <xQueueGenericCreate>
 8000692:	4603      	mov	r3, r0
 8000694:	4a14      	ldr	r2, [pc, #80]	@ (80006e8 <main+0x7c>)
 8000696:	6013      	str	r3, [r2, #0]

	xTaskCreate(give_Task, "GiveTask", 128, NULL, 1, &Give_TaskHandle);
 8000698:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <main+0x80>)
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	2301      	movs	r3, #1
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2300      	movs	r3, #0
 80006a2:	2280      	movs	r2, #128	@ 0x80
 80006a4:	4912      	ldr	r1, [pc, #72]	@ (80006f0 <main+0x84>)
 80006a6:	4813      	ldr	r0, [pc, #76]	@ (80006f4 <main+0x88>)
 80006a8:	f003 fcea 	bl	8004080 <xTaskCreate>
	xTaskCreate(take_Task, "TakeTask", 128, NULL, 2, &Take_TaskHandle);
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <main+0x8c>)
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	2302      	movs	r3, #2
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	2300      	movs	r3, #0
 80006b6:	2280      	movs	r2, #128	@ 0x80
 80006b8:	4910      	ldr	r1, [pc, #64]	@ (80006fc <main+0x90>)
 80006ba:	4811      	ldr	r0, [pc, #68]	@ (8000700 <main+0x94>)
 80006bc:	f003 fce0 	bl	8004080 <xTaskCreate>
	xTaskCreate(LED_Task, "LED_Task", 128, NULL, 3, &LED_TaskHandle);
 80006c0:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <main+0x98>)
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	2303      	movs	r3, #3
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2300      	movs	r3, #0
 80006ca:	2280      	movs	r2, #128	@ 0x80
 80006cc:	490e      	ldr	r1, [pc, #56]	@ (8000708 <main+0x9c>)
 80006ce:	480f      	ldr	r0, [pc, #60]	@ (800070c <main+0xa0>)
 80006d0:	f003 fcd6 	bl	8004080 <xTaskCreate>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80006d4:	f002 fc36 	bl	8002f44 <osKernelInitialize>

	/* Call init function for freertos objects (in cmsis_os2.c) */
	MX_FREERTOS_Init();
 80006d8:	f7ff ff1a 	bl	8000510 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 80006dc:	f002 fc56 	bl	8002f8c <osKernelStart>



	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <main+0x74>
 80006e4:	08006928 	.word	0x08006928
 80006e8:	20000098 	.word	0x20000098
 80006ec:	20000090 	.word	0x20000090
 80006f0:	08006940 	.word	0x08006940
 80006f4:	08000605 	.word	0x08000605
 80006f8:	20000094 	.word	0x20000094
 80006fc:	0800694c 	.word	0x0800694c
 8000700:	08000639 	.word	0x08000639
 8000704:	2000008c 	.word	0x2000008c
 8000708:	08006958 	.word	0x08006958
 800070c:	080005c9 	.word	0x080005c9

08000710 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	@ 0x50
 8000714:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0318 	add.w	r3, r7, #24
 800071a:	2238      	movs	r2, #56	@ 0x38
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f005 fdea 	bl	80062f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000732:	2000      	movs	r0, #0
 8000734:	f000 fd34 	bl	80011a0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000742:	2340      	movs	r3, #64	@ 0x40
 8000744:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074a:	2302      	movs	r3, #2
 800074c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800074e:	2304      	movs	r3, #4
 8000750:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000752:	2355      	movs	r3, #85	@ 0x55
 8000754:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000756:	2302      	movs	r3, #2
 8000758:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800075a:	2302      	movs	r3, #2
 800075c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800075e:	2302      	movs	r3, #2
 8000760:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	f107 0318 	add.w	r3, r7, #24
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fdce 	bl	8001308 <HAL_RCC_OscConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000772:	f000 f818 	bl	80007a6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000776:	230f      	movs	r3, #15
 8000778:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077a:	2303      	movs	r3, #3
 800077c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2104      	movs	r1, #4
 800078e:	4618      	mov	r0, r3
 8000790:	f001 f8cc 	bl	800192c <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x8e>
	{
		Error_Handler();
 800079a:	f000 f804 	bl	80007a6 <Error_Handler>
	}
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	@ 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007aa:	b672      	cpsid	i
}
 80007ac:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007ae:	bf00      	nop
 80007b0:	e7fd      	b.n	80007ae <Error_Handler+0x8>
	...

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <HAL_MspInit+0x50>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007be:	4a11      	ldr	r2, [pc, #68]	@ (8000804 <HAL_MspInit+0x50>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <HAL_MspInit+0x50>)
 80007c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <HAL_MspInit+0x50>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000804 <HAL_MspInit+0x50>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <HAL_MspInit+0x50>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	210f      	movs	r1, #15
 80007ee:	f06f 0001 	mvn.w	r0, #1
 80007f2:	f000 fae2 	bl	8000dba <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007f6:	f000 fd77 	bl	80012e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <NMI_Handler+0x4>

08000810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <MemManage_Handler+0x4>

08000820 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <UsageFault_Handler+0x4>

08000830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000842:	f000 f9df 	bl	8000c04 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000846:	f004 f9e5 	bl	8004c14 <xTaskGetSchedulerState>
 800084a:	4603      	mov	r3, r0
 800084c:	2b01      	cmp	r3, #1
 800084e:	d001      	beq.n	8000854 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000850:	f005 f8da 	bl	8005a08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	e00a      	b.n	8000880 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800086a:	f3af 8000 	nop.w
 800086e:	4601      	mov	r1, r0
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	60ba      	str	r2, [r7, #8]
 8000876:	b2ca      	uxtb	r2, r1
 8000878:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697a      	ldr	r2, [r7, #20]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	429a      	cmp	r2, r3
 8000886:	dbf0      	blt.n	800086a <_read+0x12>
  }

  return len;
 8000888:	687b      	ldr	r3, [r7, #4]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b086      	sub	sp, #24
 8000896:	af00      	add	r7, sp, #0
 8000898:	60f8      	str	r0, [r7, #12]
 800089a:	60b9      	str	r1, [r7, #8]
 800089c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
 80008a2:	e009      	b.n	80008b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	1c5a      	adds	r2, r3, #1
 80008a8:	60ba      	str	r2, [r7, #8]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe79 	bl	80005a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	3301      	adds	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697a      	ldr	r2, [r7, #20]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	429a      	cmp	r2, r3
 80008be:	dbf1      	blt.n	80008a4 <_write+0x12>
  }
  return len;
 80008c0:	687b      	ldr	r3, [r7, #4]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <_close>:

int _close(int file)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
 80008ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008f2:	605a      	str	r2, [r3, #4]
  return 0;
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <_isatty>:

int _isatty(int file)
{
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
	...

08000934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800093c:	4a14      	ldr	r2, [pc, #80]	@ (8000990 <_sbrk+0x5c>)
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <_sbrk+0x60>)
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000948:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d102      	bne.n	8000956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <_sbrk+0x64>)
 8000952:	4a12      	ldr	r2, [pc, #72]	@ (800099c <_sbrk+0x68>)
 8000954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	429a      	cmp	r2, r3
 8000962:	d207      	bcs.n	8000974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000964:	f005 fd16 	bl	8006394 <__errno>
 8000968:	4603      	mov	r3, r0
 800096a:	220c      	movs	r2, #12
 800096c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000972:	e009      	b.n	8000988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000974:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097a:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	4a05      	ldr	r2, [pc, #20]	@ (8000998 <_sbrk+0x64>)
 8000984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20008000 	.word	0x20008000
 8000994:	00000400 	.word	0x00000400
 8000998:	2000009c 	.word	0x2000009c
 800099c:	20001bd8 	.word	0x20001bd8

080009a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <SystemInit+0x20>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009aa:	4a05      	ldr	r2, [pc, #20]	@ (80009c0 <SystemInit+0x20>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c8:	4b22      	ldr	r3, [pc, #136]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009ca:	4a23      	ldr	r2, [pc, #140]	@ (8000a58 <MX_USART2_UART_Init+0x94>)
 80009cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ce:	4b21      	ldr	r3, [pc, #132]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fa:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a00:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a06:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0c:	4811      	ldr	r0, [pc, #68]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 8000a0e:	f001 fb99 	bl	8002144 <HAL_UART_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a18:	f7ff fec5 	bl	80007a6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	480d      	ldr	r0, [pc, #52]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 8000a20:	f002 f992 	bl	8002d48 <HAL_UARTEx_SetTxFifoThreshold>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a2a:	f7ff febc 	bl	80007a6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4808      	ldr	r0, [pc, #32]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 8000a32:	f002 f9c7 	bl	8002dc4 <HAL_UARTEx_SetRxFifoThreshold>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a3c:	f7ff feb3 	bl	80007a6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <MX_USART2_UART_Init+0x90>)
 8000a42:	f002 f948 	bl	8002cd6 <HAL_UARTEx_DisableFifoMode>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a4c:	f7ff feab 	bl	80007a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	200000a0 	.word	0x200000a0
 8000a58:	40004400 	.word	0x40004400

08000a5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b09a      	sub	sp, #104	@ 0x68
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	2244      	movs	r2, #68	@ 0x44
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f005 fc3b 	bl	80062f8 <memset>
  if(uartHandle->Instance==USART2)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a1f      	ldr	r2, [pc, #124]	@ (8000b04 <HAL_UART_MspInit+0xa8>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d136      	bne.n	8000afa <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 f963 	bl	8001d64 <HAL_RCCEx_PeriphCLKConfig>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aa4:	f7ff fe7f 	bl	80007a6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa8:	4b17      	ldr	r3, [pc, #92]	@ (8000b08 <HAL_UART_MspInit+0xac>)
 8000aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aac:	4a16      	ldr	r2, [pc, #88]	@ (8000b08 <HAL_UART_MspInit+0xac>)
 8000aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ab4:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <HAL_UART_MspInit+0xac>)
 8000ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <HAL_UART_MspInit+0xac>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac4:	4a10      	ldr	r2, [pc, #64]	@ (8000b08 <HAL_UART_MspInit+0xac>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000acc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <HAL_UART_MspInit+0xac>)
 8000ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ad8:	230c      	movs	r3, #12
 8000ada:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae8:	2307      	movs	r3, #7
 8000aea:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000af0:	4619      	mov	r1, r3
 8000af2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af6:	f000 f987 	bl	8000e08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000afa:	bf00      	nop
 8000afc:	3768      	adds	r7, #104	@ 0x68
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40004400 	.word	0x40004400
 8000b08:	40021000 	.word	0x40021000

08000b0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b0c:	480d      	ldr	r0, [pc, #52]	@ (8000b44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b0e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b10:	f7ff ff46 	bl	80009a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b14:	480c      	ldr	r0, [pc, #48]	@ (8000b48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b16:	490d      	ldr	r1, [pc, #52]	@ (8000b4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b18:	4a0d      	ldr	r2, [pc, #52]	@ (8000b50 <LoopForever+0xe>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b1c:	e002      	b.n	8000b24 <LoopCopyDataInit>

08000b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b22:	3304      	adds	r3, #4

08000b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b28:	d3f9      	bcc.n	8000b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b58 <LoopForever+0x16>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b30:	e001      	b.n	8000b36 <LoopFillZerobss>

08000b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b34:	3204      	adds	r2, #4

08000b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b38:	d3fb      	bcc.n	8000b32 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000b3a:	f005 fc31 	bl	80063a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b3e:	f7ff fd95 	bl	800066c <main>

08000b42 <LoopForever>:

LoopForever:
    b LoopForever
 8000b42:	e7fe      	b.n	8000b42 <LoopForever>
  ldr   r0, =_estack
 8000b44:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b4c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b50:	080069f0 	.word	0x080069f0
  ldr r2, =_sbss
 8000b54:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b58:	20001bd4 	.word	0x20001bd4

08000b5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b5c:	e7fe      	b.n	8000b5c <ADC1_2_IRQHandler>

08000b5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b64:	2300      	movs	r3, #0
 8000b66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 f91b 	bl	8000da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b6e:	200f      	movs	r0, #15
 8000b70:	f000 f80e 	bl	8000b90 <HAL_InitTick>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d002      	beq.n	8000b80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	71fb      	strb	r3, [r7, #7]
 8000b7e:	e001      	b.n	8000b84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b80:	f7ff fe18 	bl	80007b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b84:	79fb      	ldrb	r3, [r7, #7]

}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b9c:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <HAL_InitTick+0x68>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d022      	beq.n	8000bea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ba4:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <HAL_InitTick+0x6c>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <HAL_InitTick+0x68>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f000 f918 	bl	8000dee <HAL_SYSTICK_Config>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d10f      	bne.n	8000be4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b0f      	cmp	r3, #15
 8000bc8:	d809      	bhi.n	8000bde <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bd2:	f000 f8f2 	bl	8000dba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <HAL_InitTick+0x70>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	e007      	b.n	8000bee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
 8000be2:	e004      	b.n	8000bee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
 8000be8:	e001      	b.n	8000bee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	20000004 	.word	0x20000004

08000c04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c08:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <HAL_IncTick+0x1c>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <HAL_IncTick+0x20>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a03      	ldr	r2, [pc, #12]	@ (8000c20 <HAL_IncTick+0x1c>)
 8000c14:	6013      	str	r3, [r2, #0]
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	20000134 	.word	0x20000134
 8000c24:	20000008 	.word	0x20000008

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	@ (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000134 	.word	0x20000134

08000c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c72:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	60d3      	str	r3, [r2, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	f003 0307 	and.w	r3, r3, #7
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	6039      	str	r1, [r7, #0]
 8000cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	db0a      	blt.n	8000cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	490c      	ldr	r1, [pc, #48]	@ (8000cf0 <__NVIC_SetPriority+0x4c>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ccc:	e00a      	b.n	8000ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4908      	ldr	r1, [pc, #32]	@ (8000cf4 <__NVIC_SetPriority+0x50>)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	f003 030f 	and.w	r3, r3, #15
 8000cda:	3b04      	subs	r3, #4
 8000cdc:	0112      	lsls	r2, r2, #4
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	761a      	strb	r2, [r3, #24]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b089      	sub	sp, #36	@ 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f1c3 0307 	rsb	r3, r3, #7
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	bf28      	it	cs
 8000d16:	2304      	movcs	r3, #4
 8000d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	2b06      	cmp	r3, #6
 8000d20:	d902      	bls.n	8000d28 <NVIC_EncodePriority+0x30>
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3b03      	subs	r3, #3
 8000d26:	e000      	b.n	8000d2a <NVIC_EncodePriority+0x32>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43da      	mvns	r2, r3
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	401a      	ands	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	43d9      	mvns	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	4313      	orrs	r3, r2
         );
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3724      	adds	r7, #36	@ 0x24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d70:	d301      	bcc.n	8000d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00f      	b.n	8000d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d76:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <SysTick_Config+0x40>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7e:	210f      	movs	r1, #15
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d84:	f7ff ff8e 	bl	8000ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <SysTick_Config+0x40>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8e:	4b04      	ldr	r3, [pc, #16]	@ (8000da0 <SysTick_Config+0x40>)
 8000d90:	2207      	movs	r2, #7
 8000d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	e000e010 	.word	0xe000e010

08000da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff ff47 	bl	8000c40 <__NVIC_SetPriorityGrouping>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	60b9      	str	r1, [r7, #8]
 8000dc4:	607a      	str	r2, [r7, #4]
 8000dc6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc8:	f7ff ff5e 	bl	8000c88 <__NVIC_GetPriorityGrouping>
 8000dcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	68b9      	ldr	r1, [r7, #8]
 8000dd2:	6978      	ldr	r0, [r7, #20]
 8000dd4:	f7ff ff90 	bl	8000cf8 <NVIC_EncodePriority>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff5f 	bl	8000ca4 <__NVIC_SetPriority>
}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffb2 	bl	8000d60 <SysTick_Config>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e16:	e15a      	b.n	80010ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
 8000e24:	4013      	ands	r3, r2
 8000e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f000 814c 	beq.w	80010c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d005      	beq.n	8000e48 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d130      	bne.n	8000eaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e7e:	2201      	movs	r2, #1
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	091b      	lsrs	r3, r3, #4
 8000e94:	f003 0201 	and.w	r2, r3, #1
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d017      	beq.n	8000ee6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d123      	bne.n	8000f3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	08da      	lsrs	r2, r3, #3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3208      	adds	r2, #8
 8000efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	220f      	movs	r2, #15
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	691a      	ldr	r2, [r3, #16]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	08da      	lsrs	r2, r3, #3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3208      	adds	r2, #8
 8000f34:	6939      	ldr	r1, [r7, #16]
 8000f36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	2203      	movs	r2, #3
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0203 	and.w	r2, r3, #3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 80a6 	beq.w	80010c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7c:	4b5b      	ldr	r3, [pc, #364]	@ (80010ec <HAL_GPIO_Init+0x2e4>)
 8000f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f80:	4a5a      	ldr	r2, [pc, #360]	@ (80010ec <HAL_GPIO_Init+0x2e4>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f88:	4b58      	ldr	r3, [pc, #352]	@ (80010ec <HAL_GPIO_Init+0x2e4>)
 8000f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f94:	4a56      	ldr	r2, [pc, #344]	@ (80010f0 <HAL_GPIO_Init+0x2e8>)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fbe:	d01f      	beq.n	8001000 <HAL_GPIO_Init+0x1f8>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a4c      	ldr	r2, [pc, #304]	@ (80010f4 <HAL_GPIO_Init+0x2ec>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d019      	beq.n	8000ffc <HAL_GPIO_Init+0x1f4>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a4b      	ldr	r2, [pc, #300]	@ (80010f8 <HAL_GPIO_Init+0x2f0>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d013      	beq.n	8000ff8 <HAL_GPIO_Init+0x1f0>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a4a      	ldr	r2, [pc, #296]	@ (80010fc <HAL_GPIO_Init+0x2f4>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d00d      	beq.n	8000ff4 <HAL_GPIO_Init+0x1ec>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a49      	ldr	r2, [pc, #292]	@ (8001100 <HAL_GPIO_Init+0x2f8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d007      	beq.n	8000ff0 <HAL_GPIO_Init+0x1e8>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a48      	ldr	r2, [pc, #288]	@ (8001104 <HAL_GPIO_Init+0x2fc>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d101      	bne.n	8000fec <HAL_GPIO_Init+0x1e4>
 8000fe8:	2305      	movs	r3, #5
 8000fea:	e00a      	b.n	8001002 <HAL_GPIO_Init+0x1fa>
 8000fec:	2306      	movs	r3, #6
 8000fee:	e008      	b.n	8001002 <HAL_GPIO_Init+0x1fa>
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	e006      	b.n	8001002 <HAL_GPIO_Init+0x1fa>
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e004      	b.n	8001002 <HAL_GPIO_Init+0x1fa>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e002      	b.n	8001002 <HAL_GPIO_Init+0x1fa>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e000      	b.n	8001002 <HAL_GPIO_Init+0x1fa>
 8001000:	2300      	movs	r3, #0
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	f002 0203 	and.w	r2, r2, #3
 8001008:	0092      	lsls	r2, r2, #2
 800100a:	4093      	lsls	r3, r2
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001012:	4937      	ldr	r1, [pc, #220]	@ (80010f0 <HAL_GPIO_Init+0x2e8>)
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001020:	4b39      	ldr	r3, [pc, #228]	@ (8001108 <HAL_GPIO_Init+0x300>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001044:	4a30      	ldr	r2, [pc, #192]	@ (8001108 <HAL_GPIO_Init+0x300>)
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800104a:	4b2f      	ldr	r3, [pc, #188]	@ (8001108 <HAL_GPIO_Init+0x300>)
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	43db      	mvns	r3, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800106e:	4a26      	ldr	r2, [pc, #152]	@ (8001108 <HAL_GPIO_Init+0x300>)
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001074:	4b24      	ldr	r3, [pc, #144]	@ (8001108 <HAL_GPIO_Init+0x300>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001098:	4a1b      	ldr	r2, [pc, #108]	@ (8001108 <HAL_GPIO_Init+0x300>)
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800109e:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <HAL_GPIO_Init+0x300>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4313      	orrs	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010c2:	4a11      	ldr	r2, [pc, #68]	@ (8001108 <HAL_GPIO_Init+0x300>)
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3301      	adds	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	fa22 f303 	lsr.w	r3, r2, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	f47f ae9d 	bne.w	8000e18 <HAL_GPIO_Init+0x10>
  }
}
 80010de:	bf00      	nop
 80010e0:	bf00      	nop
 80010e2:	371c      	adds	r7, #28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40010000 	.word	0x40010000
 80010f4:	48000400 	.word	0x48000400
 80010f8:	48000800 	.word	0x48000800
 80010fc:	48000c00 	.word	0x48000c00
 8001100:	48001000 	.word	0x48001000
 8001104:	48001400 	.word	0x48001400
 8001108:	40010400 	.word	0x40010400

0800110c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	887b      	ldrh	r3, [r7, #2]
 800111e:	4013      	ands	r3, r2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d002      	beq.n	800112a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001124:	2301      	movs	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	e001      	b.n	800112e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
 8001148:	4613      	mov	r3, r2
 800114a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800114c:	787b      	ldrb	r3, [r7, #1]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001158:	e002      	b.n	8001160 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4013      	ands	r3, r2
 8001184:	041a      	lsls	r2, r3, #16
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	43d9      	mvns	r1, r3
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	400b      	ands	r3, r1
 800118e:	431a      	orrs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	619a      	str	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d141      	bne.n	8001232 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ae:	4b4b      	ldr	r3, [pc, #300]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011ba:	d131      	bne.n	8001220 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011bc:	4b47      	ldr	r3, [pc, #284]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011c2:	4a46      	ldr	r2, [pc, #280]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80011c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011cc:	4b43      	ldr	r3, [pc, #268]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011d4:	4a41      	ldr	r2, [pc, #260]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011dc:	4b40      	ldr	r3, [pc, #256]	@ (80012e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2232      	movs	r2, #50	@ 0x32
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	4a3f      	ldr	r2, [pc, #252]	@ (80012e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	0c9b      	lsrs	r3, r3, #18
 80011ee:	3301      	adds	r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011f2:	e002      	b.n	80011fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011fa:	4b38      	ldr	r3, [pc, #224]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001206:	d102      	bne.n	800120e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f2      	bne.n	80011f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800120e:	4b33      	ldr	r3, [pc, #204]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800121a:	d158      	bne.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e057      	b.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001220:	4b2e      	ldr	r3, [pc, #184]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001226:	4a2d      	ldr	r2, [pc, #180]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800122c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001230:	e04d      	b.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001238:	d141      	bne.n	80012be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800123a:	4b28      	ldr	r3, [pc, #160]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001246:	d131      	bne.n	80012ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001248:	4b24      	ldr	r3, [pc, #144]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800124e:	4a23      	ldr	r2, [pc, #140]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001254:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001258:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001260:	4a1e      	ldr	r2, [pc, #120]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001262:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001266:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001268:	4b1d      	ldr	r3, [pc, #116]	@ (80012e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2232      	movs	r2, #50	@ 0x32
 800126e:	fb02 f303 	mul.w	r3, r2, r3
 8001272:	4a1c      	ldr	r2, [pc, #112]	@ (80012e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001274:	fba2 2303 	umull	r2, r3, r2, r3
 8001278:	0c9b      	lsrs	r3, r3, #18
 800127a:	3301      	adds	r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800127e:	e002      	b.n	8001286 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	3b01      	subs	r3, #1
 8001284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001286:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800128e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001292:	d102      	bne.n	800129a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f2      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800129a:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012a6:	d112      	bne.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e011      	b.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012ac:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012b2:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80012bc:	e007      	b.n	80012ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012c6:	4a05      	ldr	r2, [pc, #20]	@ (80012dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40007000 	.word	0x40007000
 80012e0:	20000000 	.word	0x20000000
 80012e4:	431bde83 	.word	0x431bde83

080012e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f6:	6093      	str	r3, [r2, #8]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40007000 	.word	0x40007000

08001308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e2fe      	b.n	8001918 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d075      	beq.n	8001412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001326:	4b97      	ldr	r3, [pc, #604]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001330:	4b94      	ldr	r3, [pc, #592]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	2b0c      	cmp	r3, #12
 800133e:	d102      	bne.n	8001346 <HAL_RCC_OscConfig+0x3e>
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2b03      	cmp	r3, #3
 8001344:	d002      	beq.n	800134c <HAL_RCC_OscConfig+0x44>
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2b08      	cmp	r3, #8
 800134a:	d10b      	bne.n	8001364 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	4b8d      	ldr	r3, [pc, #564]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d05b      	beq.n	8001410 <HAL_RCC_OscConfig+0x108>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d157      	bne.n	8001410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e2d9      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800136c:	d106      	bne.n	800137c <HAL_RCC_OscConfig+0x74>
 800136e:	4b85      	ldr	r3, [pc, #532]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a84      	ldr	r2, [pc, #528]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e01d      	b.n	80013b8 <HAL_RCC_OscConfig+0xb0>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001384:	d10c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x98>
 8001386:	4b7f      	ldr	r3, [pc, #508]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a7e      	ldr	r2, [pc, #504]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 800138c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	4b7c      	ldr	r3, [pc, #496]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a7b      	ldr	r2, [pc, #492]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e00b      	b.n	80013b8 <HAL_RCC_OscConfig+0xb0>
 80013a0:	4b78      	ldr	r3, [pc, #480]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a77      	ldr	r2, [pc, #476]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b75      	ldr	r3, [pc, #468]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a74      	ldr	r2, [pc, #464]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d013      	beq.n	80013e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fc32 	bl	8000c28 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff fc2e 	bl	8000c28 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	@ 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e29e      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013da:	4b6a      	ldr	r3, [pc, #424]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0xc0>
 80013e6:	e014      	b.n	8001412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fc1e 	bl	8000c28 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fc1a 	bl	8000c28 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	@ 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e28a      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001402:	4b60      	ldr	r3, [pc, #384]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0xe8>
 800140e:	e000      	b.n	8001412 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d075      	beq.n	800150a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800141e:	4b59      	ldr	r3, [pc, #356]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001428:	4b56      	ldr	r3, [pc, #344]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b0c      	cmp	r3, #12
 8001436:	d102      	bne.n	800143e <HAL_RCC_OscConfig+0x136>
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d002      	beq.n	8001444 <HAL_RCC_OscConfig+0x13c>
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b04      	cmp	r3, #4
 8001442:	d11f      	bne.n	8001484 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001444:	4b4f      	ldr	r3, [pc, #316]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x154>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e25d      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b49      	ldr	r3, [pc, #292]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	061b      	lsls	r3, r3, #24
 800146a:	4946      	ldr	r1, [pc, #280]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001470:	4b45      	ldr	r3, [pc, #276]	@ (8001588 <HAL_RCC_OscConfig+0x280>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fb8b 	bl	8000b90 <HAL_InitTick>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d043      	beq.n	8001508 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e249      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d023      	beq.n	80014d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800148c:	4b3d      	ldr	r3, [pc, #244]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a3c      	ldr	r2, [pc, #240]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fbc6 	bl	8000c28 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fbc2 	bl	8000c28 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e232      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b2:	4b34      	ldr	r3, [pc, #208]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014be:	4b31      	ldr	r3, [pc, #196]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	061b      	lsls	r3, r3, #24
 80014cc:	492d      	ldr	r1, [pc, #180]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	604b      	str	r3, [r1, #4]
 80014d2:	e01a      	b.n	800150a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fba2 	bl	8000c28 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e8:	f7ff fb9e 	bl	8000c28 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e20e      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014fa:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x1e0>
 8001506:	e000      	b.n	800150a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001508:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d041      	beq.n	800159a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d01c      	beq.n	8001558 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151e:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001524:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152e:	f7ff fb7b 	bl	8000c28 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001536:	f7ff fb77 	bl	8000c28 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e1e7      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001548:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 800154a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0ef      	beq.n	8001536 <HAL_RCC_OscConfig+0x22e>
 8001556:	e020      	b.n	800159a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001558:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 800155a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800155e:	4a09      	ldr	r2, [pc, #36]	@ (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001568:	f7ff fb5e 	bl	8000c28 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800156e:	e00d      	b.n	800158c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001570:	f7ff fb5a 	bl	8000c28 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d906      	bls.n	800158c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e1ca      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800158c:	4b8c      	ldr	r3, [pc, #560]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800158e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1ea      	bne.n	8001570 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015ac:	4b84      	ldr	r3, [pc, #528]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_OscConfig+0x2b4>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x2b6>
 80015bc:	2300      	movs	r3, #0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00d      	beq.n	80015de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b7f      	ldr	r3, [pc, #508]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c6:	4a7e      	ldr	r2, [pc, #504]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ce:	4b7c      	ldr	r3, [pc, #496]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015da:	2301      	movs	r3, #1
 80015dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015de:	4b79      	ldr	r3, [pc, #484]	@ (80017c4 <HAL_RCC_OscConfig+0x4bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d118      	bne.n	800161c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015ea:	4b76      	ldr	r3, [pc, #472]	@ (80017c4 <HAL_RCC_OscConfig+0x4bc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a75      	ldr	r2, [pc, #468]	@ (80017c4 <HAL_RCC_OscConfig+0x4bc>)
 80015f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fb17 	bl	8000c28 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fe:	f7ff fb13 	bl	8000c28 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e183      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001610:	4b6c      	ldr	r3, [pc, #432]	@ (80017c4 <HAL_RCC_OscConfig+0x4bc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d108      	bne.n	8001636 <HAL_RCC_OscConfig+0x32e>
 8001624:	4b66      	ldr	r3, [pc, #408]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800162a:	4a65      	ldr	r2, [pc, #404]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001634:	e024      	b.n	8001680 <HAL_RCC_OscConfig+0x378>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d110      	bne.n	8001660 <HAL_RCC_OscConfig+0x358>
 800163e:	4b60      	ldr	r3, [pc, #384]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001644:	4a5e      	ldr	r2, [pc, #376]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800164e:	4b5c      	ldr	r3, [pc, #368]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001654:	4a5a      	ldr	r2, [pc, #360]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800165e:	e00f      	b.n	8001680 <HAL_RCC_OscConfig+0x378>
 8001660:	4b57      	ldr	r3, [pc, #348]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001666:	4a56      	ldr	r2, [pc, #344]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001670:	4b53      	ldr	r3, [pc, #332]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001676:	4a52      	ldr	r2, [pc, #328]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001678:	f023 0304 	bic.w	r3, r3, #4
 800167c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d016      	beq.n	80016b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001688:	f7ff face 	bl	8000c28 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001690:	f7ff faca 	bl	8000c28 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e138      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016a6:	4b46      	ldr	r3, [pc, #280]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80016a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0ed      	beq.n	8001690 <HAL_RCC_OscConfig+0x388>
 80016b4:	e015      	b.n	80016e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b6:	f7ff fab7 	bl	8000c28 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016bc:	e00a      	b.n	80016d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f7ff fab3 	bl	8000c28 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e121      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016d4:	4b3a      	ldr	r3, [pc, #232]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80016d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1ed      	bne.n	80016be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016e2:	7ffb      	ldrb	r3, [r7, #31]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d105      	bne.n	80016f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e8:	4b35      	ldr	r3, [pc, #212]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ec:	4a34      	ldr	r2, [pc, #208]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80016ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0320 	and.w	r3, r3, #32
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d03c      	beq.n	800177a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01c      	beq.n	8001742 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001708:	4b2d      	ldr	r3, [pc, #180]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800170a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800170e:	4a2c      	ldr	r2, [pc, #176]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001718:	f7ff fa86 	bl	8000c28 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001720:	f7ff fa82 	bl	8000c28 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e0f2      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001732:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001734:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0ef      	beq.n	8001720 <HAL_RCC_OscConfig+0x418>
 8001740:	e01b      	b.n	800177a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001742:	4b1f      	ldr	r3, [pc, #124]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001744:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001748:	4a1d      	ldr	r2, [pc, #116]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001752:	f7ff fa69 	bl	8000c28 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800175a:	f7ff fa65 	bl	8000c28 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e0d5      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800176c:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800176e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1ef      	bne.n	800175a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80c9 	beq.w	8001916 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001784:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b0c      	cmp	r3, #12
 800178e:	f000 8083 	beq.w	8001898 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d15e      	bne.n	8001858 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a08      	ldr	r2, [pc, #32]	@ (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80017a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a6:	f7ff fa3f 	bl	8000c28 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ac:	e00c      	b.n	80017c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ae:	f7ff fa3b 	bl	8000c28 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d905      	bls.n	80017c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e0ab      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c8:	4b55      	ldr	r3, [pc, #340]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1ec      	bne.n	80017ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d4:	4b52      	ldr	r3, [pc, #328]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	4b52      	ldr	r3, [pc, #328]	@ (8001924 <HAL_RCC_OscConfig+0x61c>)
 80017da:	4013      	ands	r3, r2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6a11      	ldr	r1, [r2, #32]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017e4:	3a01      	subs	r2, #1
 80017e6:	0112      	lsls	r2, r2, #4
 80017e8:	4311      	orrs	r1, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80017ee:	0212      	lsls	r2, r2, #8
 80017f0:	4311      	orrs	r1, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017f6:	0852      	lsrs	r2, r2, #1
 80017f8:	3a01      	subs	r2, #1
 80017fa:	0552      	lsls	r2, r2, #21
 80017fc:	4311      	orrs	r1, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001802:	0852      	lsrs	r2, r2, #1
 8001804:	3a01      	subs	r2, #1
 8001806:	0652      	lsls	r2, r2, #25
 8001808:	4311      	orrs	r1, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800180e:	06d2      	lsls	r2, r2, #27
 8001810:	430a      	orrs	r2, r1
 8001812:	4943      	ldr	r1, [pc, #268]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 8001814:	4313      	orrs	r3, r2
 8001816:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001818:	4b41      	ldr	r3, [pc, #260]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a40      	ldr	r2, [pc, #256]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 800181e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001822:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001824:	4b3e      	ldr	r3, [pc, #248]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4a3d      	ldr	r2, [pc, #244]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 800182a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800182e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff f9fa 	bl	8000c28 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff f9f6 	bl	8000c28 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e066      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184a:	4b35      	ldr	r3, [pc, #212]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x530>
 8001856:	e05e      	b.n	8001916 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001858:	4b31      	ldr	r3, [pc, #196]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a30      	ldr	r2, [pc, #192]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 800185e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff f9e0 	bl	8000c28 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff f9dc 	bl	8000c28 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e04c      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800187e:	4b28      	ldr	r3, [pc, #160]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800188a:	4b25      	ldr	r3, [pc, #148]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	4924      	ldr	r1, [pc, #144]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 8001890:	4b25      	ldr	r3, [pc, #148]	@ (8001928 <HAL_RCC_OscConfig+0x620>)
 8001892:	4013      	ands	r3, r2
 8001894:	60cb      	str	r3, [r1, #12]
 8001896:	e03e      	b.n	8001916 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e039      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80018a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001920 <HAL_RCC_OscConfig+0x618>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0203 	and.w	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d12c      	bne.n	8001912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c2:	3b01      	subs	r3, #1
 80018c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d123      	bne.n	8001912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d11b      	bne.n	8001912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d113      	bne.n	8001912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f4:	085b      	lsrs	r3, r3, #1
 80018f6:	3b01      	subs	r3, #1
 80018f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d109      	bne.n	8001912 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001908:	085b      	lsrs	r3, r3, #1
 800190a:	3b01      	subs	r3, #1
 800190c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800190e:	429a      	cmp	r2, r3
 8001910:	d001      	beq.n	8001916 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3720      	adds	r7, #32
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40021000 	.word	0x40021000
 8001924:	019f800c 	.word	0x019f800c
 8001928:	feeefffc 	.word	0xfeeefffc

0800192c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e11e      	b.n	8001b82 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001944:	4b91      	ldr	r3, [pc, #580]	@ (8001b8c <HAL_RCC_ClockConfig+0x260>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d910      	bls.n	8001974 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b8e      	ldr	r3, [pc, #568]	@ (8001b8c <HAL_RCC_ClockConfig+0x260>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 020f 	bic.w	r2, r3, #15
 800195a:	498c      	ldr	r1, [pc, #560]	@ (8001b8c <HAL_RCC_ClockConfig+0x260>)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b8a      	ldr	r3, [pc, #552]	@ (8001b8c <HAL_RCC_ClockConfig+0x260>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e106      	b.n	8001b82 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d073      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d129      	bne.n	80019dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001988:	4b81      	ldr	r3, [pc, #516]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0f4      	b.n	8001b82 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001998:	f000 f99e 	bl	8001cd8 <RCC_GetSysClockFreqFromPLLSource>
 800199c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4a7c      	ldr	r2, [pc, #496]	@ (8001b94 <HAL_RCC_ClockConfig+0x268>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d93f      	bls.n	8001a26 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d009      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d033      	beq.n	8001a26 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d12f      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019c6:	4b72      	ldr	r3, [pc, #456]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80019ce:	4a70      	ldr	r2, [pc, #448]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 80019d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019d6:	2380      	movs	r3, #128	@ 0x80
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	e024      	b.n	8001a26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d109      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0c6      	b.n	8001b82 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f4:	4b66      	ldr	r3, [pc, #408]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0be      	b.n	8001b82 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a04:	f000 f8ce 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8001a08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4a61      	ldr	r2, [pc, #388]	@ (8001b94 <HAL_RCC_ClockConfig+0x268>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d909      	bls.n	8001a26 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a12:	4b5f      	ldr	r3, [pc, #380]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a1a:	4a5d      	ldr	r2, [pc, #372]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a22:	2380      	movs	r3, #128	@ 0x80
 8001a24:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a26:	4b5a      	ldr	r3, [pc, #360]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f023 0203 	bic.w	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4957      	ldr	r1, [pc, #348]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a38:	f7ff f8f6 	bl	8000c28 <HAL_GetTick>
 8001a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a40:	f7ff f8f2 	bl	8000c28 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e095      	b.n	8001b82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	4b4e      	ldr	r3, [pc, #312]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 020c 	and.w	r2, r3, #12
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d1eb      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d023      	beq.n	8001abc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a80:	4b43      	ldr	r3, [pc, #268]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4a42      	ldr	r2, [pc, #264]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001a86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a8a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d007      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a98:	4b3d      	ldr	r3, [pc, #244]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001aa0:	4a3b      	ldr	r2, [pc, #236]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001aa2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001aa6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa8:	4b39      	ldr	r3, [pc, #228]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	4936      	ldr	r1, [pc, #216]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	608b      	str	r3, [r1, #8]
 8001aba:	e008      	b.n	8001ace <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b80      	cmp	r3, #128	@ 0x80
 8001ac0:	d105      	bne.n	8001ace <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ac2:	4b33      	ldr	r3, [pc, #204]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	4a32      	ldr	r2, [pc, #200]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001ac8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001acc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ace:	4b2f      	ldr	r3, [pc, #188]	@ (8001b8c <HAL_RCC_ClockConfig+0x260>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d21d      	bcs.n	8001b18 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001adc:	4b2b      	ldr	r3, [pc, #172]	@ (8001b8c <HAL_RCC_ClockConfig+0x260>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f023 020f 	bic.w	r2, r3, #15
 8001ae4:	4929      	ldr	r1, [pc, #164]	@ (8001b8c <HAL_RCC_ClockConfig+0x260>)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001aec:	f7ff f89c 	bl	8000c28 <HAL_GetTick>
 8001af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af4:	f7ff f898 	bl	8000c28 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e03b      	b.n	8001b82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <HAL_RCC_ClockConfig+0x260>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d1ed      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b24:	4b1a      	ldr	r3, [pc, #104]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4917      	ldr	r1, [pc, #92]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d009      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b42:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	490f      	ldr	r1, [pc, #60]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b56:	f000 f825 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <HAL_RCC_ClockConfig+0x264>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	490c      	ldr	r1, [pc, #48]	@ (8001b98 <HAL_RCC_ClockConfig+0x26c>)
 8001b68:	5ccb      	ldrb	r3, [r1, r3]
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b72:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <HAL_RCC_ClockConfig+0x270>)
 8001b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <HAL_RCC_ClockConfig+0x274>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff f808 	bl	8000b90 <HAL_InitTick>
 8001b80:	4603      	mov	r3, r0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40022000 	.word	0x40022000
 8001b90:	40021000 	.word	0x40021000
 8001b94:	04c4b400 	.word	0x04c4b400
 8001b98:	080069a0 	.word	0x080069a0
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	20000004 	.word	0x20000004

08001ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001baa:	4b2c      	ldr	r3, [pc, #176]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d102      	bne.n	8001bbc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	e047      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bbc:	4b27      	ldr	r3, [pc, #156]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d102      	bne.n	8001bce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bc8:	4b26      	ldr	r3, [pc, #152]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	e03e      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001bce:	4b23      	ldr	r3, [pc, #140]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b0c      	cmp	r3, #12
 8001bd8:	d136      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bda:	4b20      	ldr	r3, [pc, #128]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3301      	adds	r3, #1
 8001bf0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d10c      	bne.n	8001c12 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c00:	4a16      	ldr	r2, [pc, #88]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c02:	68d2      	ldr	r2, [r2, #12]
 8001c04:	0a12      	lsrs	r2, r2, #8
 8001c06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c0a:	fb02 f303 	mul.w	r3, r2, r3
 8001c0e:	617b      	str	r3, [r7, #20]
      break;
 8001c10:	e00c      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c12:	4a13      	ldr	r2, [pc, #76]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	4a10      	ldr	r2, [pc, #64]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c1c:	68d2      	ldr	r2, [r2, #12]
 8001c1e:	0a12      	lsrs	r2, r2, #8
 8001c20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001c24:	fb02 f303 	mul.w	r3, r2, r3
 8001c28:	617b      	str	r3, [r7, #20]
      break;
 8001c2a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	0e5b      	lsrs	r3, r3, #25
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	3301      	adds	r3, #1
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	e001      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c4c:	693b      	ldr	r3, [r7, #16]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	371c      	adds	r7, #28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	00f42400 	.word	0x00f42400
 8001c64:	016e3600 	.word	0x016e3600

08001c68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	@ (8001c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000000 	.word	0x20000000

08001c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c84:	f7ff fff0 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	4904      	ldr	r1, [pc, #16]	@ (8001ca8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c96:	5ccb      	ldrb	r3, [r1, r3]
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	080069b0 	.word	0x080069b0

08001cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cb0:	f7ff ffda 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	0adb      	lsrs	r3, r3, #11
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4904      	ldr	r1, [pc, #16]	@ (8001cd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	080069b0 	.word	0x080069b0

08001cd8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cde:	4b1e      	ldr	r3, [pc, #120]	@ (8001d58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d10c      	bne.n	8001d16 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cfc:	4a17      	ldr	r2, [pc, #92]	@ (8001d5c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d04:	4a14      	ldr	r2, [pc, #80]	@ (8001d58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d06:	68d2      	ldr	r2, [r2, #12]
 8001d08:	0a12      	lsrs	r2, r2, #8
 8001d0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d0e:	fb02 f303 	mul.w	r3, r2, r3
 8001d12:	617b      	str	r3, [r7, #20]
    break;
 8001d14:	e00c      	b.n	8001d30 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d16:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d20:	68d2      	ldr	r2, [r2, #12]
 8001d22:	0a12      	lsrs	r2, r2, #8
 8001d24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d28:	fb02 f303 	mul.w	r3, r2, r3
 8001d2c:	617b      	str	r3, [r7, #20]
    break;
 8001d2e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d30:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0e5b      	lsrs	r3, r3, #25
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d48:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d4a:	687b      	ldr	r3, [r7, #4]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	371c      	adds	r7, #28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	016e3600 	.word	0x016e3600
 8001d60:	00f42400 	.word	0x00f42400

08001d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d70:	2300      	movs	r3, #0
 8001d72:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 8098 	beq.w	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d86:	4b43      	ldr	r3, [pc, #268]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10d      	bne.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	4b40      	ldr	r3, [pc, #256]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d96:	4a3f      	ldr	r2, [pc, #252]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001daa:	2301      	movs	r3, #1
 8001dac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dae:	4b3a      	ldr	r3, [pc, #232]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a39      	ldr	r2, [pc, #228]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dba:	f7fe ff35 	bl	8000c28 <HAL_GetTick>
 8001dbe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dc0:	e009      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc2:	f7fe ff31 	bl	8000c28 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d902      	bls.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	74fb      	strb	r3, [r7, #19]
        break;
 8001dd4:	e005      	b.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dd6:	4b30      	ldr	r3, [pc, #192]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0ef      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001de2:	7cfb      	ldrb	r3, [r7, #19]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d159      	bne.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001de8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001df2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d01e      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d019      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e04:	4b23      	ldr	r3, [pc, #140]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e10:	4b20      	ldr	r3, [pc, #128]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e16:	4a1f      	ldr	r2, [pc, #124]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e20:	4b1c      	ldr	r3, [pc, #112]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e26:	4a1b      	ldr	r2, [pc, #108]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e30:	4a18      	ldr	r2, [pc, #96]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d016      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7fe fef1 	bl	8000c28 <HAL_GetTick>
 8001e46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e48:	e00b      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e4a:	f7fe feed 	bl	8000c28 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d902      	bls.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	74fb      	strb	r3, [r7, #19]
            break;
 8001e60:	e006      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e62:	4b0c      	ldr	r3, [pc, #48]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0ec      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001e70:	7cfb      	ldrb	r3, [r7, #19]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10b      	bne.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e76:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e84:	4903      	ldr	r1, [pc, #12]	@ (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e8e:	7cfb      	ldrb	r3, [r7, #19]
 8001e90:	74bb      	strb	r3, [r7, #18]
 8001e92:	e005      	b.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e9c:	7cfb      	ldrb	r3, [r7, #19]
 8001e9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ea0:	7c7b      	ldrb	r3, [r7, #17]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d105      	bne.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea6:	4ba6      	ldr	r3, [pc, #664]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eaa:	4aa5      	ldr	r2, [pc, #660]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eb0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00a      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ebe:	4ba0      	ldr	r3, [pc, #640]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ec4:	f023 0203 	bic.w	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	499c      	ldr	r1, [pc, #624]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00a      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ee0:	4b97      	ldr	r3, [pc, #604]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee6:	f023 020c 	bic.w	r2, r3, #12
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	4994      	ldr	r1, [pc, #592]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f02:	4b8f      	ldr	r3, [pc, #572]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	498b      	ldr	r1, [pc, #556]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00a      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f24:	4b86      	ldr	r3, [pc, #536]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	4983      	ldr	r1, [pc, #524]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00a      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f46:	4b7e      	ldr	r3, [pc, #504]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f4c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	497a      	ldr	r1, [pc, #488]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00a      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f68:	4b75      	ldr	r3, [pc, #468]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f6e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	4972      	ldr	r1, [pc, #456]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00a      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f90:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	4969      	ldr	r1, [pc, #420]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00a      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fac:	4b64      	ldr	r3, [pc, #400]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fb2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	4961      	ldr	r1, [pc, #388]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00a      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fce:	4b5c      	ldr	r3, [pc, #368]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	4958      	ldr	r1, [pc, #352]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d015      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ff0:	4b53      	ldr	r3, [pc, #332]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ff6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffe:	4950      	ldr	r1, [pc, #320]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800200e:	d105      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002010:	4b4b      	ldr	r3, [pc, #300]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4a4a      	ldr	r2, [pc, #296]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800201a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002024:	2b00      	cmp	r3, #0
 8002026:	d015      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002028:	4b45      	ldr	r3, [pc, #276]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002036:	4942      	ldr	r1, [pc, #264]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002042:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002046:	d105      	bne.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002048:	4b3d      	ldr	r3, [pc, #244]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4a3c      	ldr	r2, [pc, #240]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800204e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002052:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d015      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002060:	4b37      	ldr	r3, [pc, #220]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002066:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	4934      	ldr	r1, [pc, #208]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800207e:	d105      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002080:	4b2f      	ldr	r3, [pc, #188]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a2e      	ldr	r2, [pc, #184]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800208a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d015      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002098:	4b29      	ldr	r3, [pc, #164]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a6:	4926      	ldr	r1, [pc, #152]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020b6:	d105      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020b8:	4b21      	ldr	r3, [pc, #132]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a20      	ldr	r2, [pc, #128]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d015      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020de:	4918      	ldr	r1, [pc, #96]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020ee:	d105      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020f0:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4a12      	ldr	r2, [pc, #72]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d015      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002108:	4b0d      	ldr	r3, [pc, #52]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002116:	490a      	ldr	r1, [pc, #40]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002122:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002126:	d105      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002128:	4b05      	ldr	r3, [pc, #20]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a04      	ldr	r2, [pc, #16]	@ (8002140 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800212e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002132:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002134:	7cbb      	ldrb	r3, [r7, #18]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000

08002144 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e042      	b.n	80021dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215c:	2b00      	cmp	r3, #0
 800215e:	d106      	bne.n	800216e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7fe fc77 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2224      	movs	r2, #36	@ 0x24
 8002172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0201 	bic.w	r2, r2, #1
 8002184:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fb82 	bl	8002898 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f8b3 	bl	8002300 <UART_SetConfig>
 800219a:	4603      	mov	r3, r0
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e01b      	b.n	80021dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80021b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80021c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f042 0201 	orr.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fc01 	bl	80029dc <UART_CheckIdleState>
 80021da:	4603      	mov	r3, r0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	@ 0x28
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	603b      	str	r3, [r7, #0]
 80021f0:	4613      	mov	r3, r2
 80021f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fa:	2b20      	cmp	r3, #32
 80021fc:	d17b      	bne.n	80022f6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <HAL_UART_Transmit+0x26>
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e074      	b.n	80022f8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2221      	movs	r2, #33	@ 0x21
 800221a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800221e:	f7fe fd03 	bl	8000c28 <HAL_GetTick>
 8002222:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	88fa      	ldrh	r2, [r7, #6]
 8002228:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	88fa      	ldrh	r2, [r7, #6]
 8002230:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800223c:	d108      	bne.n	8002250 <HAL_UART_Transmit+0x6c>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d104      	bne.n	8002250 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	e003      	b.n	8002258 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002258:	e030      	b.n	80022bc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2200      	movs	r2, #0
 8002262:	2180      	movs	r1, #128	@ 0x80
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	f000 fc63 	bl	8002b30 <UART_WaitOnFlagUntilTimeout>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2220      	movs	r2, #32
 8002274:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e03d      	b.n	80022f8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10b      	bne.n	800229a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002290:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	3302      	adds	r3, #2
 8002296:	61bb      	str	r3, [r7, #24]
 8002298:	e007      	b.n	80022aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	3301      	adds	r3, #1
 80022a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1c8      	bne.n	800225a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2200      	movs	r2, #0
 80022d0:	2140      	movs	r1, #64	@ 0x40
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 fc2c 	bl	8002b30 <UART_WaitOnFlagUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e006      	b.n	80022f8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2220      	movs	r2, #32
 80022ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	e000      	b.n	80022f8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80022f6:	2302      	movs	r3, #2
  }
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3720      	adds	r7, #32
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002304:	b08c      	sub	sp, #48	@ 0x30
 8002306:	af00      	add	r7, sp, #0
 8002308:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	431a      	orrs	r2, r3
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	431a      	orrs	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	4313      	orrs	r3, r2
 8002326:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	4bab      	ldr	r3, [pc, #684]	@ (80025dc <UART_SetConfig+0x2dc>)
 8002330:	4013      	ands	r3, r2
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002338:	430b      	orrs	r3, r1
 800233a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4aa0      	ldr	r2, [pc, #640]	@ (80025e0 <UART_SetConfig+0x2e0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d004      	beq.n	800236c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002368:	4313      	orrs	r3, r2
 800236a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002376:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002380:	430b      	orrs	r3, r1
 8002382:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238a:	f023 010f 	bic.w	r1, r3, #15
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a91      	ldr	r2, [pc, #580]	@ (80025e4 <UART_SetConfig+0x2e4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d125      	bne.n	80023f0 <UART_SetConfig+0xf0>
 80023a4:	4b90      	ldr	r3, [pc, #576]	@ (80025e8 <UART_SetConfig+0x2e8>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d81a      	bhi.n	80023e8 <UART_SetConfig+0xe8>
 80023b2:	a201      	add	r2, pc, #4	@ (adr r2, 80023b8 <UART_SetConfig+0xb8>)
 80023b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b8:	080023c9 	.word	0x080023c9
 80023bc:	080023d9 	.word	0x080023d9
 80023c0:	080023d1 	.word	0x080023d1
 80023c4:	080023e1 	.word	0x080023e1
 80023c8:	2301      	movs	r3, #1
 80023ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023ce:	e0d6      	b.n	800257e <UART_SetConfig+0x27e>
 80023d0:	2302      	movs	r3, #2
 80023d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023d6:	e0d2      	b.n	800257e <UART_SetConfig+0x27e>
 80023d8:	2304      	movs	r3, #4
 80023da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023de:	e0ce      	b.n	800257e <UART_SetConfig+0x27e>
 80023e0:	2308      	movs	r3, #8
 80023e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023e6:	e0ca      	b.n	800257e <UART_SetConfig+0x27e>
 80023e8:	2310      	movs	r3, #16
 80023ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80023ee:	e0c6      	b.n	800257e <UART_SetConfig+0x27e>
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a7d      	ldr	r2, [pc, #500]	@ (80025ec <UART_SetConfig+0x2ec>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d138      	bne.n	800246c <UART_SetConfig+0x16c>
 80023fa:	4b7b      	ldr	r3, [pc, #492]	@ (80025e8 <UART_SetConfig+0x2e8>)
 80023fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b0c      	cmp	r3, #12
 8002406:	d82d      	bhi.n	8002464 <UART_SetConfig+0x164>
 8002408:	a201      	add	r2, pc, #4	@ (adr r2, 8002410 <UART_SetConfig+0x110>)
 800240a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240e:	bf00      	nop
 8002410:	08002445 	.word	0x08002445
 8002414:	08002465 	.word	0x08002465
 8002418:	08002465 	.word	0x08002465
 800241c:	08002465 	.word	0x08002465
 8002420:	08002455 	.word	0x08002455
 8002424:	08002465 	.word	0x08002465
 8002428:	08002465 	.word	0x08002465
 800242c:	08002465 	.word	0x08002465
 8002430:	0800244d 	.word	0x0800244d
 8002434:	08002465 	.word	0x08002465
 8002438:	08002465 	.word	0x08002465
 800243c:	08002465 	.word	0x08002465
 8002440:	0800245d 	.word	0x0800245d
 8002444:	2300      	movs	r3, #0
 8002446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800244a:	e098      	b.n	800257e <UART_SetConfig+0x27e>
 800244c:	2302      	movs	r3, #2
 800244e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002452:	e094      	b.n	800257e <UART_SetConfig+0x27e>
 8002454:	2304      	movs	r3, #4
 8002456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800245a:	e090      	b.n	800257e <UART_SetConfig+0x27e>
 800245c:	2308      	movs	r3, #8
 800245e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002462:	e08c      	b.n	800257e <UART_SetConfig+0x27e>
 8002464:	2310      	movs	r3, #16
 8002466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800246a:	e088      	b.n	800257e <UART_SetConfig+0x27e>
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a5f      	ldr	r2, [pc, #380]	@ (80025f0 <UART_SetConfig+0x2f0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d125      	bne.n	80024c2 <UART_SetConfig+0x1c2>
 8002476:	4b5c      	ldr	r3, [pc, #368]	@ (80025e8 <UART_SetConfig+0x2e8>)
 8002478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002480:	2b30      	cmp	r3, #48	@ 0x30
 8002482:	d016      	beq.n	80024b2 <UART_SetConfig+0x1b2>
 8002484:	2b30      	cmp	r3, #48	@ 0x30
 8002486:	d818      	bhi.n	80024ba <UART_SetConfig+0x1ba>
 8002488:	2b20      	cmp	r3, #32
 800248a:	d00a      	beq.n	80024a2 <UART_SetConfig+0x1a2>
 800248c:	2b20      	cmp	r3, #32
 800248e:	d814      	bhi.n	80024ba <UART_SetConfig+0x1ba>
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <UART_SetConfig+0x19a>
 8002494:	2b10      	cmp	r3, #16
 8002496:	d008      	beq.n	80024aa <UART_SetConfig+0x1aa>
 8002498:	e00f      	b.n	80024ba <UART_SetConfig+0x1ba>
 800249a:	2300      	movs	r3, #0
 800249c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024a0:	e06d      	b.n	800257e <UART_SetConfig+0x27e>
 80024a2:	2302      	movs	r3, #2
 80024a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024a8:	e069      	b.n	800257e <UART_SetConfig+0x27e>
 80024aa:	2304      	movs	r3, #4
 80024ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024b0:	e065      	b.n	800257e <UART_SetConfig+0x27e>
 80024b2:	2308      	movs	r3, #8
 80024b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024b8:	e061      	b.n	800257e <UART_SetConfig+0x27e>
 80024ba:	2310      	movs	r3, #16
 80024bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024c0:	e05d      	b.n	800257e <UART_SetConfig+0x27e>
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a4b      	ldr	r2, [pc, #300]	@ (80025f4 <UART_SetConfig+0x2f4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d125      	bne.n	8002518 <UART_SetConfig+0x218>
 80024cc:	4b46      	ldr	r3, [pc, #280]	@ (80025e8 <UART_SetConfig+0x2e8>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80024d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80024d8:	d016      	beq.n	8002508 <UART_SetConfig+0x208>
 80024da:	2bc0      	cmp	r3, #192	@ 0xc0
 80024dc:	d818      	bhi.n	8002510 <UART_SetConfig+0x210>
 80024de:	2b80      	cmp	r3, #128	@ 0x80
 80024e0:	d00a      	beq.n	80024f8 <UART_SetConfig+0x1f8>
 80024e2:	2b80      	cmp	r3, #128	@ 0x80
 80024e4:	d814      	bhi.n	8002510 <UART_SetConfig+0x210>
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <UART_SetConfig+0x1f0>
 80024ea:	2b40      	cmp	r3, #64	@ 0x40
 80024ec:	d008      	beq.n	8002500 <UART_SetConfig+0x200>
 80024ee:	e00f      	b.n	8002510 <UART_SetConfig+0x210>
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024f6:	e042      	b.n	800257e <UART_SetConfig+0x27e>
 80024f8:	2302      	movs	r3, #2
 80024fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024fe:	e03e      	b.n	800257e <UART_SetConfig+0x27e>
 8002500:	2304      	movs	r3, #4
 8002502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002506:	e03a      	b.n	800257e <UART_SetConfig+0x27e>
 8002508:	2308      	movs	r3, #8
 800250a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800250e:	e036      	b.n	800257e <UART_SetConfig+0x27e>
 8002510:	2310      	movs	r3, #16
 8002512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002516:	e032      	b.n	800257e <UART_SetConfig+0x27e>
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a30      	ldr	r2, [pc, #192]	@ (80025e0 <UART_SetConfig+0x2e0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d12a      	bne.n	8002578 <UART_SetConfig+0x278>
 8002522:	4b31      	ldr	r3, [pc, #196]	@ (80025e8 <UART_SetConfig+0x2e8>)
 8002524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002528:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800252c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002530:	d01a      	beq.n	8002568 <UART_SetConfig+0x268>
 8002532:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002536:	d81b      	bhi.n	8002570 <UART_SetConfig+0x270>
 8002538:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800253c:	d00c      	beq.n	8002558 <UART_SetConfig+0x258>
 800253e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002542:	d815      	bhi.n	8002570 <UART_SetConfig+0x270>
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <UART_SetConfig+0x250>
 8002548:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800254c:	d008      	beq.n	8002560 <UART_SetConfig+0x260>
 800254e:	e00f      	b.n	8002570 <UART_SetConfig+0x270>
 8002550:	2300      	movs	r3, #0
 8002552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002556:	e012      	b.n	800257e <UART_SetConfig+0x27e>
 8002558:	2302      	movs	r3, #2
 800255a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800255e:	e00e      	b.n	800257e <UART_SetConfig+0x27e>
 8002560:	2304      	movs	r3, #4
 8002562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002566:	e00a      	b.n	800257e <UART_SetConfig+0x27e>
 8002568:	2308      	movs	r3, #8
 800256a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800256e:	e006      	b.n	800257e <UART_SetConfig+0x27e>
 8002570:	2310      	movs	r3, #16
 8002572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002576:	e002      	b.n	800257e <UART_SetConfig+0x27e>
 8002578:	2310      	movs	r3, #16
 800257a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a17      	ldr	r2, [pc, #92]	@ (80025e0 <UART_SetConfig+0x2e0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	f040 80a8 	bne.w	80026da <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800258a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800258e:	2b08      	cmp	r3, #8
 8002590:	d834      	bhi.n	80025fc <UART_SetConfig+0x2fc>
 8002592:	a201      	add	r2, pc, #4	@ (adr r2, 8002598 <UART_SetConfig+0x298>)
 8002594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002598:	080025bd 	.word	0x080025bd
 800259c:	080025fd 	.word	0x080025fd
 80025a0:	080025c5 	.word	0x080025c5
 80025a4:	080025fd 	.word	0x080025fd
 80025a8:	080025cb 	.word	0x080025cb
 80025ac:	080025fd 	.word	0x080025fd
 80025b0:	080025fd 	.word	0x080025fd
 80025b4:	080025fd 	.word	0x080025fd
 80025b8:	080025d3 	.word	0x080025d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025bc:	f7ff fb60 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 80025c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80025c2:	e021      	b.n	8002608 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025c4:	4b0c      	ldr	r3, [pc, #48]	@ (80025f8 <UART_SetConfig+0x2f8>)
 80025c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80025c8:	e01e      	b.n	8002608 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025ca:	f7ff faeb 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 80025ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80025d0:	e01a      	b.n	8002608 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80025d8:	e016      	b.n	8002608 <UART_SetConfig+0x308>
 80025da:	bf00      	nop
 80025dc:	cfff69f3 	.word	0xcfff69f3
 80025e0:	40008000 	.word	0x40008000
 80025e4:	40013800 	.word	0x40013800
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40004400 	.word	0x40004400
 80025f0:	40004800 	.word	0x40004800
 80025f4:	40004c00 	.word	0x40004c00
 80025f8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002606:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 812a 	beq.w	8002864 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002614:	4a9e      	ldr	r2, [pc, #632]	@ (8002890 <UART_SetConfig+0x590>)
 8002616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800261a:	461a      	mov	r2, r3
 800261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002622:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	429a      	cmp	r2, r3
 8002632:	d305      	bcc.n	8002640 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	429a      	cmp	r2, r3
 800263e:	d903      	bls.n	8002648 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002646:	e10d      	b.n	8002864 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	2200      	movs	r2, #0
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	60fa      	str	r2, [r7, #12]
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	4a8e      	ldr	r2, [pc, #568]	@ (8002890 <UART_SetConfig+0x590>)
 8002656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800265a:	b29b      	uxth	r3, r3
 800265c:	2200      	movs	r2, #0
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002666:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800266a:	f7fd fdd9 	bl	8000220 <__aeabi_uldivmod>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4610      	mov	r0, r2
 8002674:	4619      	mov	r1, r3
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	020b      	lsls	r3, r1, #8
 8002680:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002684:	0202      	lsls	r2, r0, #8
 8002686:	6979      	ldr	r1, [r7, #20]
 8002688:	6849      	ldr	r1, [r1, #4]
 800268a:	0849      	lsrs	r1, r1, #1
 800268c:	2000      	movs	r0, #0
 800268e:	460c      	mov	r4, r1
 8002690:	4605      	mov	r5, r0
 8002692:	eb12 0804 	adds.w	r8, r2, r4
 8002696:	eb43 0905 	adc.w	r9, r3, r5
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	469a      	mov	sl, r3
 80026a2:	4693      	mov	fp, r2
 80026a4:	4652      	mov	r2, sl
 80026a6:	465b      	mov	r3, fp
 80026a8:	4640      	mov	r0, r8
 80026aa:	4649      	mov	r1, r9
 80026ac:	f7fd fdb8 	bl	8000220 <__aeabi_uldivmod>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4613      	mov	r3, r2
 80026b6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026be:	d308      	bcc.n	80026d2 <UART_SetConfig+0x3d2>
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026c6:	d204      	bcs.n	80026d2 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6a3a      	ldr	r2, [r7, #32]
 80026ce:	60da      	str	r2, [r3, #12]
 80026d0:	e0c8      	b.n	8002864 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80026d8:	e0c4      	b.n	8002864 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026e2:	d167      	bne.n	80027b4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80026e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d828      	bhi.n	800273e <UART_SetConfig+0x43e>
 80026ec:	a201      	add	r2, pc, #4	@ (adr r2, 80026f4 <UART_SetConfig+0x3f4>)
 80026ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f2:	bf00      	nop
 80026f4:	08002719 	.word	0x08002719
 80026f8:	08002721 	.word	0x08002721
 80026fc:	08002729 	.word	0x08002729
 8002700:	0800273f 	.word	0x0800273f
 8002704:	0800272f 	.word	0x0800272f
 8002708:	0800273f 	.word	0x0800273f
 800270c:	0800273f 	.word	0x0800273f
 8002710:	0800273f 	.word	0x0800273f
 8002714:	08002737 	.word	0x08002737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002718:	f7ff fab2 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 800271c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800271e:	e014      	b.n	800274a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002720:	f7ff fac4 	bl	8001cac <HAL_RCC_GetPCLK2Freq>
 8002724:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002726:	e010      	b.n	800274a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002728:	4b5a      	ldr	r3, [pc, #360]	@ (8002894 <UART_SetConfig+0x594>)
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800272c:	e00d      	b.n	800274a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800272e:	f7ff fa39 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8002732:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002734:	e009      	b.n	800274a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800273a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800273c:	e005      	b.n	800274a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002748:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8089 	beq.w	8002864 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	4a4e      	ldr	r2, [pc, #312]	@ (8002890 <UART_SetConfig+0x590>)
 8002758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800275c:	461a      	mov	r2, r3
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	fbb3 f3f2 	udiv	r3, r3, r2
 8002764:	005a      	lsls	r2, r3, #1
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	085b      	lsrs	r3, r3, #1
 800276c:	441a      	add	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	fbb2 f3f3 	udiv	r3, r2, r3
 8002776:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	2b0f      	cmp	r3, #15
 800277c:	d916      	bls.n	80027ac <UART_SetConfig+0x4ac>
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002784:	d212      	bcs.n	80027ac <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	b29b      	uxth	r3, r3
 800278a:	f023 030f 	bic.w	r3, r3, #15
 800278e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	b29b      	uxth	r3, r3
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	b29a      	uxth	r2, r3
 800279c:	8bfb      	ldrh	r3, [r7, #30]
 800279e:	4313      	orrs	r3, r2
 80027a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	8bfa      	ldrh	r2, [r7, #30]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	e05b      	b.n	8002864 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80027b2:	e057      	b.n	8002864 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027b4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d828      	bhi.n	800280e <UART_SetConfig+0x50e>
 80027bc:	a201      	add	r2, pc, #4	@ (adr r2, 80027c4 <UART_SetConfig+0x4c4>)
 80027be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c2:	bf00      	nop
 80027c4:	080027e9 	.word	0x080027e9
 80027c8:	080027f1 	.word	0x080027f1
 80027cc:	080027f9 	.word	0x080027f9
 80027d0:	0800280f 	.word	0x0800280f
 80027d4:	080027ff 	.word	0x080027ff
 80027d8:	0800280f 	.word	0x0800280f
 80027dc:	0800280f 	.word	0x0800280f
 80027e0:	0800280f 	.word	0x0800280f
 80027e4:	08002807 	.word	0x08002807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027e8:	f7ff fa4a 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 80027ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80027ee:	e014      	b.n	800281a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027f0:	f7ff fa5c 	bl	8001cac <HAL_RCC_GetPCLK2Freq>
 80027f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80027f6:	e010      	b.n	800281a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027f8:	4b26      	ldr	r3, [pc, #152]	@ (8002894 <UART_SetConfig+0x594>)
 80027fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80027fc:	e00d      	b.n	800281a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027fe:	f7ff f9d1 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8002802:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002804:	e009      	b.n	800281a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800280a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800280c:	e005      	b.n	800281a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002818:	bf00      	nop
    }

    if (pclk != 0U)
 800281a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281c:	2b00      	cmp	r3, #0
 800281e:	d021      	beq.n	8002864 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	4a1a      	ldr	r2, [pc, #104]	@ (8002890 <UART_SetConfig+0x590>)
 8002826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800282a:	461a      	mov	r2, r3
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	085b      	lsrs	r3, r3, #1
 8002838:	441a      	add	r2, r3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	2b0f      	cmp	r3, #15
 8002848:	d909      	bls.n	800285e <UART_SetConfig+0x55e>
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002850:	d205      	bcs.n	800285e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	b29a      	uxth	r2, r3
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60da      	str	r2, [r3, #12]
 800285c:	e002      	b.n	8002864 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2201      	movs	r2, #1
 8002868:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2201      	movs	r2, #1
 8002870:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2200      	movs	r2, #0
 8002878:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2200      	movs	r2, #0
 800287e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002880:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002884:	4618      	mov	r0, r3
 8002886:	3730      	adds	r7, #48	@ 0x30
 8002888:	46bd      	mov	sp, r7
 800288a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800288e:	bf00      	nop
 8002890:	080069b8 	.word	0x080069b8
 8002894:	00f42400 	.word	0x00f42400

08002898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00a      	beq.n	80028c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292c:	f003 0310 	and.w	r3, r3, #16
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01a      	beq.n	80029ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002992:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002996:	d10a      	bne.n	80029ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	605a      	str	r2, [r3, #4]
  }
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b098      	sub	sp, #96	@ 0x60
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029ec:	f7fe f91c 	bl	8000c28 <HAL_GetTick>
 80029f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d12f      	bne.n	8002a60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f88e 	bl	8002b30 <UART_WaitOnFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d022      	beq.n	8002a60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a22:	e853 3f00 	ldrex	r3, [r3]
 8002a26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a38:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a3a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a40:	e841 2300 	strex	r3, r2, [r1]
 8002a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e6      	bne.n	8002a1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e063      	b.n	8002b28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d149      	bne.n	8002b02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a6e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a76:	2200      	movs	r2, #0
 8002a78:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f857 	bl	8002b30 <UART_WaitOnFlagUntilTimeout>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d03c      	beq.n	8002b02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	e853 3f00 	ldrex	r3, [r3]
 8002a94:	623b      	str	r3, [r7, #32]
   return(result);
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002aa6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002aa8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002aac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aae:	e841 2300 	strex	r3, r2, [r1]
 8002ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1e6      	bne.n	8002a88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3308      	adds	r3, #8
 8002ac0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	e853 3f00 	ldrex	r3, [r3]
 8002ac8:	60fb      	str	r3, [r7, #12]
   return(result);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	3308      	adds	r3, #8
 8002ad8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ada:	61fa      	str	r2, [r7, #28]
 8002adc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ade:	69b9      	ldr	r1, [r7, #24]
 8002ae0:	69fa      	ldr	r2, [r7, #28]
 8002ae2:	e841 2300 	strex	r3, r2, [r1]
 8002ae6:	617b      	str	r3, [r7, #20]
   return(result);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1e5      	bne.n	8002aba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2220      	movs	r2, #32
 8002af2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e012      	b.n	8002b28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3758      	adds	r7, #88	@ 0x58
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b40:	e04f      	b.n	8002be2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b48:	d04b      	beq.n	8002be2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4a:	f7fe f86d 	bl	8000c28 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d302      	bcc.n	8002b60 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e04e      	b.n	8002c02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d037      	beq.n	8002be2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b80      	cmp	r3, #128	@ 0x80
 8002b76:	d034      	beq.n	8002be2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b40      	cmp	r3, #64	@ 0x40
 8002b7c:	d031      	beq.n	8002be2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d110      	bne.n	8002bae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2208      	movs	r2, #8
 8002b92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f838 	bl	8002c0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2208      	movs	r2, #8
 8002b9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e029      	b.n	8002c02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bbc:	d111      	bne.n	8002be2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002bc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f81e 	bl	8002c0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e00f      	b.n	8002c02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69da      	ldr	r2, [r3, #28]
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4013      	ands	r3, r2
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	bf0c      	ite	eq
 8002bf2:	2301      	moveq	r3, #1
 8002bf4:	2300      	movne	r3, #0
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d0a0      	beq.n	8002b42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b095      	sub	sp, #84	@ 0x54
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c1a:	e853 3f00 	ldrex	r3, [r3]
 8002c1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c30:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c38:	e841 2300 	strex	r3, r2, [r1]
 8002c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1e6      	bne.n	8002c12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3308      	adds	r3, #8
 8002c4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	e853 3f00 	ldrex	r3, [r3]
 8002c52:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3308      	adds	r3, #8
 8002c66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c70:	e841 2300 	strex	r3, r2, [r1]
 8002c74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1e3      	bne.n	8002c44 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d118      	bne.n	8002cb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	e853 3f00 	ldrex	r3, [r3]
 8002c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f023 0310 	bic.w	r3, r3, #16
 8002c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca6:	6979      	ldr	r1, [r7, #20]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	e841 2300 	strex	r3, r2, [r1]
 8002cae:	613b      	str	r3, [r7, #16]
   return(result);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1e6      	bne.n	8002c84 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002cca:	bf00      	nop
 8002ccc:	3754      	adds	r7, #84	@ 0x54
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b085      	sub	sp, #20
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_UARTEx_DisableFifoMode+0x16>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e027      	b.n	8002d3c <HAL_UARTEx_DisableFifoMode+0x66>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2224      	movs	r2, #36	@ 0x24
 8002cf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8002d1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e02d      	b.n	8002dbc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2224      	movs	r2, #36	@ 0x24
 8002d6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0201 	bic.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f84f 	bl	8002e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e02d      	b.n	8002e38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2224      	movs	r2, #36	@ 0x24
 8002de8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0201 	bic.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f811 	bl	8002e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d108      	bne.n	8002e62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002e60:	e031      	b.n	8002ec6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002e62:	2308      	movs	r3, #8
 8002e64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002e66:	2308      	movs	r3, #8
 8002e68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	0e5b      	lsrs	r3, r3, #25
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	0f5b      	lsrs	r3, r3, #29
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e8a:	7bbb      	ldrb	r3, [r7, #14]
 8002e8c:	7b3a      	ldrb	r2, [r7, #12]
 8002e8e:	4911      	ldr	r1, [pc, #68]	@ (8002ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8002e90:	5c8a      	ldrb	r2, [r1, r2]
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002e96:	7b3a      	ldrb	r2, [r7, #12]
 8002e98:	490f      	ldr	r1, [pc, #60]	@ (8002ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8002e9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002e9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	7b7a      	ldrb	r2, [r7, #13]
 8002eac:	4909      	ldr	r1, [pc, #36]	@ (8002ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8002eae:	5c8a      	ldrb	r2, [r1, r2]
 8002eb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002eb4:	7b7a      	ldrb	r2, [r7, #13]
 8002eb6:	4908      	ldr	r1, [pc, #32]	@ (8002ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8002eb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002eba:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8002ec6:	bf00      	nop
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	080069d0 	.word	0x080069d0
 8002ed8:	080069d8 	.word	0x080069d8

08002edc <__NVIC_SetPriority>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	6039      	str	r1, [r7, #0]
 8002ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	db0a      	blt.n	8002f06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	490c      	ldr	r1, [pc, #48]	@ (8002f28 <__NVIC_SetPriority+0x4c>)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	0112      	lsls	r2, r2, #4
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	440b      	add	r3, r1
 8002f00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002f04:	e00a      	b.n	8002f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	4908      	ldr	r1, [pc, #32]	@ (8002f2c <__NVIC_SetPriority+0x50>)
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	f003 030f 	and.w	r3, r3, #15
 8002f12:	3b04      	subs	r3, #4
 8002f14:	0112      	lsls	r2, r2, #4
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	440b      	add	r3, r1
 8002f1a:	761a      	strb	r2, [r3, #24]
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000e100 	.word	0xe000e100
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002f34:	2100      	movs	r1, #0
 8002f36:	f06f 0004 	mvn.w	r0, #4
 8002f3a:	f7ff ffcf 	bl	8002edc <__NVIC_SetPriority>
#endif
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f4a:	f3ef 8305 	mrs	r3, IPSR
 8002f4e:	603b      	str	r3, [r7, #0]
  return(result);
 8002f50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002f56:	f06f 0305 	mvn.w	r3, #5
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	e00c      	b.n	8002f78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f88 <osKernelInitialize+0x44>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d105      	bne.n	8002f72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002f66:	4b08      	ldr	r3, [pc, #32]	@ (8002f88 <osKernelInitialize+0x44>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	607b      	str	r3, [r7, #4]
 8002f70:	e002      	b.n	8002f78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002f72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f78:	687b      	ldr	r3, [r7, #4]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20000138 	.word	0x20000138

08002f8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f92:	f3ef 8305 	mrs	r3, IPSR
 8002f96:	603b      	str	r3, [r7, #0]
  return(result);
 8002f98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002f9e:	f06f 0305 	mvn.w	r3, #5
 8002fa2:	607b      	str	r3, [r7, #4]
 8002fa4:	e010      	b.n	8002fc8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <osKernelStart+0x48>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d109      	bne.n	8002fc2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002fae:	f7ff ffbf 	bl	8002f30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002fb2:	4b08      	ldr	r3, [pc, #32]	@ (8002fd4 <osKernelStart+0x48>)
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002fb8:	f001 f9de 	bl	8004378 <vTaskStartScheduler>
      stat = osOK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	e002      	b.n	8002fc8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002fc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002fc8:	687b      	ldr	r3, [r7, #4]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000138 	.word	0x20000138

08002fd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08e      	sub	sp, #56	@ 0x38
 8002fdc:	af04      	add	r7, sp, #16
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fe8:	f3ef 8305 	mrs	r3, IPSR
 8002fec:	617b      	str	r3, [r7, #20]
  return(result);
 8002fee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d17e      	bne.n	80030f2 <osThreadNew+0x11a>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d07b      	beq.n	80030f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002ffa:	2380      	movs	r3, #128	@ 0x80
 8002ffc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002ffe:	2318      	movs	r3, #24
 8003000:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003002:	2300      	movs	r3, #0
 8003004:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003006:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800300a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d045      	beq.n	800309e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <osThreadNew+0x48>
        name = attr->name;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <osThreadNew+0x6e>
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	2b38      	cmp	r3, #56	@ 0x38
 8003038:	d805      	bhi.n	8003046 <osThreadNew+0x6e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <osThreadNew+0x72>
        return (NULL);
 8003046:	2300      	movs	r3, #0
 8003048:	e054      	b.n	80030f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	089b      	lsrs	r3, r3, #2
 8003058:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00e      	beq.n	8003080 <osThreadNew+0xa8>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	2b5b      	cmp	r3, #91	@ 0x5b
 8003068:	d90a      	bls.n	8003080 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <osThreadNew+0xa8>
        mem = 1;
 800307a:	2301      	movs	r3, #1
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e010      	b.n	80030a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10c      	bne.n	80030a2 <osThreadNew+0xca>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d108      	bne.n	80030a2 <osThreadNew+0xca>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d104      	bne.n	80030a2 <osThreadNew+0xca>
          mem = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	61bb      	str	r3, [r7, #24]
 800309c:	e001      	b.n	80030a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d110      	bne.n	80030ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80030b0:	9202      	str	r2, [sp, #8]
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	6a3a      	ldr	r2, [r7, #32]
 80030bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 ff7e 	bl	8003fc0 <xTaskCreateStatic>
 80030c4:	4603      	mov	r3, r0
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	e013      	b.n	80030f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d110      	bne.n	80030f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	f107 0310 	add.w	r3, r7, #16
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 ffcc 	bl	8004080 <xTaskCreate>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d001      	beq.n	80030f2 <osThreadNew+0x11a>
            hTask = NULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80030f2:	693b      	ldr	r3, [r7, #16]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3728      	adds	r7, #40	@ 0x28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003104:	f3ef 8305 	mrs	r3, IPSR
 8003108:	60bb      	str	r3, [r7, #8]
  return(result);
 800310a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <osDelay+0x1c>
    stat = osErrorISR;
 8003110:	f06f 0305 	mvn.w	r3, #5
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	e007      	b.n	8003128 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f001 f8f2 	bl	800430c <vTaskDelay>
    }
  }

  return (stat);
 8003128:	68fb      	ldr	r3, [r7, #12]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4a07      	ldr	r2, [pc, #28]	@ (8003160 <vApplicationGetIdleTaskMemory+0x2c>)
 8003144:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	4a06      	ldr	r2, [pc, #24]	@ (8003164 <vApplicationGetIdleTaskMemory+0x30>)
 800314a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2280      	movs	r2, #128	@ 0x80
 8003150:	601a      	str	r2, [r3, #0]
}
 8003152:	bf00      	nop
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	2000013c 	.word	0x2000013c
 8003164:	20000198 	.word	0x20000198

08003168 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4a07      	ldr	r2, [pc, #28]	@ (8003194 <vApplicationGetTimerTaskMemory+0x2c>)
 8003178:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	4a06      	ldr	r2, [pc, #24]	@ (8003198 <vApplicationGetTimerTaskMemory+0x30>)
 800317e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003186:	601a      	str	r2, [r3, #0]
}
 8003188:	bf00      	nop
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	20000398 	.word	0x20000398
 8003198:	200003f4 	.word	0x200003f4

0800319c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f103 0208 	add.w	r2, r3, #8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f103 0208 	add.w	r2, r3, #8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f103 0208 	add.w	r2, r3, #8
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031f6:	b480      	push	{r7}
 80031f8:	b085      	sub	sp, #20
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	601a      	str	r2, [r3, #0]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800323e:	b480      	push	{r7}
 8003240:	b085      	sub	sp, #20
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003254:	d103      	bne.n	800325e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	e00c      	b.n	8003278 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3308      	adds	r3, #8
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	e002      	b.n	800326c <vListInsert+0x2e>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	429a      	cmp	r2, r3
 8003276:	d2f6      	bcs.n	8003266 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	601a      	str	r2, [r3, #0]
}
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6892      	ldr	r2, [r2, #8]
 80032c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6852      	ldr	r2, [r2, #4]
 80032d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d103      	bne.n	80032e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	1e5a      	subs	r2, r3, #1
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10b      	bne.n	8003330 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331c:	f383 8811 	msr	BASEPRI, r3
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800332a:	bf00      	nop
 800332c:	bf00      	nop
 800332e:	e7fd      	b.n	800332c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003330:	f002 fada 	bl	80058e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333c:	68f9      	ldr	r1, [r7, #12]
 800333e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	441a      	add	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003360:	3b01      	subs	r3, #1
 8003362:	68f9      	ldr	r1, [r7, #12]
 8003364:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	441a      	add	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	22ff      	movs	r2, #255	@ 0xff
 8003374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	22ff      	movs	r2, #255	@ 0xff
 800337c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d114      	bne.n	80033b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01a      	beq.n	80033c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3310      	adds	r3, #16
 8003392:	4618      	mov	r0, r3
 8003394:	f001 fa7e 	bl	8004894 <xTaskRemoveFromEventList>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d012      	beq.n	80033c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800339e:	4b0d      	ldr	r3, [pc, #52]	@ (80033d4 <xQueueGenericReset+0xd0>)
 80033a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	e009      	b.n	80033c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3310      	adds	r3, #16
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fef1 	bl	800319c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	3324      	adds	r3, #36	@ 0x24
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff feec 	bl	800319c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80033c4:	f002 fac2 	bl	800594c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80033c8:	2301      	movs	r3, #1
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	e000ed04 	.word	0xe000ed04

080033d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08e      	sub	sp, #56	@ 0x38
 80033dc:	af02      	add	r7, sp, #8
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
 80033e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80033ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80033fe:	bf00      	nop
 8003400:	bf00      	nop
 8003402:	e7fd      	b.n	8003400 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10b      	bne.n	8003422 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800341c:	bf00      	nop
 800341e:	bf00      	nop
 8003420:	e7fd      	b.n	800341e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <xQueueGenericCreateStatic+0x56>
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <xQueueGenericCreateStatic+0x5a>
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <xQueueGenericCreateStatic+0x5c>
 8003432:	2300      	movs	r3, #0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10b      	bne.n	8003450 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800343c:	f383 8811 	msr	BASEPRI, r3
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	623b      	str	r3, [r7, #32]
}
 800344a:	bf00      	nop
 800344c:	bf00      	nop
 800344e:	e7fd      	b.n	800344c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d102      	bne.n	800345c <xQueueGenericCreateStatic+0x84>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <xQueueGenericCreateStatic+0x88>
 800345c:	2301      	movs	r3, #1
 800345e:	e000      	b.n	8003462 <xQueueGenericCreateStatic+0x8a>
 8003460:	2300      	movs	r3, #0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	61fb      	str	r3, [r7, #28]
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	e7fd      	b.n	800347a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800347e:	2350      	movs	r3, #80	@ 0x50
 8003480:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b50      	cmp	r3, #80	@ 0x50
 8003486:	d00b      	beq.n	80034a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	61bb      	str	r3, [r7, #24]
}
 800349a:	bf00      	nop
 800349c:	bf00      	nop
 800349e:	e7fd      	b.n	800349c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80034a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80034a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00d      	beq.n	80034c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80034ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80034b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80034b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	4613      	mov	r3, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f840 	bl	8003548 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80034c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3730      	adds	r7, #48	@ 0x30
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b08a      	sub	sp, #40	@ 0x28
 80034d6:	af02      	add	r7, sp, #8
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	4613      	mov	r3, r2
 80034de:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10b      	bne.n	80034fe <xQueueGenericCreate+0x2c>
	__asm volatile
 80034e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	613b      	str	r3, [r7, #16]
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	e7fd      	b.n	80034fa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	fb02 f303 	mul.w	r3, r2, r3
 8003506:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	3350      	adds	r3, #80	@ 0x50
 800350c:	4618      	mov	r0, r3
 800350e:	f002 fb0d 	bl	8005b2c <pvPortMalloc>
 8003512:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d011      	beq.n	800353e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	3350      	adds	r3, #80	@ 0x50
 8003522:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800352c:	79fa      	ldrb	r2, [r7, #7]
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	4613      	mov	r3, r2
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 f805 	bl	8003548 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800353e:	69bb      	ldr	r3, [r7, #24]
	}
 8003540:	4618      	mov	r0, r3
 8003542:	3720      	adds	r7, #32
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d103      	bne.n	8003564 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	e002      	b.n	800356a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003576:	2101      	movs	r1, #1
 8003578:	69b8      	ldr	r0, [r7, #24]
 800357a:	f7ff fec3 	bl	8003304 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	78fa      	ldrb	r2, [r7, #3]
 8003582:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003586:	bf00      	nop
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08e      	sub	sp, #56	@ 0x38
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800359e:	2300      	movs	r3, #0
 80035a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80035a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10b      	bne.n	80035c4 <xQueueGenericSend+0x34>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80035be:	bf00      	nop
 80035c0:	bf00      	nop
 80035c2:	e7fd      	b.n	80035c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d103      	bne.n	80035d2 <xQueueGenericSend+0x42>
 80035ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <xQueueGenericSend+0x46>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <xQueueGenericSend+0x48>
 80035d6:	2300      	movs	r3, #0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10b      	bne.n	80035f4 <xQueueGenericSend+0x64>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80035ee:	bf00      	nop
 80035f0:	bf00      	nop
 80035f2:	e7fd      	b.n	80035f0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d103      	bne.n	8003602 <xQueueGenericSend+0x72>
 80035fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d101      	bne.n	8003606 <xQueueGenericSend+0x76>
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <xQueueGenericSend+0x78>
 8003606:	2300      	movs	r3, #0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10b      	bne.n	8003624 <xQueueGenericSend+0x94>
	__asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	623b      	str	r3, [r7, #32]
}
 800361e:	bf00      	nop
 8003620:	bf00      	nop
 8003622:	e7fd      	b.n	8003620 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003624:	f001 faf6 	bl	8004c14 <xTaskGetSchedulerState>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d102      	bne.n	8003634 <xQueueGenericSend+0xa4>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <xQueueGenericSend+0xa8>
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <xQueueGenericSend+0xaa>
 8003638:	2300      	movs	r3, #0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10b      	bne.n	8003656 <xQueueGenericSend+0xc6>
	__asm volatile
 800363e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	61fb      	str	r3, [r7, #28]
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	e7fd      	b.n	8003652 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003656:	f002 f947 	bl	80058e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800365e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <xQueueGenericSend+0xdc>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d129      	bne.n	80036c0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003672:	f000 fb37 	bl	8003ce4 <prvCopyDataToQueue>
 8003676:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	2b00      	cmp	r3, #0
 800367e:	d010      	beq.n	80036a2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003682:	3324      	adds	r3, #36	@ 0x24
 8003684:	4618      	mov	r0, r3
 8003686:	f001 f905 	bl	8004894 <xTaskRemoveFromEventList>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d013      	beq.n	80036b8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003690:	4b3f      	ldr	r3, [pc, #252]	@ (8003790 <xQueueGenericSend+0x200>)
 8003692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	e00a      	b.n	80036b8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d007      	beq.n	80036b8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80036a8:	4b39      	ldr	r3, [pc, #228]	@ (8003790 <xQueueGenericSend+0x200>)
 80036aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80036b8:	f002 f948 	bl	800594c <vPortExitCritical>
				return pdPASS;
 80036bc:	2301      	movs	r3, #1
 80036be:	e063      	b.n	8003788 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d103      	bne.n	80036ce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036c6:	f002 f941 	bl	800594c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e05c      	b.n	8003788 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d106      	bne.n	80036e2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036d4:	f107 0314 	add.w	r3, r7, #20
 80036d8:	4618      	mov	r0, r3
 80036da:	f001 f93f 	bl	800495c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036de:	2301      	movs	r3, #1
 80036e0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036e2:	f002 f933 	bl	800594c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036e6:	f000 feaf 	bl	8004448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036ea:	f002 f8fd 	bl	80058e8 <vPortEnterCritical>
 80036ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80036f4:	b25b      	sxtb	r3, r3
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036fa:	d103      	bne.n	8003704 <xQueueGenericSend+0x174>
 80036fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003706:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800370a:	b25b      	sxtb	r3, r3
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003710:	d103      	bne.n	800371a <xQueueGenericSend+0x18a>
 8003712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800371a:	f002 f917 	bl	800594c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800371e:	1d3a      	adds	r2, r7, #4
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f001 f92e 	bl	8004988 <xTaskCheckForTimeOut>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d124      	bne.n	800377c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003732:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003734:	f000 fbce 	bl	8003ed4 <prvIsQueueFull>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d018      	beq.n	8003770 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800373e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003740:	3310      	adds	r3, #16
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	4611      	mov	r1, r2
 8003746:	4618      	mov	r0, r3
 8003748:	f001 f852 	bl	80047f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800374c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800374e:	f000 fb59 	bl	8003e04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003752:	f000 fe87 	bl	8004464 <xTaskResumeAll>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	f47f af7c 	bne.w	8003656 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800375e:	4b0c      	ldr	r3, [pc, #48]	@ (8003790 <xQueueGenericSend+0x200>)
 8003760:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	e772      	b.n	8003656 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003770:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003772:	f000 fb47 	bl	8003e04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003776:	f000 fe75 	bl	8004464 <xTaskResumeAll>
 800377a:	e76c      	b.n	8003656 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800377c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800377e:	f000 fb41 	bl	8003e04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003782:	f000 fe6f 	bl	8004464 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003786:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003788:	4618      	mov	r0, r3
 800378a:	3738      	adds	r7, #56	@ 0x38
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	e000ed04 	.word	0xe000ed04

08003794 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b090      	sub	sp, #64	@ 0x40
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80037a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10b      	bne.n	80037c4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80037ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80037be:	bf00      	nop
 80037c0:	bf00      	nop
 80037c2:	e7fd      	b.n	80037c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d103      	bne.n	80037d2 <xQueueGenericSendFromISR+0x3e>
 80037ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <xQueueGenericSendFromISR+0x42>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <xQueueGenericSendFromISR+0x44>
 80037d6:	2300      	movs	r3, #0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10b      	bne.n	80037f4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80037ee:	bf00      	nop
 80037f0:	bf00      	nop
 80037f2:	e7fd      	b.n	80037f0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d103      	bne.n	8003802 <xQueueGenericSendFromISR+0x6e>
 80037fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <xQueueGenericSendFromISR+0x72>
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <xQueueGenericSendFromISR+0x74>
 8003806:	2300      	movs	r3, #0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800380c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	623b      	str	r3, [r7, #32]
}
 800381e:	bf00      	nop
 8003820:	bf00      	nop
 8003822:	e7fd      	b.n	8003820 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003824:	f002 f940 	bl	8005aa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003828:	f3ef 8211 	mrs	r2, BASEPRI
 800382c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003830:	f383 8811 	msr	BASEPRI, r3
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	61fa      	str	r2, [r7, #28]
 800383e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003840:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003842:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003846:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800384a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800384c:	429a      	cmp	r2, r3
 800384e:	d302      	bcc.n	8003856 <xQueueGenericSendFromISR+0xc2>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2b02      	cmp	r3, #2
 8003854:	d12f      	bne.n	80038b6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003858:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800385c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003864:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800386c:	f000 fa3a 	bl	8003ce4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003870:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003878:	d112      	bne.n	80038a0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800387a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	2b00      	cmp	r3, #0
 8003880:	d016      	beq.n	80038b0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003884:	3324      	adds	r3, #36	@ 0x24
 8003886:	4618      	mov	r0, r3
 8003888:	f001 f804 	bl	8004894 <xTaskRemoveFromEventList>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00e      	beq.n	80038b0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00b      	beq.n	80038b0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	e007      	b.n	80038b0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80038a4:	3301      	adds	r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	b25a      	sxtb	r2, r3
 80038aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80038b0:	2301      	movs	r3, #1
 80038b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80038b4:	e001      	b.n	80038ba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038bc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80038c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3740      	adds	r7, #64	@ 0x40
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08c      	sub	sp, #48	@ 0x30
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80038dc:	2300      	movs	r3, #0
 80038de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80038e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10b      	bne.n	8003902 <xQueueReceive+0x32>
	__asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	623b      	str	r3, [r7, #32]
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	e7fd      	b.n	80038fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d103      	bne.n	8003910 <xQueueReceive+0x40>
 8003908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <xQueueReceive+0x44>
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <xQueueReceive+0x46>
 8003914:	2300      	movs	r3, #0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10b      	bne.n	8003932 <xQueueReceive+0x62>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	61fb      	str	r3, [r7, #28]
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	e7fd      	b.n	800392e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003932:	f001 f96f 	bl	8004c14 <xTaskGetSchedulerState>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d102      	bne.n	8003942 <xQueueReceive+0x72>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <xQueueReceive+0x76>
 8003942:	2301      	movs	r3, #1
 8003944:	e000      	b.n	8003948 <xQueueReceive+0x78>
 8003946:	2300      	movs	r3, #0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10b      	bne.n	8003964 <xQueueReceive+0x94>
	__asm volatile
 800394c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	61bb      	str	r3, [r7, #24]
}
 800395e:	bf00      	nop
 8003960:	bf00      	nop
 8003962:	e7fd      	b.n	8003960 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003964:	f001 ffc0 	bl	80058e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	2b00      	cmp	r3, #0
 8003972:	d01f      	beq.n	80039b4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003978:	f000 fa1e 	bl	8003db8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397e:	1e5a      	subs	r2, r3, #1
 8003980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003982:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00f      	beq.n	80039ac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800398c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398e:	3310      	adds	r3, #16
 8003990:	4618      	mov	r0, r3
 8003992:	f000 ff7f 	bl	8004894 <xTaskRemoveFromEventList>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d007      	beq.n	80039ac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800399c:	4b3c      	ldr	r3, [pc, #240]	@ (8003a90 <xQueueReceive+0x1c0>)
 800399e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039ac:	f001 ffce 	bl	800594c <vPortExitCritical>
				return pdPASS;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e069      	b.n	8003a88 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d103      	bne.n	80039c2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039ba:	f001 ffc7 	bl	800594c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039be:	2300      	movs	r3, #0
 80039c0:	e062      	b.n	8003a88 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d106      	bne.n	80039d6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039c8:	f107 0310 	add.w	r3, r7, #16
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 ffc5 	bl	800495c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039d2:	2301      	movs	r3, #1
 80039d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039d6:	f001 ffb9 	bl	800594c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039da:	f000 fd35 	bl	8004448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039de:	f001 ff83 	bl	80058e8 <vPortEnterCritical>
 80039e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039e8:	b25b      	sxtb	r3, r3
 80039ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039ee:	d103      	bne.n	80039f8 <xQueueReceive+0x128>
 80039f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039fe:	b25b      	sxtb	r3, r3
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a04:	d103      	bne.n	8003a0e <xQueueReceive+0x13e>
 8003a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a0e:	f001 ff9d 	bl	800594c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a12:	1d3a      	adds	r2, r7, #4
 8003a14:	f107 0310 	add.w	r3, r7, #16
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 ffb4 	bl	8004988 <xTaskCheckForTimeOut>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d123      	bne.n	8003a6e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a28:	f000 fa3e 	bl	8003ea8 <prvIsQueueEmpty>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d017      	beq.n	8003a62 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a34:	3324      	adds	r3, #36	@ 0x24
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4611      	mov	r1, r2
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fed8 	bl	80047f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a42:	f000 f9df 	bl	8003e04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a46:	f000 fd0d 	bl	8004464 <xTaskResumeAll>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d189      	bne.n	8003964 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003a50:	4b0f      	ldr	r3, [pc, #60]	@ (8003a90 <xQueueReceive+0x1c0>)
 8003a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	e780      	b.n	8003964 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a64:	f000 f9ce 	bl	8003e04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a68:	f000 fcfc 	bl	8004464 <xTaskResumeAll>
 8003a6c:	e77a      	b.n	8003964 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a70:	f000 f9c8 	bl	8003e04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a74:	f000 fcf6 	bl	8004464 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003a7a:	f000 fa15 	bl	8003ea8 <prvIsQueueEmpty>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f43f af6f 	beq.w	8003964 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3730      	adds	r7, #48	@ 0x30
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	e000ed04 	.word	0xe000ed04

08003a94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08e      	sub	sp, #56	@ 0x38
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10b      	bne.n	8003ac8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	623b      	str	r3, [r7, #32]
}
 8003ac2:	bf00      	nop
 8003ac4:	bf00      	nop
 8003ac6:	e7fd      	b.n	8003ac4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00b      	beq.n	8003ae8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	61fb      	str	r3, [r7, #28]
}
 8003ae2:	bf00      	nop
 8003ae4:	bf00      	nop
 8003ae6:	e7fd      	b.n	8003ae4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ae8:	f001 f894 	bl	8004c14 <xTaskGetSchedulerState>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d102      	bne.n	8003af8 <xQueueSemaphoreTake+0x64>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <xQueueSemaphoreTake+0x68>
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <xQueueSemaphoreTake+0x6a>
 8003afc:	2300      	movs	r3, #0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10b      	bne.n	8003b1a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	61bb      	str	r3, [r7, #24]
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	e7fd      	b.n	8003b16 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b1a:	f001 fee5 	bl	80058e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b22:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d024      	beq.n	8003b74 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2c:	1e5a      	subs	r2, r3, #1
 8003b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b30:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d104      	bne.n	8003b44 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003b3a:	f001 f9e5 	bl	8004f08 <pvTaskIncrementMutexHeldCount>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b42:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00f      	beq.n	8003b6c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b4e:	3310      	adds	r3, #16
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fe9f 	bl	8004894 <xTaskRemoveFromEventList>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d007      	beq.n	8003b6c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b5c:	4b54      	ldr	r3, [pc, #336]	@ (8003cb0 <xQueueSemaphoreTake+0x21c>)
 8003b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b6c:	f001 feee 	bl	800594c <vPortExitCritical>
				return pdPASS;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e098      	b.n	8003ca6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d112      	bne.n	8003ba0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00b      	beq.n	8003b98 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	617b      	str	r3, [r7, #20]
}
 8003b92:	bf00      	nop
 8003b94:	bf00      	nop
 8003b96:	e7fd      	b.n	8003b94 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003b98:	f001 fed8 	bl	800594c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e082      	b.n	8003ca6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ba6:	f107 030c 	add.w	r3, r7, #12
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fed6 	bl	800495c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bb4:	f001 feca 	bl	800594c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bb8:	f000 fc46 	bl	8004448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bbc:	f001 fe94 	bl	80058e8 <vPortEnterCritical>
 8003bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003bc6:	b25b      	sxtb	r3, r3
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bcc:	d103      	bne.n	8003bd6 <xQueueSemaphoreTake+0x142>
 8003bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bdc:	b25b      	sxtb	r3, r3
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003be2:	d103      	bne.n	8003bec <xQueueSemaphoreTake+0x158>
 8003be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bec:	f001 feae 	bl	800594c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bf0:	463a      	mov	r2, r7
 8003bf2:	f107 030c 	add.w	r3, r7, #12
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 fec5 	bl	8004988 <xTaskCheckForTimeOut>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d132      	bne.n	8003c6a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c06:	f000 f94f 	bl	8003ea8 <prvIsQueueEmpty>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d026      	beq.n	8003c5e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003c18:	f001 fe66 	bl	80058e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 f815 	bl	8004c50 <xTaskPriorityInherit>
 8003c26:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003c28:	f001 fe90 	bl	800594c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2e:	3324      	adds	r3, #36	@ 0x24
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fddb 	bl	80047f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c3c:	f000 f8e2 	bl	8003e04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c40:	f000 fc10 	bl	8004464 <xTaskResumeAll>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f47f af67 	bne.w	8003b1a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003c4c:	4b18      	ldr	r3, [pc, #96]	@ (8003cb0 <xQueueSemaphoreTake+0x21c>)
 8003c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	e75d      	b.n	8003b1a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003c5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c60:	f000 f8d0 	bl	8003e04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c64:	f000 fbfe 	bl	8004464 <xTaskResumeAll>
 8003c68:	e757      	b.n	8003b1a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003c6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c6c:	f000 f8ca 	bl	8003e04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c70:	f000 fbf8 	bl	8004464 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c76:	f000 f917 	bl	8003ea8 <prvIsQueueEmpty>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f43f af4c 	beq.w	8003b1a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00d      	beq.n	8003ca4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003c88:	f001 fe2e 	bl	80058e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003c8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003c8e:	f000 f811 	bl	8003cb4 <prvGetDisinheritPriorityAfterTimeout>
 8003c92:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 f8b0 	bl	8004e00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003ca0:	f001 fe54 	bl	800594c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ca4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3738      	adds	r7, #56	@ 0x38
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	e000ed04 	.word	0xe000ed04

08003cb4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d006      	beq.n	8003cd2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	e001      	b.n	8003cd6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
	}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10d      	bne.n	8003d1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d14d      	bne.n	8003da6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f001 f806 	bl	8004d20 <xTaskPriorityDisinherit>
 8003d14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	609a      	str	r2, [r3, #8]
 8003d1c:	e043      	b.n	8003da6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d119      	bne.n	8003d58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6858      	ldr	r0, [r3, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	68b9      	ldr	r1, [r7, #8]
 8003d30:	f002 fb5d 	bl	80063ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3c:	441a      	add	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d32b      	bcc.n	8003da6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	605a      	str	r2, [r3, #4]
 8003d56:	e026      	b.n	8003da6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	68d8      	ldr	r0, [r3, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	461a      	mov	r2, r3
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	f002 fb43 	bl	80063ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d70:	425b      	negs	r3, r3
 8003d72:	441a      	add	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d207      	bcs.n	8003d94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8c:	425b      	negs	r3, r3
 8003d8e:	441a      	add	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d105      	bne.n	8003da6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003dae:	697b      	ldr	r3, [r7, #20]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d018      	beq.n	8003dfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68da      	ldr	r2, [r3, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	441a      	add	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d303      	bcc.n	8003dec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68d9      	ldr	r1, [r3, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df4:	461a      	mov	r2, r3
 8003df6:	6838      	ldr	r0, [r7, #0]
 8003df8:	f002 faf9 	bl	80063ee <memcpy>
	}
}
 8003dfc:	bf00      	nop
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e0c:	f001 fd6c 	bl	80058e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e18:	e011      	b.n	8003e3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d012      	beq.n	8003e48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3324      	adds	r3, #36	@ 0x24
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fd34 	bl	8004894 <xTaskRemoveFromEventList>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e32:	f000 fe0d 	bl	8004a50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	dce9      	bgt.n	8003e1a <prvUnlockQueue+0x16>
 8003e46:	e000      	b.n	8003e4a <prvUnlockQueue+0x46>
					break;
 8003e48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	22ff      	movs	r2, #255	@ 0xff
 8003e4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003e52:	f001 fd7b 	bl	800594c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e56:	f001 fd47 	bl	80058e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e62:	e011      	b.n	8003e88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d012      	beq.n	8003e92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	3310      	adds	r3, #16
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fd0f 	bl	8004894 <xTaskRemoveFromEventList>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e7c:	f000 fde8 	bl	8004a50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e80:	7bbb      	ldrb	r3, [r7, #14]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	dce9      	bgt.n	8003e64 <prvUnlockQueue+0x60>
 8003e90:	e000      	b.n	8003e94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	22ff      	movs	r2, #255	@ 0xff
 8003e98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003e9c:	f001 fd56 	bl	800594c <vPortExitCritical>
}
 8003ea0:	bf00      	nop
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003eb0:	f001 fd1a 	bl	80058e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d102      	bne.n	8003ec2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	e001      	b.n	8003ec6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ec6:	f001 fd41 	bl	800594c <vPortExitCritical>

	return xReturn;
 8003eca:	68fb      	ldr	r3, [r7, #12]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003edc:	f001 fd04 	bl	80058e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d102      	bne.n	8003ef2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003eec:	2301      	movs	r3, #1
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	e001      	b.n	8003ef6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ef6:	f001 fd29 	bl	800594c <vPortExitCritical>

	return xReturn;
 8003efa:	68fb      	ldr	r3, [r7, #12]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	e014      	b.n	8003f3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f14:	4a0f      	ldr	r2, [pc, #60]	@ (8003f54 <vQueueAddToRegistry+0x50>)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10b      	bne.n	8003f38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f20:	490c      	ldr	r1, [pc, #48]	@ (8003f54 <vQueueAddToRegistry+0x50>)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f54 <vQueueAddToRegistry+0x50>)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4413      	add	r3, r2
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f36:	e006      	b.n	8003f46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b07      	cmp	r3, #7
 8003f42:	d9e7      	bls.n	8003f14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	200007f4 	.word	0x200007f4

08003f58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003f68:	f001 fcbe 	bl	80058e8 <vPortEnterCritical>
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f72:	b25b      	sxtb	r3, r3
 8003f74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f78:	d103      	bne.n	8003f82 <vQueueWaitForMessageRestricted+0x2a>
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f88:	b25b      	sxtb	r3, r3
 8003f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f8e:	d103      	bne.n	8003f98 <vQueueWaitForMessageRestricted+0x40>
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f98:	f001 fcd8 	bl	800594c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d106      	bne.n	8003fb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	3324      	adds	r3, #36	@ 0x24
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68b9      	ldr	r1, [r7, #8]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fc45 	bl	800483c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003fb2:	6978      	ldr	r0, [r7, #20]
 8003fb4:	f7ff ff26 	bl	8003e04 <prvUnlockQueue>
	}
 8003fb8:	bf00      	nop
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08e      	sub	sp, #56	@ 0x38
 8003fc4:	af04      	add	r7, sp, #16
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10b      	bne.n	8003fec <xTaskCreateStatic+0x2c>
	__asm volatile
 8003fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	623b      	str	r3, [r7, #32]
}
 8003fe6:	bf00      	nop
 8003fe8:	bf00      	nop
 8003fea:	e7fd      	b.n	8003fe8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10b      	bne.n	800400a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	61fb      	str	r3, [r7, #28]
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	e7fd      	b.n	8004006 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800400a:	235c      	movs	r3, #92	@ 0x5c
 800400c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b5c      	cmp	r3, #92	@ 0x5c
 8004012:	d00b      	beq.n	800402c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	61bb      	str	r3, [r7, #24]
}
 8004026:	bf00      	nop
 8004028:	bf00      	nop
 800402a:	e7fd      	b.n	8004028 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800402c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800402e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01e      	beq.n	8004072 <xTaskCreateStatic+0xb2>
 8004034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01b      	beq.n	8004072 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800403a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800403e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004040:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004042:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004046:	2202      	movs	r2, #2
 8004048:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800404c:	2300      	movs	r3, #0
 800404e:	9303      	str	r3, [sp, #12]
 8004050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004052:	9302      	str	r3, [sp, #8]
 8004054:	f107 0314 	add.w	r3, r7, #20
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 f850 	bl	800410a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800406a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800406c:	f000 f8de 	bl	800422c <prvAddNewTaskToReadyList>
 8004070:	e001      	b.n	8004076 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004076:	697b      	ldr	r3, [r7, #20]
	}
 8004078:	4618      	mov	r0, r3
 800407a:	3728      	adds	r7, #40	@ 0x28
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08c      	sub	sp, #48	@ 0x30
 8004084:	af04      	add	r7, sp, #16
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	4613      	mov	r3, r2
 800408e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004090:	88fb      	ldrh	r3, [r7, #6]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4618      	mov	r0, r3
 8004096:	f001 fd49 	bl	8005b2c <pvPortMalloc>
 800409a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00e      	beq.n	80040c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80040a2:	205c      	movs	r0, #92	@ 0x5c
 80040a4:	f001 fd42 	bl	8005b2c <pvPortMalloc>
 80040a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80040b6:	e005      	b.n	80040c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80040b8:	6978      	ldr	r0, [r7, #20]
 80040ba:	f001 fe05 	bl	8005cc8 <vPortFree>
 80040be:	e001      	b.n	80040c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d017      	beq.n	80040fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040d2:	88fa      	ldrh	r2, [r7, #6]
 80040d4:	2300      	movs	r3, #0
 80040d6:	9303      	str	r3, [sp, #12]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	9302      	str	r3, [sp, #8]
 80040dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040de:	9301      	str	r3, [sp, #4]
 80040e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	68b9      	ldr	r1, [r7, #8]
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 f80e 	bl	800410a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040ee:	69f8      	ldr	r0, [r7, #28]
 80040f0:	f000 f89c 	bl	800422c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040f4:	2301      	movs	r3, #1
 80040f6:	61bb      	str	r3, [r7, #24]
 80040f8:	e002      	b.n	8004100 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80040fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004100:	69bb      	ldr	r3, [r7, #24]
	}
 8004102:	4618      	mov	r0, r3
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b088      	sub	sp, #32
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	461a      	mov	r2, r3
 8004122:	21a5      	movs	r1, #165	@ 0xa5
 8004124:	f002 f8e8 	bl	80062f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004132:	3b01      	subs	r3, #1
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	f023 0307 	bic.w	r3, r3, #7
 8004140:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00b      	beq.n	8004164 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	617b      	str	r3, [r7, #20]
}
 800415e:	bf00      	nop
 8004160:	bf00      	nop
 8004162:	e7fd      	b.n	8004160 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d01f      	beq.n	80041aa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
 800416e:	e012      	b.n	8004196 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	4413      	add	r3, r2
 8004176:	7819      	ldrb	r1, [r3, #0]
 8004178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	4413      	add	r3, r2
 800417e:	3334      	adds	r3, #52	@ 0x34
 8004180:	460a      	mov	r2, r1
 8004182:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	4413      	add	r3, r2
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d006      	beq.n	800419e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	3301      	adds	r3, #1
 8004194:	61fb      	str	r3, [r7, #28]
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	2b0f      	cmp	r3, #15
 800419a:	d9e9      	bls.n	8004170 <prvInitialiseNewTask+0x66>
 800419c:	e000      	b.n	80041a0 <prvInitialiseNewTask+0x96>
			{
				break;
 800419e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80041a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041a8:	e003      	b.n	80041b2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80041aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80041b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b4:	2b37      	cmp	r3, #55	@ 0x37
 80041b6:	d901      	bls.n	80041bc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80041b8:	2337      	movs	r3, #55	@ 0x37
 80041ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80041bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80041c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041c6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80041c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ca:	2200      	movs	r2, #0
 80041cc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d0:	3304      	adds	r3, #4
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff f802 	bl	80031dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041da:	3318      	adds	r3, #24
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fe fffd 	bl	80031dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80041ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fa:	2200      	movs	r2, #0
 80041fc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	68f9      	ldr	r1, [r7, #12]
 800420a:	69b8      	ldr	r0, [r7, #24]
 800420c:	f001 fa3e 	bl	800568c <pxPortInitialiseStack>
 8004210:	4602      	mov	r2, r0
 8004212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004214:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800421c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800421e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004220:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004222:	bf00      	nop
 8004224:	3720      	adds	r7, #32
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
	...

0800422c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004234:	f001 fb58 	bl	80058e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004238:	4b2d      	ldr	r3, [pc, #180]	@ (80042f0 <prvAddNewTaskToReadyList+0xc4>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3301      	adds	r3, #1
 800423e:	4a2c      	ldr	r2, [pc, #176]	@ (80042f0 <prvAddNewTaskToReadyList+0xc4>)
 8004240:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004242:	4b2c      	ldr	r3, [pc, #176]	@ (80042f4 <prvAddNewTaskToReadyList+0xc8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800424a:	4a2a      	ldr	r2, [pc, #168]	@ (80042f4 <prvAddNewTaskToReadyList+0xc8>)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004250:	4b27      	ldr	r3, [pc, #156]	@ (80042f0 <prvAddNewTaskToReadyList+0xc4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d110      	bne.n	800427a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004258:	f000 fc1e 	bl	8004a98 <prvInitialiseTaskLists>
 800425c:	e00d      	b.n	800427a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800425e:	4b26      	ldr	r3, [pc, #152]	@ (80042f8 <prvAddNewTaskToReadyList+0xcc>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d109      	bne.n	800427a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004266:	4b23      	ldr	r3, [pc, #140]	@ (80042f4 <prvAddNewTaskToReadyList+0xc8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004270:	429a      	cmp	r2, r3
 8004272:	d802      	bhi.n	800427a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004274:	4a1f      	ldr	r2, [pc, #124]	@ (80042f4 <prvAddNewTaskToReadyList+0xc8>)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800427a:	4b20      	ldr	r3, [pc, #128]	@ (80042fc <prvAddNewTaskToReadyList+0xd0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3301      	adds	r3, #1
 8004280:	4a1e      	ldr	r2, [pc, #120]	@ (80042fc <prvAddNewTaskToReadyList+0xd0>)
 8004282:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004284:	4b1d      	ldr	r3, [pc, #116]	@ (80042fc <prvAddNewTaskToReadyList+0xd0>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004290:	4b1b      	ldr	r3, [pc, #108]	@ (8004300 <prvAddNewTaskToReadyList+0xd4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d903      	bls.n	80042a0 <prvAddNewTaskToReadyList+0x74>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429c:	4a18      	ldr	r2, [pc, #96]	@ (8004300 <prvAddNewTaskToReadyList+0xd4>)
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4a15      	ldr	r2, [pc, #84]	@ (8004304 <prvAddNewTaskToReadyList+0xd8>)
 80042ae:	441a      	add	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3304      	adds	r3, #4
 80042b4:	4619      	mov	r1, r3
 80042b6:	4610      	mov	r0, r2
 80042b8:	f7fe ff9d 	bl	80031f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80042bc:	f001 fb46 	bl	800594c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80042c0:	4b0d      	ldr	r3, [pc, #52]	@ (80042f8 <prvAddNewTaskToReadyList+0xcc>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00e      	beq.n	80042e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042c8:	4b0a      	ldr	r3, [pc, #40]	@ (80042f4 <prvAddNewTaskToReadyList+0xc8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d207      	bcs.n	80042e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004308 <prvAddNewTaskToReadyList+0xdc>)
 80042d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042e6:	bf00      	nop
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000d08 	.word	0x20000d08
 80042f4:	20000834 	.word	0x20000834
 80042f8:	20000d14 	.word	0x20000d14
 80042fc:	20000d24 	.word	0x20000d24
 8004300:	20000d10 	.word	0x20000d10
 8004304:	20000838 	.word	0x20000838
 8004308:	e000ed04 	.word	0xe000ed04

0800430c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004314:	2300      	movs	r3, #0
 8004316:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d018      	beq.n	8004350 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800431e:	4b14      	ldr	r3, [pc, #80]	@ (8004370 <vTaskDelay+0x64>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00b      	beq.n	800433e <vTaskDelay+0x32>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	60bb      	str	r3, [r7, #8]
}
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	e7fd      	b.n	800433a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800433e:	f000 f883 	bl	8004448 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004342:	2100      	movs	r1, #0
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 fdf3 	bl	8004f30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800434a:	f000 f88b 	bl	8004464 <xTaskResumeAll>
 800434e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d107      	bne.n	8004366 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004356:	4b07      	ldr	r3, [pc, #28]	@ (8004374 <vTaskDelay+0x68>)
 8004358:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004366:	bf00      	nop
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20000d30 	.word	0x20000d30
 8004374:	e000ed04 	.word	0xe000ed04

08004378 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08a      	sub	sp, #40	@ 0x28
 800437c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004386:	463a      	mov	r2, r7
 8004388:	1d39      	adds	r1, r7, #4
 800438a:	f107 0308 	add.w	r3, r7, #8
 800438e:	4618      	mov	r0, r3
 8004390:	f7fe fed0 	bl	8003134 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004394:	6839      	ldr	r1, [r7, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	9202      	str	r2, [sp, #8]
 800439c:	9301      	str	r3, [sp, #4]
 800439e:	2300      	movs	r3, #0
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	2300      	movs	r3, #0
 80043a4:	460a      	mov	r2, r1
 80043a6:	4922      	ldr	r1, [pc, #136]	@ (8004430 <vTaskStartScheduler+0xb8>)
 80043a8:	4822      	ldr	r0, [pc, #136]	@ (8004434 <vTaskStartScheduler+0xbc>)
 80043aa:	f7ff fe09 	bl	8003fc0 <xTaskCreateStatic>
 80043ae:	4603      	mov	r3, r0
 80043b0:	4a21      	ldr	r2, [pc, #132]	@ (8004438 <vTaskStartScheduler+0xc0>)
 80043b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80043b4:	4b20      	ldr	r3, [pc, #128]	@ (8004438 <vTaskStartScheduler+0xc0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80043bc:	2301      	movs	r3, #1
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	e001      	b.n	80043c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d102      	bne.n	80043d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80043cc:	f000 fe04 	bl	8004fd8 <xTimerCreateTimerTask>
 80043d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d116      	bne.n	8004406 <vTaskStartScheduler+0x8e>
	__asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	613b      	str	r3, [r7, #16]
}
 80043ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043ec:	4b13      	ldr	r3, [pc, #76]	@ (800443c <vTaskStartScheduler+0xc4>)
 80043ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80043f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043f4:	4b12      	ldr	r3, [pc, #72]	@ (8004440 <vTaskStartScheduler+0xc8>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80043fa:	4b12      	ldr	r3, [pc, #72]	@ (8004444 <vTaskStartScheduler+0xcc>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004400:	f001 f9ce 	bl	80057a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004404:	e00f      	b.n	8004426 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800440c:	d10b      	bne.n	8004426 <vTaskStartScheduler+0xae>
	__asm volatile
 800440e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	60fb      	str	r3, [r7, #12]
}
 8004420:	bf00      	nop
 8004422:	bf00      	nop
 8004424:	e7fd      	b.n	8004422 <vTaskStartScheduler+0xaa>
}
 8004426:	bf00      	nop
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	08006964 	.word	0x08006964
 8004434:	08004a69 	.word	0x08004a69
 8004438:	20000d2c 	.word	0x20000d2c
 800443c:	20000d28 	.word	0x20000d28
 8004440:	20000d14 	.word	0x20000d14
 8004444:	20000d0c 	.word	0x20000d0c

08004448 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800444c:	4b04      	ldr	r3, [pc, #16]	@ (8004460 <vTaskSuspendAll+0x18>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3301      	adds	r3, #1
 8004452:	4a03      	ldr	r2, [pc, #12]	@ (8004460 <vTaskSuspendAll+0x18>)
 8004454:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004456:	bf00      	nop
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	20000d30 	.word	0x20000d30

08004464 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800446e:	2300      	movs	r3, #0
 8004470:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004472:	4b42      	ldr	r3, [pc, #264]	@ (800457c <xTaskResumeAll+0x118>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10b      	bne.n	8004492 <xTaskResumeAll+0x2e>
	__asm volatile
 800447a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	603b      	str	r3, [r7, #0]
}
 800448c:	bf00      	nop
 800448e:	bf00      	nop
 8004490:	e7fd      	b.n	800448e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004492:	f001 fa29 	bl	80058e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004496:	4b39      	ldr	r3, [pc, #228]	@ (800457c <xTaskResumeAll+0x118>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3b01      	subs	r3, #1
 800449c:	4a37      	ldr	r2, [pc, #220]	@ (800457c <xTaskResumeAll+0x118>)
 800449e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a0:	4b36      	ldr	r3, [pc, #216]	@ (800457c <xTaskResumeAll+0x118>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d162      	bne.n	800456e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80044a8:	4b35      	ldr	r3, [pc, #212]	@ (8004580 <xTaskResumeAll+0x11c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d05e      	beq.n	800456e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044b0:	e02f      	b.n	8004512 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044b2:	4b34      	ldr	r3, [pc, #208]	@ (8004584 <xTaskResumeAll+0x120>)
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	3318      	adds	r3, #24
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe fef6 	bl	80032b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fe fef1 	bl	80032b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d2:	4b2d      	ldr	r3, [pc, #180]	@ (8004588 <xTaskResumeAll+0x124>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d903      	bls.n	80044e2 <xTaskResumeAll+0x7e>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044de:	4a2a      	ldr	r2, [pc, #168]	@ (8004588 <xTaskResumeAll+0x124>)
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4a27      	ldr	r2, [pc, #156]	@ (800458c <xTaskResumeAll+0x128>)
 80044f0:	441a      	add	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3304      	adds	r3, #4
 80044f6:	4619      	mov	r1, r3
 80044f8:	4610      	mov	r0, r2
 80044fa:	f7fe fe7c 	bl	80031f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004502:	4b23      	ldr	r3, [pc, #140]	@ (8004590 <xTaskResumeAll+0x12c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004508:	429a      	cmp	r2, r3
 800450a:	d302      	bcc.n	8004512 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800450c:	4b21      	ldr	r3, [pc, #132]	@ (8004594 <xTaskResumeAll+0x130>)
 800450e:	2201      	movs	r2, #1
 8004510:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004512:	4b1c      	ldr	r3, [pc, #112]	@ (8004584 <xTaskResumeAll+0x120>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1cb      	bne.n	80044b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004520:	f000 fb58 	bl	8004bd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004524:	4b1c      	ldr	r3, [pc, #112]	@ (8004598 <xTaskResumeAll+0x134>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d010      	beq.n	8004552 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004530:	f000 f846 	bl	80045c0 <xTaskIncrementTick>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800453a:	4b16      	ldr	r3, [pc, #88]	@ (8004594 <xTaskResumeAll+0x130>)
 800453c:	2201      	movs	r2, #1
 800453e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3b01      	subs	r3, #1
 8004544:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f1      	bne.n	8004530 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800454c:	4b12      	ldr	r3, [pc, #72]	@ (8004598 <xTaskResumeAll+0x134>)
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004552:	4b10      	ldr	r3, [pc, #64]	@ (8004594 <xTaskResumeAll+0x130>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d009      	beq.n	800456e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800455a:	2301      	movs	r3, #1
 800455c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800455e:	4b0f      	ldr	r3, [pc, #60]	@ (800459c <xTaskResumeAll+0x138>)
 8004560:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800456e:	f001 f9ed 	bl	800594c <vPortExitCritical>

	return xAlreadyYielded;
 8004572:	68bb      	ldr	r3, [r7, #8]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	20000d30 	.word	0x20000d30
 8004580:	20000d08 	.word	0x20000d08
 8004584:	20000cc8 	.word	0x20000cc8
 8004588:	20000d10 	.word	0x20000d10
 800458c:	20000838 	.word	0x20000838
 8004590:	20000834 	.word	0x20000834
 8004594:	20000d1c 	.word	0x20000d1c
 8004598:	20000d18 	.word	0x20000d18
 800459c:	e000ed04 	.word	0xe000ed04

080045a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80045a6:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <xTaskGetTickCount+0x1c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80045ac:	687b      	ldr	r3, [r7, #4]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	20000d0c 	.word	0x20000d0c

080045c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045ca:	4b4f      	ldr	r3, [pc, #316]	@ (8004708 <xTaskIncrementTick+0x148>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f040 8090 	bne.w	80046f4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045d4:	4b4d      	ldr	r3, [pc, #308]	@ (800470c <xTaskIncrementTick+0x14c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3301      	adds	r3, #1
 80045da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80045dc:	4a4b      	ldr	r2, [pc, #300]	@ (800470c <xTaskIncrementTick+0x14c>)
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d121      	bne.n	800462c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80045e8:	4b49      	ldr	r3, [pc, #292]	@ (8004710 <xTaskIncrementTick+0x150>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00b      	beq.n	800460a <xTaskIncrementTick+0x4a>
	__asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	603b      	str	r3, [r7, #0]
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	e7fd      	b.n	8004606 <xTaskIncrementTick+0x46>
 800460a:	4b41      	ldr	r3, [pc, #260]	@ (8004710 <xTaskIncrementTick+0x150>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	4b40      	ldr	r3, [pc, #256]	@ (8004714 <xTaskIncrementTick+0x154>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a3e      	ldr	r2, [pc, #248]	@ (8004710 <xTaskIncrementTick+0x150>)
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	4a3e      	ldr	r2, [pc, #248]	@ (8004714 <xTaskIncrementTick+0x154>)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	4b3e      	ldr	r3, [pc, #248]	@ (8004718 <xTaskIncrementTick+0x158>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	3301      	adds	r3, #1
 8004624:	4a3c      	ldr	r2, [pc, #240]	@ (8004718 <xTaskIncrementTick+0x158>)
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	f000 fad4 	bl	8004bd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800462c:	4b3b      	ldr	r3, [pc, #236]	@ (800471c <xTaskIncrementTick+0x15c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	429a      	cmp	r2, r3
 8004634:	d349      	bcc.n	80046ca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004636:	4b36      	ldr	r3, [pc, #216]	@ (8004710 <xTaskIncrementTick+0x150>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d104      	bne.n	800464a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004640:	4b36      	ldr	r3, [pc, #216]	@ (800471c <xTaskIncrementTick+0x15c>)
 8004642:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004646:	601a      	str	r2, [r3, #0]
					break;
 8004648:	e03f      	b.n	80046ca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800464a:	4b31      	ldr	r3, [pc, #196]	@ (8004710 <xTaskIncrementTick+0x150>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	429a      	cmp	r2, r3
 8004660:	d203      	bcs.n	800466a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004662:	4a2e      	ldr	r2, [pc, #184]	@ (800471c <xTaskIncrementTick+0x15c>)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004668:	e02f      	b.n	80046ca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	3304      	adds	r3, #4
 800466e:	4618      	mov	r0, r3
 8004670:	f7fe fe1e 	bl	80032b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004678:	2b00      	cmp	r3, #0
 800467a:	d004      	beq.n	8004686 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	3318      	adds	r3, #24
 8004680:	4618      	mov	r0, r3
 8004682:	f7fe fe15 	bl	80032b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800468a:	4b25      	ldr	r3, [pc, #148]	@ (8004720 <xTaskIncrementTick+0x160>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d903      	bls.n	800469a <xTaskIncrementTick+0xda>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004696:	4a22      	ldr	r2, [pc, #136]	@ (8004720 <xTaskIncrementTick+0x160>)
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004724 <xTaskIncrementTick+0x164>)
 80046a8:	441a      	add	r2, r3
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	3304      	adds	r3, #4
 80046ae:	4619      	mov	r1, r3
 80046b0:	4610      	mov	r0, r2
 80046b2:	f7fe fda0 	bl	80031f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004728 <xTaskIncrementTick+0x168>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d3b8      	bcc.n	8004636 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80046c4:	2301      	movs	r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046c8:	e7b5      	b.n	8004636 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046ca:	4b17      	ldr	r3, [pc, #92]	@ (8004728 <xTaskIncrementTick+0x168>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046d0:	4914      	ldr	r1, [pc, #80]	@ (8004724 <xTaskIncrementTick+0x164>)
 80046d2:	4613      	mov	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d901      	bls.n	80046e6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80046e2:	2301      	movs	r3, #1
 80046e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80046e6:	4b11      	ldr	r3, [pc, #68]	@ (800472c <xTaskIncrementTick+0x16c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d007      	beq.n	80046fe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80046ee:	2301      	movs	r3, #1
 80046f0:	617b      	str	r3, [r7, #20]
 80046f2:	e004      	b.n	80046fe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80046f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004730 <xTaskIncrementTick+0x170>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3301      	adds	r3, #1
 80046fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004730 <xTaskIncrementTick+0x170>)
 80046fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80046fe:	697b      	ldr	r3, [r7, #20]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20000d30 	.word	0x20000d30
 800470c:	20000d0c 	.word	0x20000d0c
 8004710:	20000cc0 	.word	0x20000cc0
 8004714:	20000cc4 	.word	0x20000cc4
 8004718:	20000d20 	.word	0x20000d20
 800471c:	20000d28 	.word	0x20000d28
 8004720:	20000d10 	.word	0x20000d10
 8004724:	20000838 	.word	0x20000838
 8004728:	20000834 	.word	0x20000834
 800472c:	20000d1c 	.word	0x20000d1c
 8004730:	20000d18 	.word	0x20000d18

08004734 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800473a:	4b28      	ldr	r3, [pc, #160]	@ (80047dc <vTaskSwitchContext+0xa8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004742:	4b27      	ldr	r3, [pc, #156]	@ (80047e0 <vTaskSwitchContext+0xac>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004748:	e042      	b.n	80047d0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800474a:	4b25      	ldr	r3, [pc, #148]	@ (80047e0 <vTaskSwitchContext+0xac>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004750:	4b24      	ldr	r3, [pc, #144]	@ (80047e4 <vTaskSwitchContext+0xb0>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	e011      	b.n	800477c <vTaskSwitchContext+0x48>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10b      	bne.n	8004776 <vTaskSwitchContext+0x42>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	607b      	str	r3, [r7, #4]
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	e7fd      	b.n	8004772 <vTaskSwitchContext+0x3e>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3b01      	subs	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	491a      	ldr	r1, [pc, #104]	@ (80047e8 <vTaskSwitchContext+0xb4>)
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0e3      	beq.n	8004758 <vTaskSwitchContext+0x24>
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4a13      	ldr	r2, [pc, #76]	@ (80047e8 <vTaskSwitchContext+0xb4>)
 800479c:	4413      	add	r3, r2
 800479e:	60bb      	str	r3, [r7, #8]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	605a      	str	r2, [r3, #4]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	3308      	adds	r3, #8
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d104      	bne.n	80047c0 <vTaskSwitchContext+0x8c>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	605a      	str	r2, [r3, #4]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	4a09      	ldr	r2, [pc, #36]	@ (80047ec <vTaskSwitchContext+0xb8>)
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	4a06      	ldr	r2, [pc, #24]	@ (80047e4 <vTaskSwitchContext+0xb0>)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6013      	str	r3, [r2, #0]
}
 80047d0:	bf00      	nop
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	20000d30 	.word	0x20000d30
 80047e0:	20000d1c 	.word	0x20000d1c
 80047e4:	20000d10 	.word	0x20000d10
 80047e8:	20000838 	.word	0x20000838
 80047ec:	20000834 	.word	0x20000834

080047f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10b      	bne.n	8004818 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	60fb      	str	r3, [r7, #12]
}
 8004812:	bf00      	nop
 8004814:	bf00      	nop
 8004816:	e7fd      	b.n	8004814 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004818:	4b07      	ldr	r3, [pc, #28]	@ (8004838 <vTaskPlaceOnEventList+0x48>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	3318      	adds	r3, #24
 800481e:	4619      	mov	r1, r3
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7fe fd0c 	bl	800323e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004826:	2101      	movs	r1, #1
 8004828:	6838      	ldr	r0, [r7, #0]
 800482a:	f000 fb81 	bl	8004f30 <prvAddCurrentTaskToDelayedList>
}
 800482e:	bf00      	nop
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000834 	.word	0x20000834

0800483c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10b      	bne.n	8004866 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800484e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	617b      	str	r3, [r7, #20]
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	e7fd      	b.n	8004862 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004866:	4b0a      	ldr	r3, [pc, #40]	@ (8004890 <vTaskPlaceOnEventListRestricted+0x54>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3318      	adds	r3, #24
 800486c:	4619      	mov	r1, r3
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f7fe fcc1 	bl	80031f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d002      	beq.n	8004880 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800487a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800487e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	68b8      	ldr	r0, [r7, #8]
 8004884:	f000 fb54 	bl	8004f30 <prvAddCurrentTaskToDelayedList>
	}
 8004888:	bf00      	nop
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	20000834 	.word	0x20000834

08004894 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10b      	bne.n	80048c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	60fb      	str	r3, [r7, #12]
}
 80048bc:	bf00      	nop
 80048be:	bf00      	nop
 80048c0:	e7fd      	b.n	80048be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	3318      	adds	r3, #24
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe fcf2 	bl	80032b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004944 <xTaskRemoveFromEventList+0xb0>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d11d      	bne.n	8004910 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	3304      	adds	r3, #4
 80048d8:	4618      	mov	r0, r3
 80048da:	f7fe fce9 	bl	80032b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048e2:	4b19      	ldr	r3, [pc, #100]	@ (8004948 <xTaskRemoveFromEventList+0xb4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d903      	bls.n	80048f2 <xTaskRemoveFromEventList+0x5e>
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ee:	4a16      	ldr	r2, [pc, #88]	@ (8004948 <xTaskRemoveFromEventList+0xb4>)
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4a13      	ldr	r2, [pc, #76]	@ (800494c <xTaskRemoveFromEventList+0xb8>)
 8004900:	441a      	add	r2, r3
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	3304      	adds	r3, #4
 8004906:	4619      	mov	r1, r3
 8004908:	4610      	mov	r0, r2
 800490a:	f7fe fc74 	bl	80031f6 <vListInsertEnd>
 800490e:	e005      	b.n	800491c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	3318      	adds	r3, #24
 8004914:	4619      	mov	r1, r3
 8004916:	480e      	ldr	r0, [pc, #56]	@ (8004950 <xTaskRemoveFromEventList+0xbc>)
 8004918:	f7fe fc6d 	bl	80031f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004920:	4b0c      	ldr	r3, [pc, #48]	@ (8004954 <xTaskRemoveFromEventList+0xc0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004926:	429a      	cmp	r2, r3
 8004928:	d905      	bls.n	8004936 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800492a:	2301      	movs	r3, #1
 800492c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800492e:	4b0a      	ldr	r3, [pc, #40]	@ (8004958 <xTaskRemoveFromEventList+0xc4>)
 8004930:	2201      	movs	r2, #1
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	e001      	b.n	800493a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800493a:	697b      	ldr	r3, [r7, #20]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	20000d30 	.word	0x20000d30
 8004948:	20000d10 	.word	0x20000d10
 800494c:	20000838 	.word	0x20000838
 8004950:	20000cc8 	.word	0x20000cc8
 8004954:	20000834 	.word	0x20000834
 8004958:	20000d1c 	.word	0x20000d1c

0800495c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004964:	4b06      	ldr	r3, [pc, #24]	@ (8004980 <vTaskInternalSetTimeOutState+0x24>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800496c:	4b05      	ldr	r3, [pc, #20]	@ (8004984 <vTaskInternalSetTimeOutState+0x28>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	605a      	str	r2, [r3, #4]
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	20000d20 	.word	0x20000d20
 8004984:	20000d0c 	.word	0x20000d0c

08004988 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10b      	bne.n	80049b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	613b      	str	r3, [r7, #16]
}
 80049aa:	bf00      	nop
 80049ac:	bf00      	nop
 80049ae:	e7fd      	b.n	80049ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10b      	bne.n	80049ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	60fb      	str	r3, [r7, #12]
}
 80049c8:	bf00      	nop
 80049ca:	bf00      	nop
 80049cc:	e7fd      	b.n	80049ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80049ce:	f000 ff8b 	bl	80058e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004a48 <xTaskCheckForTimeOut+0xc0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049ea:	d102      	bne.n	80049f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61fb      	str	r3, [r7, #28]
 80049f0:	e023      	b.n	8004a3a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	4b15      	ldr	r3, [pc, #84]	@ (8004a4c <xTaskCheckForTimeOut+0xc4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d007      	beq.n	8004a0e <xTaskCheckForTimeOut+0x86>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d302      	bcc.n	8004a0e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	61fb      	str	r3, [r7, #28]
 8004a0c:	e015      	b.n	8004a3a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d20b      	bcs.n	8004a30 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	1ad2      	subs	r2, r2, r3
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7ff ff99 	bl	800495c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61fb      	str	r3, [r7, #28]
 8004a2e:	e004      	b.n	8004a3a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a36:	2301      	movs	r3, #1
 8004a38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a3a:	f000 ff87 	bl	800594c <vPortExitCritical>

	return xReturn;
 8004a3e:	69fb      	ldr	r3, [r7, #28]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3720      	adds	r7, #32
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20000d0c 	.word	0x20000d0c
 8004a4c:	20000d20 	.word	0x20000d20

08004a50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a54:	4b03      	ldr	r3, [pc, #12]	@ (8004a64 <vTaskMissedYield+0x14>)
 8004a56:	2201      	movs	r2, #1
 8004a58:	601a      	str	r2, [r3, #0]
}
 8004a5a:	bf00      	nop
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	20000d1c 	.word	0x20000d1c

08004a68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a70:	f000 f852 	bl	8004b18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a74:	4b06      	ldr	r3, [pc, #24]	@ (8004a90 <prvIdleTask+0x28>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d9f9      	bls.n	8004a70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a7c:	4b05      	ldr	r3, [pc, #20]	@ (8004a94 <prvIdleTask+0x2c>)
 8004a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a8c:	e7f0      	b.n	8004a70 <prvIdleTask+0x8>
 8004a8e:	bf00      	nop
 8004a90:	20000838 	.word	0x20000838
 8004a94:	e000ed04 	.word	0xe000ed04

08004a98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	607b      	str	r3, [r7, #4]
 8004aa2:	e00c      	b.n	8004abe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4a12      	ldr	r2, [pc, #72]	@ (8004af8 <prvInitialiseTaskLists+0x60>)
 8004ab0:	4413      	add	r3, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe fb72 	bl	800319c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3301      	adds	r3, #1
 8004abc:	607b      	str	r3, [r7, #4]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b37      	cmp	r3, #55	@ 0x37
 8004ac2:	d9ef      	bls.n	8004aa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ac4:	480d      	ldr	r0, [pc, #52]	@ (8004afc <prvInitialiseTaskLists+0x64>)
 8004ac6:	f7fe fb69 	bl	800319c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004aca:	480d      	ldr	r0, [pc, #52]	@ (8004b00 <prvInitialiseTaskLists+0x68>)
 8004acc:	f7fe fb66 	bl	800319c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ad0:	480c      	ldr	r0, [pc, #48]	@ (8004b04 <prvInitialiseTaskLists+0x6c>)
 8004ad2:	f7fe fb63 	bl	800319c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ad6:	480c      	ldr	r0, [pc, #48]	@ (8004b08 <prvInitialiseTaskLists+0x70>)
 8004ad8:	f7fe fb60 	bl	800319c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004adc:	480b      	ldr	r0, [pc, #44]	@ (8004b0c <prvInitialiseTaskLists+0x74>)
 8004ade:	f7fe fb5d 	bl	800319c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <prvInitialiseTaskLists+0x78>)
 8004ae4:	4a05      	ldr	r2, [pc, #20]	@ (8004afc <prvInitialiseTaskLists+0x64>)
 8004ae6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b14 <prvInitialiseTaskLists+0x7c>)
 8004aea:	4a05      	ldr	r2, [pc, #20]	@ (8004b00 <prvInitialiseTaskLists+0x68>)
 8004aec:	601a      	str	r2, [r3, #0]
}
 8004aee:	bf00      	nop
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	20000838 	.word	0x20000838
 8004afc:	20000c98 	.word	0x20000c98
 8004b00:	20000cac 	.word	0x20000cac
 8004b04:	20000cc8 	.word	0x20000cc8
 8004b08:	20000cdc 	.word	0x20000cdc
 8004b0c:	20000cf4 	.word	0x20000cf4
 8004b10:	20000cc0 	.word	0x20000cc0
 8004b14:	20000cc4 	.word	0x20000cc4

08004b18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b1e:	e019      	b.n	8004b54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b20:	f000 fee2 	bl	80058e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b24:	4b10      	ldr	r3, [pc, #64]	@ (8004b68 <prvCheckTasksWaitingTermination+0x50>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fe fbbd 	bl	80032b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b36:	4b0d      	ldr	r3, [pc, #52]	@ (8004b6c <prvCheckTasksWaitingTermination+0x54>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8004b6c <prvCheckTasksWaitingTermination+0x54>)
 8004b3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b40:	4b0b      	ldr	r3, [pc, #44]	@ (8004b70 <prvCheckTasksWaitingTermination+0x58>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	4a0a      	ldr	r2, [pc, #40]	@ (8004b70 <prvCheckTasksWaitingTermination+0x58>)
 8004b48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b4a:	f000 feff 	bl	800594c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f810 	bl	8004b74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b54:	4b06      	ldr	r3, [pc, #24]	@ (8004b70 <prvCheckTasksWaitingTermination+0x58>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e1      	bne.n	8004b20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b5c:	bf00      	nop
 8004b5e:	bf00      	nop
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20000cdc 	.word	0x20000cdc
 8004b6c:	20000d08 	.word	0x20000d08
 8004b70:	20000cf0 	.word	0x20000cf0

08004b74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d108      	bne.n	8004b98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f001 f89c 	bl	8005cc8 <vPortFree>
				vPortFree( pxTCB );
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f001 f899 	bl	8005cc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b96:	e019      	b.n	8004bcc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d103      	bne.n	8004baa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f001 f890 	bl	8005cc8 <vPortFree>
	}
 8004ba8:	e010      	b.n	8004bcc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d00b      	beq.n	8004bcc <prvDeleteTCB+0x58>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	60fb      	str	r3, [r7, #12]
}
 8004bc6:	bf00      	nop
 8004bc8:	bf00      	nop
 8004bca:	e7fd      	b.n	8004bc8 <prvDeleteTCB+0x54>
	}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bda:	4b0c      	ldr	r3, [pc, #48]	@ (8004c0c <prvResetNextTaskUnblockTime+0x38>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d104      	bne.n	8004bee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004be4:	4b0a      	ldr	r3, [pc, #40]	@ (8004c10 <prvResetNextTaskUnblockTime+0x3c>)
 8004be6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004bea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bec:	e008      	b.n	8004c00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bee:	4b07      	ldr	r3, [pc, #28]	@ (8004c0c <prvResetNextTaskUnblockTime+0x38>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4a04      	ldr	r2, [pc, #16]	@ (8004c10 <prvResetNextTaskUnblockTime+0x3c>)
 8004bfe:	6013      	str	r3, [r2, #0]
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	20000cc0 	.word	0x20000cc0
 8004c10:	20000d28 	.word	0x20000d28

08004c14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c48 <xTaskGetSchedulerState+0x34>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d102      	bne.n	8004c28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c22:	2301      	movs	r3, #1
 8004c24:	607b      	str	r3, [r7, #4]
 8004c26:	e008      	b.n	8004c3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c28:	4b08      	ldr	r3, [pc, #32]	@ (8004c4c <xTaskGetSchedulerState+0x38>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d102      	bne.n	8004c36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c30:	2302      	movs	r3, #2
 8004c32:	607b      	str	r3, [r7, #4]
 8004c34:	e001      	b.n	8004c3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c36:	2300      	movs	r3, #0
 8004c38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c3a:	687b      	ldr	r3, [r7, #4]
	}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	20000d14 	.word	0x20000d14
 8004c4c:	20000d30 	.word	0x20000d30

08004c50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d051      	beq.n	8004d0a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004d14 <xTaskPriorityInherit+0xc4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d241      	bcs.n	8004cf8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	db06      	blt.n	8004c8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c7c:	4b25      	ldr	r3, [pc, #148]	@ (8004d14 <xTaskPriorityInherit+0xc4>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c82:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	6959      	ldr	r1, [r3, #20]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004d18 <xTaskPriorityInherit+0xc8>)
 8004c9c:	4413      	add	r3, r2
 8004c9e:	4299      	cmp	r1, r3
 8004ca0:	d122      	bne.n	8004ce8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fe fb02 	bl	80032b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004cac:	4b19      	ldr	r3, [pc, #100]	@ (8004d14 <xTaskPriorityInherit+0xc4>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cba:	4b18      	ldr	r3, [pc, #96]	@ (8004d1c <xTaskPriorityInherit+0xcc>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d903      	bls.n	8004cca <xTaskPriorityInherit+0x7a>
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc6:	4a15      	ldr	r2, [pc, #84]	@ (8004d1c <xTaskPriorityInherit+0xcc>)
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4a10      	ldr	r2, [pc, #64]	@ (8004d18 <xTaskPriorityInherit+0xc8>)
 8004cd8:	441a      	add	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	f7fe fa88 	bl	80031f6 <vListInsertEnd>
 8004ce6:	e004      	b.n	8004cf2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8004d14 <xTaskPriorityInherit+0xc4>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	e008      	b.n	8004d0a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004cfc:	4b05      	ldr	r3, [pc, #20]	@ (8004d14 <xTaskPriorityInherit+0xc4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d201      	bcs.n	8004d0a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004d06:	2301      	movs	r3, #1
 8004d08:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
	}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20000834 	.word	0x20000834
 8004d18:	20000838 	.word	0x20000838
 8004d1c:	20000d10 	.word	0x20000d10

08004d20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d058      	beq.n	8004de8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d36:	4b2f      	ldr	r3, [pc, #188]	@ (8004df4 <xTaskPriorityDisinherit+0xd4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d00b      	beq.n	8004d58 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	60fb      	str	r3, [r7, #12]
}
 8004d52:	bf00      	nop
 8004d54:	bf00      	nop
 8004d56:	e7fd      	b.n	8004d54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10b      	bne.n	8004d78 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	60bb      	str	r3, [r7, #8]
}
 8004d72:	bf00      	nop
 8004d74:	bf00      	nop
 8004d76:	e7fd      	b.n	8004d74 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d7c:	1e5a      	subs	r2, r3, #1
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d02c      	beq.n	8004de8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d128      	bne.n	8004de8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fe fa88 	bl	80032b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004db8:	4b0f      	ldr	r3, [pc, #60]	@ (8004df8 <xTaskPriorityDisinherit+0xd8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d903      	bls.n	8004dc8 <xTaskPriorityDisinherit+0xa8>
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8004df8 <xTaskPriorityDisinherit+0xd8>)
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4a09      	ldr	r2, [pc, #36]	@ (8004dfc <xTaskPriorityDisinherit+0xdc>)
 8004dd6:	441a      	add	r2, r3
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4610      	mov	r0, r2
 8004de0:	f7fe fa09 	bl	80031f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004de4:	2301      	movs	r3, #1
 8004de6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004de8:	697b      	ldr	r3, [r7, #20]
	}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000834 	.word	0x20000834
 8004df8:	20000d10 	.word	0x20000d10
 8004dfc:	20000838 	.word	0x20000838

08004e00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d06c      	beq.n	8004ef2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10b      	bne.n	8004e38 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	60fb      	str	r3, [r7, #12]
}
 8004e32:	bf00      	nop
 8004e34:	bf00      	nop
 8004e36:	e7fd      	b.n	8004e34 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d902      	bls.n	8004e48 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	61fb      	str	r3, [r7, #28]
 8004e46:	e002      	b.n	8004e4e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e4c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d04c      	beq.n	8004ef2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d147      	bne.n	8004ef2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004e62:	4b26      	ldr	r3, [pc, #152]	@ (8004efc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d10b      	bne.n	8004e84 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	60bb      	str	r3, [r7, #8]
}
 8004e7e:	bf00      	nop
 8004e80:	bf00      	nop
 8004e82:	e7fd      	b.n	8004e80 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e88:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	69fa      	ldr	r2, [r7, #28]
 8004e8e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	db04      	blt.n	8004ea2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	6959      	ldr	r1, [r3, #20]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4a13      	ldr	r2, [pc, #76]	@ (8004f00 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004eb2:	4413      	add	r3, r2
 8004eb4:	4299      	cmp	r1, r3
 8004eb6:	d11c      	bne.n	8004ef2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fe f9f7 	bl	80032b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8004f04 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d903      	bls.n	8004ed6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed2:	4a0c      	ldr	r2, [pc, #48]	@ (8004f04 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4a07      	ldr	r2, [pc, #28]	@ (8004f00 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004ee4:	441a      	add	r2, r3
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f7fe f982 	bl	80031f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ef2:	bf00      	nop
 8004ef4:	3720      	adds	r7, #32
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20000834 	.word	0x20000834
 8004f00:	20000838 	.word	0x20000838
 8004f04:	20000d10 	.word	0x20000d10

08004f08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004f0c:	4b07      	ldr	r3, [pc, #28]	@ (8004f2c <pvTaskIncrementMutexHeldCount+0x24>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d004      	beq.n	8004f1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004f14:	4b05      	ldr	r3, [pc, #20]	@ (8004f2c <pvTaskIncrementMutexHeldCount+0x24>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f1a:	3201      	adds	r2, #1
 8004f1c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004f1e:	4b03      	ldr	r3, [pc, #12]	@ (8004f2c <pvTaskIncrementMutexHeldCount+0x24>)
 8004f20:	681b      	ldr	r3, [r3, #0]
	}
 8004f22:	4618      	mov	r0, r3
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	20000834 	.word	0x20000834

08004f30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004f3a:	4b21      	ldr	r3, [pc, #132]	@ (8004fc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f40:	4b20      	ldr	r3, [pc, #128]	@ (8004fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3304      	adds	r3, #4
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fe f9b2 	bl	80032b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f52:	d10a      	bne.n	8004f6a <prvAddCurrentTaskToDelayedList+0x3a>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d007      	beq.n	8004f6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4619      	mov	r1, r3
 8004f62:	4819      	ldr	r0, [pc, #100]	@ (8004fc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004f64:	f7fe f947 	bl	80031f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f68:	e026      	b.n	8004fb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4413      	add	r3, r2
 8004f70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f72:	4b14      	ldr	r3, [pc, #80]	@ (8004fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d209      	bcs.n	8004f96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f82:	4b12      	ldr	r3, [pc, #72]	@ (8004fcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	4b0f      	ldr	r3, [pc, #60]	@ (8004fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4610      	mov	r0, r2
 8004f90:	f7fe f955 	bl	800323e <vListInsert>
}
 8004f94:	e010      	b.n	8004fb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f96:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	f7fe f94b 	bl	800323e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d202      	bcs.n	8004fb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004fb2:	4a08      	ldr	r2, [pc, #32]	@ (8004fd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	6013      	str	r3, [r2, #0]
}
 8004fb8:	bf00      	nop
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	20000d0c 	.word	0x20000d0c
 8004fc4:	20000834 	.word	0x20000834
 8004fc8:	20000cf4 	.word	0x20000cf4
 8004fcc:	20000cc4 	.word	0x20000cc4
 8004fd0:	20000cc0 	.word	0x20000cc0
 8004fd4:	20000d28 	.word	0x20000d28

08004fd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08a      	sub	sp, #40	@ 0x28
 8004fdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004fe2:	f000 fb13 	bl	800560c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800505c <xTimerCreateTimerTask+0x84>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d021      	beq.n	8005032 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004ff6:	1d3a      	adds	r2, r7, #4
 8004ff8:	f107 0108 	add.w	r1, r7, #8
 8004ffc:	f107 030c 	add.w	r3, r7, #12
 8005000:	4618      	mov	r0, r3
 8005002:	f7fe f8b1 	bl	8003168 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	9202      	str	r2, [sp, #8]
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	2302      	movs	r3, #2
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	2300      	movs	r3, #0
 8005016:	460a      	mov	r2, r1
 8005018:	4911      	ldr	r1, [pc, #68]	@ (8005060 <xTimerCreateTimerTask+0x88>)
 800501a:	4812      	ldr	r0, [pc, #72]	@ (8005064 <xTimerCreateTimerTask+0x8c>)
 800501c:	f7fe ffd0 	bl	8003fc0 <xTaskCreateStatic>
 8005020:	4603      	mov	r3, r0
 8005022:	4a11      	ldr	r2, [pc, #68]	@ (8005068 <xTimerCreateTimerTask+0x90>)
 8005024:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005026:	4b10      	ldr	r3, [pc, #64]	@ (8005068 <xTimerCreateTimerTask+0x90>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800502e:	2301      	movs	r3, #1
 8005030:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10b      	bne.n	8005050 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	613b      	str	r3, [r7, #16]
}
 800504a:	bf00      	nop
 800504c:	bf00      	nop
 800504e:	e7fd      	b.n	800504c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005050:	697b      	ldr	r3, [r7, #20]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000d64 	.word	0x20000d64
 8005060:	0800696c 	.word	0x0800696c
 8005064:	080051a5 	.word	0x080051a5
 8005068:	20000d68 	.word	0x20000d68

0800506c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08a      	sub	sp, #40	@ 0x28
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
 8005078:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800507a:	2300      	movs	r3, #0
 800507c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10b      	bne.n	800509c <xTimerGenericCommand+0x30>
	__asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	623b      	str	r3, [r7, #32]
}
 8005096:	bf00      	nop
 8005098:	bf00      	nop
 800509a:	e7fd      	b.n	8005098 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800509c:	4b19      	ldr	r3, [pc, #100]	@ (8005104 <xTimerGenericCommand+0x98>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d02a      	beq.n	80050fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2b05      	cmp	r3, #5
 80050b4:	dc18      	bgt.n	80050e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80050b6:	f7ff fdad 	bl	8004c14 <xTaskGetSchedulerState>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d109      	bne.n	80050d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80050c0:	4b10      	ldr	r3, [pc, #64]	@ (8005104 <xTimerGenericCommand+0x98>)
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	f107 0110 	add.w	r1, r7, #16
 80050c8:	2300      	movs	r3, #0
 80050ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050cc:	f7fe fa60 	bl	8003590 <xQueueGenericSend>
 80050d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80050d2:	e012      	b.n	80050fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80050d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005104 <xTimerGenericCommand+0x98>)
 80050d6:	6818      	ldr	r0, [r3, #0]
 80050d8:	f107 0110 	add.w	r1, r7, #16
 80050dc:	2300      	movs	r3, #0
 80050de:	2200      	movs	r2, #0
 80050e0:	f7fe fa56 	bl	8003590 <xQueueGenericSend>
 80050e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80050e6:	e008      	b.n	80050fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80050e8:	4b06      	ldr	r3, [pc, #24]	@ (8005104 <xTimerGenericCommand+0x98>)
 80050ea:	6818      	ldr	r0, [r3, #0]
 80050ec:	f107 0110 	add.w	r1, r7, #16
 80050f0:	2300      	movs	r3, #0
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	f7fe fb4e 	bl	8003794 <xQueueGenericSendFromISR>
 80050f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3728      	adds	r7, #40	@ 0x28
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20000d64 	.word	0x20000d64

08005108 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af02      	add	r7, sp, #8
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005112:	4b23      	ldr	r3, [pc, #140]	@ (80051a0 <prvProcessExpiredTimer+0x98>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	3304      	adds	r3, #4
 8005120:	4618      	mov	r0, r3
 8005122:	f7fe f8c5 	bl	80032b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b00      	cmp	r3, #0
 8005132:	d023      	beq.n	800517c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	699a      	ldr	r2, [r3, #24]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	18d1      	adds	r1, r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	6978      	ldr	r0, [r7, #20]
 8005142:	f000 f8d5 	bl	80052f0 <prvInsertTimerInActiveList>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d020      	beq.n	800518e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800514c:	2300      	movs	r3, #0
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	2300      	movs	r3, #0
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	2100      	movs	r1, #0
 8005156:	6978      	ldr	r0, [r7, #20]
 8005158:	f7ff ff88 	bl	800506c <xTimerGenericCommand>
 800515c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d114      	bne.n	800518e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	60fb      	str	r3, [r7, #12]
}
 8005176:	bf00      	nop
 8005178:	bf00      	nop
 800517a:	e7fd      	b.n	8005178 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005182:	f023 0301 	bic.w	r3, r3, #1
 8005186:	b2da      	uxtb	r2, r3
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	6978      	ldr	r0, [r7, #20]
 8005194:	4798      	blx	r3
}
 8005196:	bf00      	nop
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	20000d5c 	.word	0x20000d5c

080051a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051ac:	f107 0308 	add.w	r3, r7, #8
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 f859 	bl	8005268 <prvGetNextExpireTime>
 80051b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	4619      	mov	r1, r3
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f805 	bl	80051cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80051c2:	f000 f8d7 	bl	8005374 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80051c6:	bf00      	nop
 80051c8:	e7f0      	b.n	80051ac <prvTimerTask+0x8>
	...

080051cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80051d6:	f7ff f937 	bl	8004448 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051da:	f107 0308 	add.w	r3, r7, #8
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 f866 	bl	80052b0 <prvSampleTimeNow>
 80051e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d130      	bne.n	800524e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10a      	bne.n	8005208 <prvProcessTimerOrBlockTask+0x3c>
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d806      	bhi.n	8005208 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80051fa:	f7ff f933 	bl	8004464 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80051fe:	68f9      	ldr	r1, [r7, #12]
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff ff81 	bl	8005108 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005206:	e024      	b.n	8005252 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d008      	beq.n	8005220 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800520e:	4b13      	ldr	r3, [pc, #76]	@ (800525c <prvProcessTimerOrBlockTask+0x90>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <prvProcessTimerOrBlockTask+0x50>
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <prvProcessTimerOrBlockTask+0x52>
 800521c:	2300      	movs	r3, #0
 800521e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005220:	4b0f      	ldr	r3, [pc, #60]	@ (8005260 <prvProcessTimerOrBlockTask+0x94>)
 8005222:	6818      	ldr	r0, [r3, #0]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	4619      	mov	r1, r3
 800522e:	f7fe fe93 	bl	8003f58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005232:	f7ff f917 	bl	8004464 <xTaskResumeAll>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800523c:	4b09      	ldr	r3, [pc, #36]	@ (8005264 <prvProcessTimerOrBlockTask+0x98>)
 800523e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	f3bf 8f6f 	isb	sy
}
 800524c:	e001      	b.n	8005252 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800524e:	f7ff f909 	bl	8004464 <xTaskResumeAll>
}
 8005252:	bf00      	nop
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20000d60 	.word	0x20000d60
 8005260:	20000d64 	.word	0x20000d64
 8005264:	e000ed04 	.word	0xe000ed04

08005268 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005270:	4b0e      	ldr	r3, [pc, #56]	@ (80052ac <prvGetNextExpireTime+0x44>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <prvGetNextExpireTime+0x16>
 800527a:	2201      	movs	r2, #1
 800527c:	e000      	b.n	8005280 <prvGetNextExpireTime+0x18>
 800527e:	2200      	movs	r2, #0
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d105      	bne.n	8005298 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800528c:	4b07      	ldr	r3, [pc, #28]	@ (80052ac <prvGetNextExpireTime+0x44>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	e001      	b.n	800529c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800529c:	68fb      	ldr	r3, [r7, #12]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	20000d5c 	.word	0x20000d5c

080052b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80052b8:	f7ff f972 	bl	80045a0 <xTaskGetTickCount>
 80052bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80052be:	4b0b      	ldr	r3, [pc, #44]	@ (80052ec <prvSampleTimeNow+0x3c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d205      	bcs.n	80052d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80052c8:	f000 f93a 	bl	8005540 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	e002      	b.n	80052da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80052da:	4a04      	ldr	r2, [pc, #16]	@ (80052ec <prvSampleTimeNow+0x3c>)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80052e0:	68fb      	ldr	r3, [r7, #12]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20000d6c 	.word	0x20000d6c

080052f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	429a      	cmp	r2, r3
 8005314:	d812      	bhi.n	800533c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	1ad2      	subs	r2, r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	429a      	cmp	r2, r3
 8005322:	d302      	bcc.n	800532a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005324:	2301      	movs	r3, #1
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	e01b      	b.n	8005362 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800532a:	4b10      	ldr	r3, [pc, #64]	@ (800536c <prvInsertTimerInActiveList+0x7c>)
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3304      	adds	r3, #4
 8005332:	4619      	mov	r1, r3
 8005334:	4610      	mov	r0, r2
 8005336:	f7fd ff82 	bl	800323e <vListInsert>
 800533a:	e012      	b.n	8005362 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d206      	bcs.n	8005352 <prvInsertTimerInActiveList+0x62>
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	429a      	cmp	r2, r3
 800534a:	d302      	bcc.n	8005352 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800534c:	2301      	movs	r3, #1
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	e007      	b.n	8005362 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005352:	4b07      	ldr	r3, [pc, #28]	@ (8005370 <prvInsertTimerInActiveList+0x80>)
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	3304      	adds	r3, #4
 800535a:	4619      	mov	r1, r3
 800535c:	4610      	mov	r0, r2
 800535e:	f7fd ff6e 	bl	800323e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005362:	697b      	ldr	r3, [r7, #20]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20000d60 	.word	0x20000d60
 8005370:	20000d5c 	.word	0x20000d5c

08005374 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08e      	sub	sp, #56	@ 0x38
 8005378:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800537a:	e0ce      	b.n	800551a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	da19      	bge.n	80053b6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005382:	1d3b      	adds	r3, r7, #4
 8005384:	3304      	adds	r3, #4
 8005386:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10b      	bne.n	80053a6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	61fb      	str	r3, [r7, #28]
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	e7fd      	b.n	80053a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80053a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ac:	6850      	ldr	r0, [r2, #4]
 80053ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053b0:	6892      	ldr	r2, [r2, #8]
 80053b2:	4611      	mov	r1, r2
 80053b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f2c0 80ae 	blt.w	800551a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80053c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d004      	beq.n	80053d4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80053ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053cc:	3304      	adds	r3, #4
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fd ff6e 	bl	80032b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053d4:	463b      	mov	r3, r7
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff ff6a 	bl	80052b0 <prvSampleTimeNow>
 80053dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b09      	cmp	r3, #9
 80053e2:	f200 8097 	bhi.w	8005514 <prvProcessReceivedCommands+0x1a0>
 80053e6:	a201      	add	r2, pc, #4	@ (adr r2, 80053ec <prvProcessReceivedCommands+0x78>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	08005415 	.word	0x08005415
 80053f0:	08005415 	.word	0x08005415
 80053f4:	08005415 	.word	0x08005415
 80053f8:	0800548b 	.word	0x0800548b
 80053fc:	0800549f 	.word	0x0800549f
 8005400:	080054eb 	.word	0x080054eb
 8005404:	08005415 	.word	0x08005415
 8005408:	08005415 	.word	0x08005415
 800540c:	0800548b 	.word	0x0800548b
 8005410:	0800549f 	.word	0x0800549f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005416:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800541a:	f043 0301 	orr.w	r3, r3, #1
 800541e:	b2da      	uxtb	r2, r3
 8005420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005422:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	18d1      	adds	r1, r2, r3
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005434:	f7ff ff5c 	bl	80052f0 <prvInsertTimerInActiveList>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d06c      	beq.n	8005518 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800543e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005444:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005448:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d061      	beq.n	8005518 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	441a      	add	r2, r3
 800545c:	2300      	movs	r3, #0
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	2300      	movs	r3, #0
 8005462:	2100      	movs	r1, #0
 8005464:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005466:	f7ff fe01 	bl	800506c <xTimerGenericCommand>
 800546a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d152      	bne.n	8005518 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005476:	f383 8811 	msr	BASEPRI, r3
 800547a:	f3bf 8f6f 	isb	sy
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	61bb      	str	r3, [r7, #24]
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	e7fd      	b.n	8005486 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800548a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005490:	f023 0301 	bic.w	r3, r3, #1
 8005494:	b2da      	uxtb	r2, r3
 8005496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005498:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800549c:	e03d      	b.n	800551a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800549e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054a4:	f043 0301 	orr.w	r3, r3, #1
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80054b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10b      	bne.n	80054d6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	617b      	str	r3, [r7, #20]
}
 80054d0:	bf00      	nop
 80054d2:	bf00      	nop
 80054d4:	e7fd      	b.n	80054d2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80054d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d8:	699a      	ldr	r2, [r3, #24]
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	18d1      	adds	r1, r2, r3
 80054de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054e4:	f7ff ff04 	bl	80052f0 <prvInsertTimerInActiveList>
					break;
 80054e8:	e017      	b.n	800551a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80054ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d103      	bne.n	8005500 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80054f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054fa:	f000 fbe5 	bl	8005cc8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80054fe:	e00c      	b.n	800551a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005502:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005506:	f023 0301 	bic.w	r3, r3, #1
 800550a:	b2da      	uxtb	r2, r3
 800550c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005512:	e002      	b.n	800551a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005514:	bf00      	nop
 8005516:	e000      	b.n	800551a <prvProcessReceivedCommands+0x1a6>
					break;
 8005518:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800551a:	4b08      	ldr	r3, [pc, #32]	@ (800553c <prvProcessReceivedCommands+0x1c8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	1d39      	adds	r1, r7, #4
 8005520:	2200      	movs	r2, #0
 8005522:	4618      	mov	r0, r3
 8005524:	f7fe f9d4 	bl	80038d0 <xQueueReceive>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	f47f af26 	bne.w	800537c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005530:	bf00      	nop
 8005532:	bf00      	nop
 8005534:	3730      	adds	r7, #48	@ 0x30
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	20000d64 	.word	0x20000d64

08005540 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005546:	e049      	b.n	80055dc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005548:	4b2e      	ldr	r3, [pc, #184]	@ (8005604 <prvSwitchTimerLists+0xc4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005552:	4b2c      	ldr	r3, [pc, #176]	@ (8005604 <prvSwitchTimerLists+0xc4>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3304      	adds	r3, #4
 8005560:	4618      	mov	r0, r3
 8005562:	f7fd fea5 	bl	80032b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d02f      	beq.n	80055dc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	4413      	add	r3, r2
 8005584:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	429a      	cmp	r2, r3
 800558c:	d90e      	bls.n	80055ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800559a:	4b1a      	ldr	r3, [pc, #104]	@ (8005604 <prvSwitchTimerLists+0xc4>)
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3304      	adds	r3, #4
 80055a2:	4619      	mov	r1, r3
 80055a4:	4610      	mov	r0, r2
 80055a6:	f7fd fe4a 	bl	800323e <vListInsert>
 80055aa:	e017      	b.n	80055dc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055ac:	2300      	movs	r3, #0
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	2300      	movs	r3, #0
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	2100      	movs	r1, #0
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7ff fd58 	bl	800506c <xTimerGenericCommand>
 80055bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10b      	bne.n	80055dc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	603b      	str	r3, [r7, #0]
}
 80055d6:	bf00      	nop
 80055d8:	bf00      	nop
 80055da:	e7fd      	b.n	80055d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055dc:	4b09      	ldr	r3, [pc, #36]	@ (8005604 <prvSwitchTimerLists+0xc4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1b0      	bne.n	8005548 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80055e6:	4b07      	ldr	r3, [pc, #28]	@ (8005604 <prvSwitchTimerLists+0xc4>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80055ec:	4b06      	ldr	r3, [pc, #24]	@ (8005608 <prvSwitchTimerLists+0xc8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a04      	ldr	r2, [pc, #16]	@ (8005604 <prvSwitchTimerLists+0xc4>)
 80055f2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80055f4:	4a04      	ldr	r2, [pc, #16]	@ (8005608 <prvSwitchTimerLists+0xc8>)
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	6013      	str	r3, [r2, #0]
}
 80055fa:	bf00      	nop
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000d5c 	.word	0x20000d5c
 8005608:	20000d60 	.word	0x20000d60

0800560c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005612:	f000 f969 	bl	80058e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005616:	4b15      	ldr	r3, [pc, #84]	@ (800566c <prvCheckForValidListAndQueue+0x60>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d120      	bne.n	8005660 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800561e:	4814      	ldr	r0, [pc, #80]	@ (8005670 <prvCheckForValidListAndQueue+0x64>)
 8005620:	f7fd fdbc 	bl	800319c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005624:	4813      	ldr	r0, [pc, #76]	@ (8005674 <prvCheckForValidListAndQueue+0x68>)
 8005626:	f7fd fdb9 	bl	800319c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800562a:	4b13      	ldr	r3, [pc, #76]	@ (8005678 <prvCheckForValidListAndQueue+0x6c>)
 800562c:	4a10      	ldr	r2, [pc, #64]	@ (8005670 <prvCheckForValidListAndQueue+0x64>)
 800562e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005630:	4b12      	ldr	r3, [pc, #72]	@ (800567c <prvCheckForValidListAndQueue+0x70>)
 8005632:	4a10      	ldr	r2, [pc, #64]	@ (8005674 <prvCheckForValidListAndQueue+0x68>)
 8005634:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005636:	2300      	movs	r3, #0
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	4b11      	ldr	r3, [pc, #68]	@ (8005680 <prvCheckForValidListAndQueue+0x74>)
 800563c:	4a11      	ldr	r2, [pc, #68]	@ (8005684 <prvCheckForValidListAndQueue+0x78>)
 800563e:	2110      	movs	r1, #16
 8005640:	200a      	movs	r0, #10
 8005642:	f7fd fec9 	bl	80033d8 <xQueueGenericCreateStatic>
 8005646:	4603      	mov	r3, r0
 8005648:	4a08      	ldr	r2, [pc, #32]	@ (800566c <prvCheckForValidListAndQueue+0x60>)
 800564a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800564c:	4b07      	ldr	r3, [pc, #28]	@ (800566c <prvCheckForValidListAndQueue+0x60>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005654:	4b05      	ldr	r3, [pc, #20]	@ (800566c <prvCheckForValidListAndQueue+0x60>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	490b      	ldr	r1, [pc, #44]	@ (8005688 <prvCheckForValidListAndQueue+0x7c>)
 800565a:	4618      	mov	r0, r3
 800565c:	f7fe fc52 	bl	8003f04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005660:	f000 f974 	bl	800594c <vPortExitCritical>
}
 8005664:	bf00      	nop
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	20000d64 	.word	0x20000d64
 8005670:	20000d34 	.word	0x20000d34
 8005674:	20000d48 	.word	0x20000d48
 8005678:	20000d5c 	.word	0x20000d5c
 800567c:	20000d60 	.word	0x20000d60
 8005680:	20000e10 	.word	0x20000e10
 8005684:	20000d70 	.word	0x20000d70
 8005688:	08006974 	.word	0x08006974

0800568c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	3b04      	subs	r3, #4
 800569c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80056a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	3b04      	subs	r3, #4
 80056aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f023 0201 	bic.w	r2, r3, #1
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3b04      	subs	r3, #4
 80056ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056bc:	4a0c      	ldr	r2, [pc, #48]	@ (80056f0 <pxPortInitialiseStack+0x64>)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3b14      	subs	r3, #20
 80056c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3b04      	subs	r3, #4
 80056d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f06f 0202 	mvn.w	r2, #2
 80056da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	3b20      	subs	r3, #32
 80056e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056e2:	68fb      	ldr	r3, [r7, #12]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	080056f5 	.word	0x080056f5

080056f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056fa:	2300      	movs	r3, #0
 80056fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056fe:	4b13      	ldr	r3, [pc, #76]	@ (800574c <prvTaskExitError+0x58>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005706:	d00b      	beq.n	8005720 <prvTaskExitError+0x2c>
	__asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	60fb      	str	r3, [r7, #12]
}
 800571a:	bf00      	nop
 800571c:	bf00      	nop
 800571e:	e7fd      	b.n	800571c <prvTaskExitError+0x28>
	__asm volatile
 8005720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	60bb      	str	r3, [r7, #8]
}
 8005732:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005734:	bf00      	nop
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0fc      	beq.n	8005736 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800573c:	bf00      	nop
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	2000000c 	.word	0x2000000c

08005750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005750:	4b07      	ldr	r3, [pc, #28]	@ (8005770 <pxCurrentTCBConst2>)
 8005752:	6819      	ldr	r1, [r3, #0]
 8005754:	6808      	ldr	r0, [r1, #0]
 8005756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800575a:	f380 8809 	msr	PSP, r0
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f04f 0000 	mov.w	r0, #0
 8005766:	f380 8811 	msr	BASEPRI, r0
 800576a:	4770      	bx	lr
 800576c:	f3af 8000 	nop.w

08005770 <pxCurrentTCBConst2>:
 8005770:	20000834 	.word	0x20000834
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005774:	bf00      	nop
 8005776:	bf00      	nop

08005778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005778:	4808      	ldr	r0, [pc, #32]	@ (800579c <prvPortStartFirstTask+0x24>)
 800577a:	6800      	ldr	r0, [r0, #0]
 800577c:	6800      	ldr	r0, [r0, #0]
 800577e:	f380 8808 	msr	MSP, r0
 8005782:	f04f 0000 	mov.w	r0, #0
 8005786:	f380 8814 	msr	CONTROL, r0
 800578a:	b662      	cpsie	i
 800578c:	b661      	cpsie	f
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	df00      	svc	0
 8005798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800579a:	bf00      	nop
 800579c:	e000ed08 	.word	0xe000ed08

080057a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80057a6:	4b47      	ldr	r3, [pc, #284]	@ (80058c4 <xPortStartScheduler+0x124>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a47      	ldr	r2, [pc, #284]	@ (80058c8 <xPortStartScheduler+0x128>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d10b      	bne.n	80057c8 <xPortStartScheduler+0x28>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	613b      	str	r3, [r7, #16]
}
 80057c2:	bf00      	nop
 80057c4:	bf00      	nop
 80057c6:	e7fd      	b.n	80057c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057c8:	4b3e      	ldr	r3, [pc, #248]	@ (80058c4 <xPortStartScheduler+0x124>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a3f      	ldr	r2, [pc, #252]	@ (80058cc <xPortStartScheduler+0x12c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d10b      	bne.n	80057ea <xPortStartScheduler+0x4a>
	__asm volatile
 80057d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	60fb      	str	r3, [r7, #12]
}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop
 80057e8:	e7fd      	b.n	80057e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057ea:	4b39      	ldr	r3, [pc, #228]	@ (80058d0 <xPortStartScheduler+0x130>)
 80057ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	22ff      	movs	r2, #255	@ 0xff
 80057fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	b2db      	uxtb	r3, r3
 8005802:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	b2db      	uxtb	r3, r3
 8005808:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800580c:	b2da      	uxtb	r2, r3
 800580e:	4b31      	ldr	r3, [pc, #196]	@ (80058d4 <xPortStartScheduler+0x134>)
 8005810:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005812:	4b31      	ldr	r3, [pc, #196]	@ (80058d8 <xPortStartScheduler+0x138>)
 8005814:	2207      	movs	r2, #7
 8005816:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005818:	e009      	b.n	800582e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800581a:	4b2f      	ldr	r3, [pc, #188]	@ (80058d8 <xPortStartScheduler+0x138>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3b01      	subs	r3, #1
 8005820:	4a2d      	ldr	r2, [pc, #180]	@ (80058d8 <xPortStartScheduler+0x138>)
 8005822:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005824:	78fb      	ldrb	r3, [r7, #3]
 8005826:	b2db      	uxtb	r3, r3
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	b2db      	uxtb	r3, r3
 800582c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	b2db      	uxtb	r3, r3
 8005832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005836:	2b80      	cmp	r3, #128	@ 0x80
 8005838:	d0ef      	beq.n	800581a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800583a:	4b27      	ldr	r3, [pc, #156]	@ (80058d8 <xPortStartScheduler+0x138>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f1c3 0307 	rsb	r3, r3, #7
 8005842:	2b04      	cmp	r3, #4
 8005844:	d00b      	beq.n	800585e <xPortStartScheduler+0xbe>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	60bb      	str	r3, [r7, #8]
}
 8005858:	bf00      	nop
 800585a:	bf00      	nop
 800585c:	e7fd      	b.n	800585a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800585e:	4b1e      	ldr	r3, [pc, #120]	@ (80058d8 <xPortStartScheduler+0x138>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	4a1c      	ldr	r2, [pc, #112]	@ (80058d8 <xPortStartScheduler+0x138>)
 8005866:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005868:	4b1b      	ldr	r3, [pc, #108]	@ (80058d8 <xPortStartScheduler+0x138>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005870:	4a19      	ldr	r2, [pc, #100]	@ (80058d8 <xPortStartScheduler+0x138>)
 8005872:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	b2da      	uxtb	r2, r3
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800587c:	4b17      	ldr	r3, [pc, #92]	@ (80058dc <xPortStartScheduler+0x13c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a16      	ldr	r2, [pc, #88]	@ (80058dc <xPortStartScheduler+0x13c>)
 8005882:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005886:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005888:	4b14      	ldr	r3, [pc, #80]	@ (80058dc <xPortStartScheduler+0x13c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a13      	ldr	r2, [pc, #76]	@ (80058dc <xPortStartScheduler+0x13c>)
 800588e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005892:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005894:	f000 f8da 	bl	8005a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005898:	4b11      	ldr	r3, [pc, #68]	@ (80058e0 <xPortStartScheduler+0x140>)
 800589a:	2200      	movs	r2, #0
 800589c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800589e:	f000 f8f9 	bl	8005a94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80058a2:	4b10      	ldr	r3, [pc, #64]	@ (80058e4 <xPortStartScheduler+0x144>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a0f      	ldr	r2, [pc, #60]	@ (80058e4 <xPortStartScheduler+0x144>)
 80058a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80058ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80058ae:	f7ff ff63 	bl	8005778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058b2:	f7fe ff3f 	bl	8004734 <vTaskSwitchContext>
	prvTaskExitError();
 80058b6:	f7ff ff1d 	bl	80056f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	e000ed00 	.word	0xe000ed00
 80058c8:	410fc271 	.word	0x410fc271
 80058cc:	410fc270 	.word	0x410fc270
 80058d0:	e000e400 	.word	0xe000e400
 80058d4:	20000e60 	.word	0x20000e60
 80058d8:	20000e64 	.word	0x20000e64
 80058dc:	e000ed20 	.word	0xe000ed20
 80058e0:	2000000c 	.word	0x2000000c
 80058e4:	e000ef34 	.word	0xe000ef34

080058e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	607b      	str	r3, [r7, #4]
}
 8005900:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005902:	4b10      	ldr	r3, [pc, #64]	@ (8005944 <vPortEnterCritical+0x5c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3301      	adds	r3, #1
 8005908:	4a0e      	ldr	r2, [pc, #56]	@ (8005944 <vPortEnterCritical+0x5c>)
 800590a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800590c:	4b0d      	ldr	r3, [pc, #52]	@ (8005944 <vPortEnterCritical+0x5c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d110      	bne.n	8005936 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005914:	4b0c      	ldr	r3, [pc, #48]	@ (8005948 <vPortEnterCritical+0x60>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00b      	beq.n	8005936 <vPortEnterCritical+0x4e>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	603b      	str	r3, [r7, #0]
}
 8005930:	bf00      	nop
 8005932:	bf00      	nop
 8005934:	e7fd      	b.n	8005932 <vPortEnterCritical+0x4a>
	}
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	2000000c 	.word	0x2000000c
 8005948:	e000ed04 	.word	0xe000ed04

0800594c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005952:	4b12      	ldr	r3, [pc, #72]	@ (800599c <vPortExitCritical+0x50>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10b      	bne.n	8005972 <vPortExitCritical+0x26>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	607b      	str	r3, [r7, #4]
}
 800596c:	bf00      	nop
 800596e:	bf00      	nop
 8005970:	e7fd      	b.n	800596e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005972:	4b0a      	ldr	r3, [pc, #40]	@ (800599c <vPortExitCritical+0x50>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	3b01      	subs	r3, #1
 8005978:	4a08      	ldr	r2, [pc, #32]	@ (800599c <vPortExitCritical+0x50>)
 800597a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800597c:	4b07      	ldr	r3, [pc, #28]	@ (800599c <vPortExitCritical+0x50>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d105      	bne.n	8005990 <vPortExitCritical+0x44>
 8005984:	2300      	movs	r3, #0
 8005986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	f383 8811 	msr	BASEPRI, r3
}
 800598e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	2000000c 	.word	0x2000000c

080059a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059a0:	f3ef 8009 	mrs	r0, PSP
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	4b15      	ldr	r3, [pc, #84]	@ (8005a00 <pxCurrentTCBConst>)
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	f01e 0f10 	tst.w	lr, #16
 80059b0:	bf08      	it	eq
 80059b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ba:	6010      	str	r0, [r2, #0]
 80059bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80059c4:	f380 8811 	msr	BASEPRI, r0
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f7fe feb0 	bl	8004734 <vTaskSwitchContext>
 80059d4:	f04f 0000 	mov.w	r0, #0
 80059d8:	f380 8811 	msr	BASEPRI, r0
 80059dc:	bc09      	pop	{r0, r3}
 80059de:	6819      	ldr	r1, [r3, #0]
 80059e0:	6808      	ldr	r0, [r1, #0]
 80059e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e6:	f01e 0f10 	tst.w	lr, #16
 80059ea:	bf08      	it	eq
 80059ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059f0:	f380 8809 	msr	PSP, r0
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	f3af 8000 	nop.w

08005a00 <pxCurrentTCBConst>:
 8005a00:	20000834 	.word	0x20000834
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a04:	bf00      	nop
 8005a06:	bf00      	nop

08005a08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	607b      	str	r3, [r7, #4]
}
 8005a20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a22:	f7fe fdcd 	bl	80045c0 <xTaskIncrementTick>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a2c:	4b06      	ldr	r3, [pc, #24]	@ (8005a48 <xPortSysTickHandler+0x40>)
 8005a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	2300      	movs	r3, #0
 8005a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	f383 8811 	msr	BASEPRI, r3
}
 8005a3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a40:	bf00      	nop
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	e000ed04 	.word	0xe000ed04

08005a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a50:	4b0b      	ldr	r3, [pc, #44]	@ (8005a80 <vPortSetupTimerInterrupt+0x34>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a56:	4b0b      	ldr	r3, [pc, #44]	@ (8005a84 <vPortSetupTimerInterrupt+0x38>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a88 <vPortSetupTimerInterrupt+0x3c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a0a      	ldr	r2, [pc, #40]	@ (8005a8c <vPortSetupTimerInterrupt+0x40>)
 8005a62:	fba2 2303 	umull	r2, r3, r2, r3
 8005a66:	099b      	lsrs	r3, r3, #6
 8005a68:	4a09      	ldr	r2, [pc, #36]	@ (8005a90 <vPortSetupTimerInterrupt+0x44>)
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a6e:	4b04      	ldr	r3, [pc, #16]	@ (8005a80 <vPortSetupTimerInterrupt+0x34>)
 8005a70:	2207      	movs	r2, #7
 8005a72:	601a      	str	r2, [r3, #0]
}
 8005a74:	bf00      	nop
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	e000e010 	.word	0xe000e010
 8005a84:	e000e018 	.word	0xe000e018
 8005a88:	20000000 	.word	0x20000000
 8005a8c:	10624dd3 	.word	0x10624dd3
 8005a90:	e000e014 	.word	0xe000e014

08005a94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005aa4 <vPortEnableVFP+0x10>
 8005a98:	6801      	ldr	r1, [r0, #0]
 8005a9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005a9e:	6001      	str	r1, [r0, #0]
 8005aa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005aa2:	bf00      	nop
 8005aa4:	e000ed88 	.word	0xe000ed88

08005aa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005aae:	f3ef 8305 	mrs	r3, IPSR
 8005ab2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b0f      	cmp	r3, #15
 8005ab8:	d915      	bls.n	8005ae6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005aba:	4a18      	ldr	r2, [pc, #96]	@ (8005b1c <vPortValidateInterruptPriority+0x74>)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ac4:	4b16      	ldr	r3, [pc, #88]	@ (8005b20 <vPortValidateInterruptPriority+0x78>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	7afa      	ldrb	r2, [r7, #11]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d20b      	bcs.n	8005ae6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	607b      	str	r3, [r7, #4]
}
 8005ae0:	bf00      	nop
 8005ae2:	bf00      	nop
 8005ae4:	e7fd      	b.n	8005ae2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8005b24 <vPortValidateInterruptPriority+0x7c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005aee:	4b0e      	ldr	r3, [pc, #56]	@ (8005b28 <vPortValidateInterruptPriority+0x80>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d90b      	bls.n	8005b0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	603b      	str	r3, [r7, #0]
}
 8005b08:	bf00      	nop
 8005b0a:	bf00      	nop
 8005b0c:	e7fd      	b.n	8005b0a <vPortValidateInterruptPriority+0x62>
	}
 8005b0e:	bf00      	nop
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	e000e3f0 	.word	0xe000e3f0
 8005b20:	20000e60 	.word	0x20000e60
 8005b24:	e000ed0c 	.word	0xe000ed0c
 8005b28:	20000e64 	.word	0x20000e64

08005b2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08a      	sub	sp, #40	@ 0x28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b34:	2300      	movs	r3, #0
 8005b36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b38:	f7fe fc86 	bl	8004448 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b3c:	4b5c      	ldr	r3, [pc, #368]	@ (8005cb0 <pvPortMalloc+0x184>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d101      	bne.n	8005b48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b44:	f000 f924 	bl	8005d90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b48:	4b5a      	ldr	r3, [pc, #360]	@ (8005cb4 <pvPortMalloc+0x188>)
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f040 8095 	bne.w	8005c80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d01e      	beq.n	8005b9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005b5c:	2208      	movs	r2, #8
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4413      	add	r3, r2
 8005b62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d015      	beq.n	8005b9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f023 0307 	bic.w	r3, r3, #7
 8005b74:	3308      	adds	r3, #8
 8005b76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f003 0307 	and.w	r3, r3, #7
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00b      	beq.n	8005b9a <pvPortMalloc+0x6e>
	__asm volatile
 8005b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	617b      	str	r3, [r7, #20]
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	e7fd      	b.n	8005b96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d06f      	beq.n	8005c80 <pvPortMalloc+0x154>
 8005ba0:	4b45      	ldr	r3, [pc, #276]	@ (8005cb8 <pvPortMalloc+0x18c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d86a      	bhi.n	8005c80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005baa:	4b44      	ldr	r3, [pc, #272]	@ (8005cbc <pvPortMalloc+0x190>)
 8005bac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bae:	4b43      	ldr	r3, [pc, #268]	@ (8005cbc <pvPortMalloc+0x190>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bb4:	e004      	b.n	8005bc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d903      	bls.n	8005bd2 <pvPortMalloc+0xa6>
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f1      	bne.n	8005bb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005bd2:	4b37      	ldr	r3, [pc, #220]	@ (8005cb0 <pvPortMalloc+0x184>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d051      	beq.n	8005c80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2208      	movs	r2, #8
 8005be2:	4413      	add	r3, r2
 8005be4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	6a3b      	ldr	r3, [r7, #32]
 8005bec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	1ad2      	subs	r2, r2, r3
 8005bf6:	2308      	movs	r3, #8
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d920      	bls.n	8005c40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4413      	add	r3, r2
 8005c04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00b      	beq.n	8005c28 <pvPortMalloc+0xfc>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	613b      	str	r3, [r7, #16]
}
 8005c22:	bf00      	nop
 8005c24:	bf00      	nop
 8005c26:	e7fd      	b.n	8005c24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	1ad2      	subs	r2, r2, r3
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c3a:	69b8      	ldr	r0, [r7, #24]
 8005c3c:	f000 f90a 	bl	8005e54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c40:	4b1d      	ldr	r3, [pc, #116]	@ (8005cb8 <pvPortMalloc+0x18c>)
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8005cb8 <pvPortMalloc+0x18c>)
 8005c4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8005cb8 <pvPortMalloc+0x18c>)
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	4b1b      	ldr	r3, [pc, #108]	@ (8005cc0 <pvPortMalloc+0x194>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d203      	bcs.n	8005c62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c5a:	4b17      	ldr	r3, [pc, #92]	@ (8005cb8 <pvPortMalloc+0x18c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a18      	ldr	r2, [pc, #96]	@ (8005cc0 <pvPortMalloc+0x194>)
 8005c60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	4b13      	ldr	r3, [pc, #76]	@ (8005cb4 <pvPortMalloc+0x188>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	431a      	orrs	r2, r3
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005c76:	4b13      	ldr	r3, [pc, #76]	@ (8005cc4 <pvPortMalloc+0x198>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	4a11      	ldr	r2, [pc, #68]	@ (8005cc4 <pvPortMalloc+0x198>)
 8005c7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c80:	f7fe fbf0 	bl	8004464 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00b      	beq.n	8005ca6 <pvPortMalloc+0x17a>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	60fb      	str	r3, [r7, #12]
}
 8005ca0:	bf00      	nop
 8005ca2:	bf00      	nop
 8005ca4:	e7fd      	b.n	8005ca2 <pvPortMalloc+0x176>
	return pvReturn;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3728      	adds	r7, #40	@ 0x28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	20001a70 	.word	0x20001a70
 8005cb4:	20001a84 	.word	0x20001a84
 8005cb8:	20001a74 	.word	0x20001a74
 8005cbc:	20001a68 	.word	0x20001a68
 8005cc0:	20001a78 	.word	0x20001a78
 8005cc4:	20001a7c 	.word	0x20001a7c

08005cc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d04f      	beq.n	8005d7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cda:	2308      	movs	r3, #8
 8005cdc:	425b      	negs	r3, r3
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	4b25      	ldr	r3, [pc, #148]	@ (8005d84 <vPortFree+0xbc>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10b      	bne.n	8005d0e <vPortFree+0x46>
	__asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	60fb      	str	r3, [r7, #12]
}
 8005d08:	bf00      	nop
 8005d0a:	bf00      	nop
 8005d0c:	e7fd      	b.n	8005d0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00b      	beq.n	8005d2e <vPortFree+0x66>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	60bb      	str	r3, [r7, #8]
}
 8005d28:	bf00      	nop
 8005d2a:	bf00      	nop
 8005d2c:	e7fd      	b.n	8005d2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	4b14      	ldr	r3, [pc, #80]	@ (8005d84 <vPortFree+0xbc>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4013      	ands	r3, r2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01e      	beq.n	8005d7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d11a      	bne.n	8005d7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	4b0e      	ldr	r3, [pc, #56]	@ (8005d84 <vPortFree+0xbc>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	401a      	ands	r2, r3
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d54:	f7fe fb78 	bl	8004448 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d88 <vPortFree+0xc0>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4413      	add	r3, r2
 8005d62:	4a09      	ldr	r2, [pc, #36]	@ (8005d88 <vPortFree+0xc0>)
 8005d64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d66:	6938      	ldr	r0, [r7, #16]
 8005d68:	f000 f874 	bl	8005e54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d6c:	4b07      	ldr	r3, [pc, #28]	@ (8005d8c <vPortFree+0xc4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3301      	adds	r3, #1
 8005d72:	4a06      	ldr	r2, [pc, #24]	@ (8005d8c <vPortFree+0xc4>)
 8005d74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005d76:	f7fe fb75 	bl	8004464 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d7a:	bf00      	nop
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20001a84 	.word	0x20001a84
 8005d88:	20001a74 	.word	0x20001a74
 8005d8c:	20001a80 	.word	0x20001a80

08005d90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d96:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005d9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d9c:	4b27      	ldr	r3, [pc, #156]	@ (8005e3c <prvHeapInit+0xac>)
 8005d9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00c      	beq.n	8005dc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3307      	adds	r3, #7
 8005dae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0307 	bic.w	r3, r3, #7
 8005db6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	4a1f      	ldr	r2, [pc, #124]	@ (8005e3c <prvHeapInit+0xac>)
 8005dc0:	4413      	add	r3, r2
 8005dc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e40 <prvHeapInit+0xb0>)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005dce:	4b1c      	ldr	r3, [pc, #112]	@ (8005e40 <prvHeapInit+0xb0>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	4413      	add	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ddc:	2208      	movs	r2, #8
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	1a9b      	subs	r3, r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0307 	bic.w	r3, r3, #7
 8005dea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4a15      	ldr	r2, [pc, #84]	@ (8005e44 <prvHeapInit+0xb4>)
 8005df0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005df2:	4b14      	ldr	r3, [pc, #80]	@ (8005e44 <prvHeapInit+0xb4>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2200      	movs	r2, #0
 8005df8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005dfa:	4b12      	ldr	r3, [pc, #72]	@ (8005e44 <prvHeapInit+0xb4>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	1ad2      	subs	r2, r2, r3
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e10:	4b0c      	ldr	r3, [pc, #48]	@ (8005e44 <prvHeapInit+0xb4>)
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8005e48 <prvHeapInit+0xb8>)
 8005e1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	4a09      	ldr	r2, [pc, #36]	@ (8005e4c <prvHeapInit+0xbc>)
 8005e26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e28:	4b09      	ldr	r3, [pc, #36]	@ (8005e50 <prvHeapInit+0xc0>)
 8005e2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005e2e:	601a      	str	r2, [r3, #0]
}
 8005e30:	bf00      	nop
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	20000e68 	.word	0x20000e68
 8005e40:	20001a68 	.word	0x20001a68
 8005e44:	20001a70 	.word	0x20001a70
 8005e48:	20001a78 	.word	0x20001a78
 8005e4c:	20001a74 	.word	0x20001a74
 8005e50:	20001a84 	.word	0x20001a84

08005e54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e5c:	4b28      	ldr	r3, [pc, #160]	@ (8005f00 <prvInsertBlockIntoFreeList+0xac>)
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	e002      	b.n	8005e68 <prvInsertBlockIntoFreeList+0x14>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d8f7      	bhi.n	8005e62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d108      	bne.n	8005e96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	441a      	add	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	441a      	add	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d118      	bne.n	8005edc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	4b15      	ldr	r3, [pc, #84]	@ (8005f04 <prvInsertBlockIntoFreeList+0xb0>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d00d      	beq.n	8005ed2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	441a      	add	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	e008      	b.n	8005ee4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8005f04 <prvInsertBlockIntoFreeList+0xb0>)
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	e003      	b.n	8005ee4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d002      	beq.n	8005ef2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ef2:	bf00      	nop
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	20001a68 	.word	0x20001a68
 8005f04:	20001a70 	.word	0x20001a70

08005f08 <std>:
 8005f08:	2300      	movs	r3, #0
 8005f0a:	b510      	push	{r4, lr}
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f16:	6083      	str	r3, [r0, #8]
 8005f18:	8181      	strh	r1, [r0, #12]
 8005f1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f1c:	81c2      	strh	r2, [r0, #14]
 8005f1e:	6183      	str	r3, [r0, #24]
 8005f20:	4619      	mov	r1, r3
 8005f22:	2208      	movs	r2, #8
 8005f24:	305c      	adds	r0, #92	@ 0x5c
 8005f26:	f000 f9e7 	bl	80062f8 <memset>
 8005f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f60 <std+0x58>)
 8005f2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f64 <std+0x5c>)
 8005f30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f32:	4b0d      	ldr	r3, [pc, #52]	@ (8005f68 <std+0x60>)
 8005f34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f36:	4b0d      	ldr	r3, [pc, #52]	@ (8005f6c <std+0x64>)
 8005f38:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f70 <std+0x68>)
 8005f3c:	6224      	str	r4, [r4, #32]
 8005f3e:	429c      	cmp	r4, r3
 8005f40:	d006      	beq.n	8005f50 <std+0x48>
 8005f42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f46:	4294      	cmp	r4, r2
 8005f48:	d002      	beq.n	8005f50 <std+0x48>
 8005f4a:	33d0      	adds	r3, #208	@ 0xd0
 8005f4c:	429c      	cmp	r4, r3
 8005f4e:	d105      	bne.n	8005f5c <std+0x54>
 8005f50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f58:	f000 ba46 	b.w	80063e8 <__retarget_lock_init_recursive>
 8005f5c:	bd10      	pop	{r4, pc}
 8005f5e:	bf00      	nop
 8005f60:	08006149 	.word	0x08006149
 8005f64:	0800616b 	.word	0x0800616b
 8005f68:	080061a3 	.word	0x080061a3
 8005f6c:	080061c7 	.word	0x080061c7
 8005f70:	20001a88 	.word	0x20001a88

08005f74 <stdio_exit_handler>:
 8005f74:	4a02      	ldr	r2, [pc, #8]	@ (8005f80 <stdio_exit_handler+0xc>)
 8005f76:	4903      	ldr	r1, [pc, #12]	@ (8005f84 <stdio_exit_handler+0x10>)
 8005f78:	4803      	ldr	r0, [pc, #12]	@ (8005f88 <stdio_exit_handler+0x14>)
 8005f7a:	f000 b869 	b.w	8006050 <_fwalk_sglue>
 8005f7e:	bf00      	nop
 8005f80:	20000010 	.word	0x20000010
 8005f84:	08006705 	.word	0x08006705
 8005f88:	20000020 	.word	0x20000020

08005f8c <cleanup_stdio>:
 8005f8c:	6841      	ldr	r1, [r0, #4]
 8005f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc0 <cleanup_stdio+0x34>)
 8005f90:	4299      	cmp	r1, r3
 8005f92:	b510      	push	{r4, lr}
 8005f94:	4604      	mov	r4, r0
 8005f96:	d001      	beq.n	8005f9c <cleanup_stdio+0x10>
 8005f98:	f000 fbb4 	bl	8006704 <_fflush_r>
 8005f9c:	68a1      	ldr	r1, [r4, #8]
 8005f9e:	4b09      	ldr	r3, [pc, #36]	@ (8005fc4 <cleanup_stdio+0x38>)
 8005fa0:	4299      	cmp	r1, r3
 8005fa2:	d002      	beq.n	8005faa <cleanup_stdio+0x1e>
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f000 fbad 	bl	8006704 <_fflush_r>
 8005faa:	68e1      	ldr	r1, [r4, #12]
 8005fac:	4b06      	ldr	r3, [pc, #24]	@ (8005fc8 <cleanup_stdio+0x3c>)
 8005fae:	4299      	cmp	r1, r3
 8005fb0:	d004      	beq.n	8005fbc <cleanup_stdio+0x30>
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb8:	f000 bba4 	b.w	8006704 <_fflush_r>
 8005fbc:	bd10      	pop	{r4, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20001a88 	.word	0x20001a88
 8005fc4:	20001af0 	.word	0x20001af0
 8005fc8:	20001b58 	.word	0x20001b58

08005fcc <global_stdio_init.part.0>:
 8005fcc:	b510      	push	{r4, lr}
 8005fce:	4b0b      	ldr	r3, [pc, #44]	@ (8005ffc <global_stdio_init.part.0+0x30>)
 8005fd0:	4c0b      	ldr	r4, [pc, #44]	@ (8006000 <global_stdio_init.part.0+0x34>)
 8005fd2:	4a0c      	ldr	r2, [pc, #48]	@ (8006004 <global_stdio_init.part.0+0x38>)
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2104      	movs	r1, #4
 8005fdc:	f7ff ff94 	bl	8005f08 <std>
 8005fe0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	2109      	movs	r1, #9
 8005fe8:	f7ff ff8e 	bl	8005f08 <std>
 8005fec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff6:	2112      	movs	r1, #18
 8005ff8:	f7ff bf86 	b.w	8005f08 <std>
 8005ffc:	20001bc0 	.word	0x20001bc0
 8006000:	20001a88 	.word	0x20001a88
 8006004:	08005f75 	.word	0x08005f75

08006008 <__sfp_lock_acquire>:
 8006008:	4801      	ldr	r0, [pc, #4]	@ (8006010 <__sfp_lock_acquire+0x8>)
 800600a:	f000 b9ee 	b.w	80063ea <__retarget_lock_acquire_recursive>
 800600e:	bf00      	nop
 8006010:	20001bc9 	.word	0x20001bc9

08006014 <__sfp_lock_release>:
 8006014:	4801      	ldr	r0, [pc, #4]	@ (800601c <__sfp_lock_release+0x8>)
 8006016:	f000 b9e9 	b.w	80063ec <__retarget_lock_release_recursive>
 800601a:	bf00      	nop
 800601c:	20001bc9 	.word	0x20001bc9

08006020 <__sinit>:
 8006020:	b510      	push	{r4, lr}
 8006022:	4604      	mov	r4, r0
 8006024:	f7ff fff0 	bl	8006008 <__sfp_lock_acquire>
 8006028:	6a23      	ldr	r3, [r4, #32]
 800602a:	b11b      	cbz	r3, 8006034 <__sinit+0x14>
 800602c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006030:	f7ff bff0 	b.w	8006014 <__sfp_lock_release>
 8006034:	4b04      	ldr	r3, [pc, #16]	@ (8006048 <__sinit+0x28>)
 8006036:	6223      	str	r3, [r4, #32]
 8006038:	4b04      	ldr	r3, [pc, #16]	@ (800604c <__sinit+0x2c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1f5      	bne.n	800602c <__sinit+0xc>
 8006040:	f7ff ffc4 	bl	8005fcc <global_stdio_init.part.0>
 8006044:	e7f2      	b.n	800602c <__sinit+0xc>
 8006046:	bf00      	nop
 8006048:	08005f8d 	.word	0x08005f8d
 800604c:	20001bc0 	.word	0x20001bc0

08006050 <_fwalk_sglue>:
 8006050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006054:	4607      	mov	r7, r0
 8006056:	4688      	mov	r8, r1
 8006058:	4614      	mov	r4, r2
 800605a:	2600      	movs	r6, #0
 800605c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006060:	f1b9 0901 	subs.w	r9, r9, #1
 8006064:	d505      	bpl.n	8006072 <_fwalk_sglue+0x22>
 8006066:	6824      	ldr	r4, [r4, #0]
 8006068:	2c00      	cmp	r4, #0
 800606a:	d1f7      	bne.n	800605c <_fwalk_sglue+0xc>
 800606c:	4630      	mov	r0, r6
 800606e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006072:	89ab      	ldrh	r3, [r5, #12]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d907      	bls.n	8006088 <_fwalk_sglue+0x38>
 8006078:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800607c:	3301      	adds	r3, #1
 800607e:	d003      	beq.n	8006088 <_fwalk_sglue+0x38>
 8006080:	4629      	mov	r1, r5
 8006082:	4638      	mov	r0, r7
 8006084:	47c0      	blx	r8
 8006086:	4306      	orrs	r6, r0
 8006088:	3568      	adds	r5, #104	@ 0x68
 800608a:	e7e9      	b.n	8006060 <_fwalk_sglue+0x10>

0800608c <_puts_r>:
 800608c:	6a03      	ldr	r3, [r0, #32]
 800608e:	b570      	push	{r4, r5, r6, lr}
 8006090:	6884      	ldr	r4, [r0, #8]
 8006092:	4605      	mov	r5, r0
 8006094:	460e      	mov	r6, r1
 8006096:	b90b      	cbnz	r3, 800609c <_puts_r+0x10>
 8006098:	f7ff ffc2 	bl	8006020 <__sinit>
 800609c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800609e:	07db      	lsls	r3, r3, #31
 80060a0:	d405      	bmi.n	80060ae <_puts_r+0x22>
 80060a2:	89a3      	ldrh	r3, [r4, #12]
 80060a4:	0598      	lsls	r0, r3, #22
 80060a6:	d402      	bmi.n	80060ae <_puts_r+0x22>
 80060a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060aa:	f000 f99e 	bl	80063ea <__retarget_lock_acquire_recursive>
 80060ae:	89a3      	ldrh	r3, [r4, #12]
 80060b0:	0719      	lsls	r1, r3, #28
 80060b2:	d502      	bpl.n	80060ba <_puts_r+0x2e>
 80060b4:	6923      	ldr	r3, [r4, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d135      	bne.n	8006126 <_puts_r+0x9a>
 80060ba:	4621      	mov	r1, r4
 80060bc:	4628      	mov	r0, r5
 80060be:	f000 f8c5 	bl	800624c <__swsetup_r>
 80060c2:	b380      	cbz	r0, 8006126 <_puts_r+0x9a>
 80060c4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80060c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060ca:	07da      	lsls	r2, r3, #31
 80060cc:	d405      	bmi.n	80060da <_puts_r+0x4e>
 80060ce:	89a3      	ldrh	r3, [r4, #12]
 80060d0:	059b      	lsls	r3, r3, #22
 80060d2:	d402      	bmi.n	80060da <_puts_r+0x4e>
 80060d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060d6:	f000 f989 	bl	80063ec <__retarget_lock_release_recursive>
 80060da:	4628      	mov	r0, r5
 80060dc:	bd70      	pop	{r4, r5, r6, pc}
 80060de:	2b00      	cmp	r3, #0
 80060e0:	da04      	bge.n	80060ec <_puts_r+0x60>
 80060e2:	69a2      	ldr	r2, [r4, #24]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	dc17      	bgt.n	8006118 <_puts_r+0x8c>
 80060e8:	290a      	cmp	r1, #10
 80060ea:	d015      	beq.n	8006118 <_puts_r+0x8c>
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	6022      	str	r2, [r4, #0]
 80060f2:	7019      	strb	r1, [r3, #0]
 80060f4:	68a3      	ldr	r3, [r4, #8]
 80060f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060fa:	3b01      	subs	r3, #1
 80060fc:	60a3      	str	r3, [r4, #8]
 80060fe:	2900      	cmp	r1, #0
 8006100:	d1ed      	bne.n	80060de <_puts_r+0x52>
 8006102:	2b00      	cmp	r3, #0
 8006104:	da11      	bge.n	800612a <_puts_r+0x9e>
 8006106:	4622      	mov	r2, r4
 8006108:	210a      	movs	r1, #10
 800610a:	4628      	mov	r0, r5
 800610c:	f000 f85f 	bl	80061ce <__swbuf_r>
 8006110:	3001      	adds	r0, #1
 8006112:	d0d7      	beq.n	80060c4 <_puts_r+0x38>
 8006114:	250a      	movs	r5, #10
 8006116:	e7d7      	b.n	80060c8 <_puts_r+0x3c>
 8006118:	4622      	mov	r2, r4
 800611a:	4628      	mov	r0, r5
 800611c:	f000 f857 	bl	80061ce <__swbuf_r>
 8006120:	3001      	adds	r0, #1
 8006122:	d1e7      	bne.n	80060f4 <_puts_r+0x68>
 8006124:	e7ce      	b.n	80060c4 <_puts_r+0x38>
 8006126:	3e01      	subs	r6, #1
 8006128:	e7e4      	b.n	80060f4 <_puts_r+0x68>
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	6022      	str	r2, [r4, #0]
 8006130:	220a      	movs	r2, #10
 8006132:	701a      	strb	r2, [r3, #0]
 8006134:	e7ee      	b.n	8006114 <_puts_r+0x88>
	...

08006138 <puts>:
 8006138:	4b02      	ldr	r3, [pc, #8]	@ (8006144 <puts+0xc>)
 800613a:	4601      	mov	r1, r0
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	f7ff bfa5 	b.w	800608c <_puts_r>
 8006142:	bf00      	nop
 8006144:	2000001c 	.word	0x2000001c

08006148 <__sread>:
 8006148:	b510      	push	{r4, lr}
 800614a:	460c      	mov	r4, r1
 800614c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006150:	f000 f8fc 	bl	800634c <_read_r>
 8006154:	2800      	cmp	r0, #0
 8006156:	bfab      	itete	ge
 8006158:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800615a:	89a3      	ldrhlt	r3, [r4, #12]
 800615c:	181b      	addge	r3, r3, r0
 800615e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006162:	bfac      	ite	ge
 8006164:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006166:	81a3      	strhlt	r3, [r4, #12]
 8006168:	bd10      	pop	{r4, pc}

0800616a <__swrite>:
 800616a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800616e:	461f      	mov	r7, r3
 8006170:	898b      	ldrh	r3, [r1, #12]
 8006172:	05db      	lsls	r3, r3, #23
 8006174:	4605      	mov	r5, r0
 8006176:	460c      	mov	r4, r1
 8006178:	4616      	mov	r6, r2
 800617a:	d505      	bpl.n	8006188 <__swrite+0x1e>
 800617c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006180:	2302      	movs	r3, #2
 8006182:	2200      	movs	r2, #0
 8006184:	f000 f8d0 	bl	8006328 <_lseek_r>
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800618e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006192:	81a3      	strh	r3, [r4, #12]
 8006194:	4632      	mov	r2, r6
 8006196:	463b      	mov	r3, r7
 8006198:	4628      	mov	r0, r5
 800619a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800619e:	f000 b8e7 	b.w	8006370 <_write_r>

080061a2 <__sseek>:
 80061a2:	b510      	push	{r4, lr}
 80061a4:	460c      	mov	r4, r1
 80061a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061aa:	f000 f8bd 	bl	8006328 <_lseek_r>
 80061ae:	1c43      	adds	r3, r0, #1
 80061b0:	89a3      	ldrh	r3, [r4, #12]
 80061b2:	bf15      	itete	ne
 80061b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80061b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80061be:	81a3      	strheq	r3, [r4, #12]
 80061c0:	bf18      	it	ne
 80061c2:	81a3      	strhne	r3, [r4, #12]
 80061c4:	bd10      	pop	{r4, pc}

080061c6 <__sclose>:
 80061c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ca:	f000 b89d 	b.w	8006308 <_close_r>

080061ce <__swbuf_r>:
 80061ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d0:	460e      	mov	r6, r1
 80061d2:	4614      	mov	r4, r2
 80061d4:	4605      	mov	r5, r0
 80061d6:	b118      	cbz	r0, 80061e0 <__swbuf_r+0x12>
 80061d8:	6a03      	ldr	r3, [r0, #32]
 80061da:	b90b      	cbnz	r3, 80061e0 <__swbuf_r+0x12>
 80061dc:	f7ff ff20 	bl	8006020 <__sinit>
 80061e0:	69a3      	ldr	r3, [r4, #24]
 80061e2:	60a3      	str	r3, [r4, #8]
 80061e4:	89a3      	ldrh	r3, [r4, #12]
 80061e6:	071a      	lsls	r2, r3, #28
 80061e8:	d501      	bpl.n	80061ee <__swbuf_r+0x20>
 80061ea:	6923      	ldr	r3, [r4, #16]
 80061ec:	b943      	cbnz	r3, 8006200 <__swbuf_r+0x32>
 80061ee:	4621      	mov	r1, r4
 80061f0:	4628      	mov	r0, r5
 80061f2:	f000 f82b 	bl	800624c <__swsetup_r>
 80061f6:	b118      	cbz	r0, 8006200 <__swbuf_r+0x32>
 80061f8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80061fc:	4638      	mov	r0, r7
 80061fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	6922      	ldr	r2, [r4, #16]
 8006204:	1a98      	subs	r0, r3, r2
 8006206:	6963      	ldr	r3, [r4, #20]
 8006208:	b2f6      	uxtb	r6, r6
 800620a:	4283      	cmp	r3, r0
 800620c:	4637      	mov	r7, r6
 800620e:	dc05      	bgt.n	800621c <__swbuf_r+0x4e>
 8006210:	4621      	mov	r1, r4
 8006212:	4628      	mov	r0, r5
 8006214:	f000 fa76 	bl	8006704 <_fflush_r>
 8006218:	2800      	cmp	r0, #0
 800621a:	d1ed      	bne.n	80061f8 <__swbuf_r+0x2a>
 800621c:	68a3      	ldr	r3, [r4, #8]
 800621e:	3b01      	subs	r3, #1
 8006220:	60a3      	str	r3, [r4, #8]
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	6022      	str	r2, [r4, #0]
 8006228:	701e      	strb	r6, [r3, #0]
 800622a:	6962      	ldr	r2, [r4, #20]
 800622c:	1c43      	adds	r3, r0, #1
 800622e:	429a      	cmp	r2, r3
 8006230:	d004      	beq.n	800623c <__swbuf_r+0x6e>
 8006232:	89a3      	ldrh	r3, [r4, #12]
 8006234:	07db      	lsls	r3, r3, #31
 8006236:	d5e1      	bpl.n	80061fc <__swbuf_r+0x2e>
 8006238:	2e0a      	cmp	r6, #10
 800623a:	d1df      	bne.n	80061fc <__swbuf_r+0x2e>
 800623c:	4621      	mov	r1, r4
 800623e:	4628      	mov	r0, r5
 8006240:	f000 fa60 	bl	8006704 <_fflush_r>
 8006244:	2800      	cmp	r0, #0
 8006246:	d0d9      	beq.n	80061fc <__swbuf_r+0x2e>
 8006248:	e7d6      	b.n	80061f8 <__swbuf_r+0x2a>
	...

0800624c <__swsetup_r>:
 800624c:	b538      	push	{r3, r4, r5, lr}
 800624e:	4b29      	ldr	r3, [pc, #164]	@ (80062f4 <__swsetup_r+0xa8>)
 8006250:	4605      	mov	r5, r0
 8006252:	6818      	ldr	r0, [r3, #0]
 8006254:	460c      	mov	r4, r1
 8006256:	b118      	cbz	r0, 8006260 <__swsetup_r+0x14>
 8006258:	6a03      	ldr	r3, [r0, #32]
 800625a:	b90b      	cbnz	r3, 8006260 <__swsetup_r+0x14>
 800625c:	f7ff fee0 	bl	8006020 <__sinit>
 8006260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006264:	0719      	lsls	r1, r3, #28
 8006266:	d422      	bmi.n	80062ae <__swsetup_r+0x62>
 8006268:	06da      	lsls	r2, r3, #27
 800626a:	d407      	bmi.n	800627c <__swsetup_r+0x30>
 800626c:	2209      	movs	r2, #9
 800626e:	602a      	str	r2, [r5, #0]
 8006270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006274:	81a3      	strh	r3, [r4, #12]
 8006276:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800627a:	e033      	b.n	80062e4 <__swsetup_r+0x98>
 800627c:	0758      	lsls	r0, r3, #29
 800627e:	d512      	bpl.n	80062a6 <__swsetup_r+0x5a>
 8006280:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006282:	b141      	cbz	r1, 8006296 <__swsetup_r+0x4a>
 8006284:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006288:	4299      	cmp	r1, r3
 800628a:	d002      	beq.n	8006292 <__swsetup_r+0x46>
 800628c:	4628      	mov	r0, r5
 800628e:	f000 f8bd 	bl	800640c <_free_r>
 8006292:	2300      	movs	r3, #0
 8006294:	6363      	str	r3, [r4, #52]	@ 0x34
 8006296:	89a3      	ldrh	r3, [r4, #12]
 8006298:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800629c:	81a3      	strh	r3, [r4, #12]
 800629e:	2300      	movs	r3, #0
 80062a0:	6063      	str	r3, [r4, #4]
 80062a2:	6923      	ldr	r3, [r4, #16]
 80062a4:	6023      	str	r3, [r4, #0]
 80062a6:	89a3      	ldrh	r3, [r4, #12]
 80062a8:	f043 0308 	orr.w	r3, r3, #8
 80062ac:	81a3      	strh	r3, [r4, #12]
 80062ae:	6923      	ldr	r3, [r4, #16]
 80062b0:	b94b      	cbnz	r3, 80062c6 <__swsetup_r+0x7a>
 80062b2:	89a3      	ldrh	r3, [r4, #12]
 80062b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80062b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062bc:	d003      	beq.n	80062c6 <__swsetup_r+0x7a>
 80062be:	4621      	mov	r1, r4
 80062c0:	4628      	mov	r0, r5
 80062c2:	f000 fa6d 	bl	80067a0 <__smakebuf_r>
 80062c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ca:	f013 0201 	ands.w	r2, r3, #1
 80062ce:	d00a      	beq.n	80062e6 <__swsetup_r+0x9a>
 80062d0:	2200      	movs	r2, #0
 80062d2:	60a2      	str	r2, [r4, #8]
 80062d4:	6962      	ldr	r2, [r4, #20]
 80062d6:	4252      	negs	r2, r2
 80062d8:	61a2      	str	r2, [r4, #24]
 80062da:	6922      	ldr	r2, [r4, #16]
 80062dc:	b942      	cbnz	r2, 80062f0 <__swsetup_r+0xa4>
 80062de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80062e2:	d1c5      	bne.n	8006270 <__swsetup_r+0x24>
 80062e4:	bd38      	pop	{r3, r4, r5, pc}
 80062e6:	0799      	lsls	r1, r3, #30
 80062e8:	bf58      	it	pl
 80062ea:	6962      	ldrpl	r2, [r4, #20]
 80062ec:	60a2      	str	r2, [r4, #8]
 80062ee:	e7f4      	b.n	80062da <__swsetup_r+0x8e>
 80062f0:	2000      	movs	r0, #0
 80062f2:	e7f7      	b.n	80062e4 <__swsetup_r+0x98>
 80062f4:	2000001c 	.word	0x2000001c

080062f8 <memset>:
 80062f8:	4402      	add	r2, r0
 80062fa:	4603      	mov	r3, r0
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d100      	bne.n	8006302 <memset+0xa>
 8006300:	4770      	bx	lr
 8006302:	f803 1b01 	strb.w	r1, [r3], #1
 8006306:	e7f9      	b.n	80062fc <memset+0x4>

08006308 <_close_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	4d06      	ldr	r5, [pc, #24]	@ (8006324 <_close_r+0x1c>)
 800630c:	2300      	movs	r3, #0
 800630e:	4604      	mov	r4, r0
 8006310:	4608      	mov	r0, r1
 8006312:	602b      	str	r3, [r5, #0]
 8006314:	f7fa fad9 	bl	80008ca <_close>
 8006318:	1c43      	adds	r3, r0, #1
 800631a:	d102      	bne.n	8006322 <_close_r+0x1a>
 800631c:	682b      	ldr	r3, [r5, #0]
 800631e:	b103      	cbz	r3, 8006322 <_close_r+0x1a>
 8006320:	6023      	str	r3, [r4, #0]
 8006322:	bd38      	pop	{r3, r4, r5, pc}
 8006324:	20001bc4 	.word	0x20001bc4

08006328 <_lseek_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	4d07      	ldr	r5, [pc, #28]	@ (8006348 <_lseek_r+0x20>)
 800632c:	4604      	mov	r4, r0
 800632e:	4608      	mov	r0, r1
 8006330:	4611      	mov	r1, r2
 8006332:	2200      	movs	r2, #0
 8006334:	602a      	str	r2, [r5, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	f7fa faee 	bl	8000918 <_lseek>
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	d102      	bne.n	8006346 <_lseek_r+0x1e>
 8006340:	682b      	ldr	r3, [r5, #0]
 8006342:	b103      	cbz	r3, 8006346 <_lseek_r+0x1e>
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	bd38      	pop	{r3, r4, r5, pc}
 8006348:	20001bc4 	.word	0x20001bc4

0800634c <_read_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4d07      	ldr	r5, [pc, #28]	@ (800636c <_read_r+0x20>)
 8006350:	4604      	mov	r4, r0
 8006352:	4608      	mov	r0, r1
 8006354:	4611      	mov	r1, r2
 8006356:	2200      	movs	r2, #0
 8006358:	602a      	str	r2, [r5, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	f7fa fa7c 	bl	8000858 <_read>
 8006360:	1c43      	adds	r3, r0, #1
 8006362:	d102      	bne.n	800636a <_read_r+0x1e>
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	b103      	cbz	r3, 800636a <_read_r+0x1e>
 8006368:	6023      	str	r3, [r4, #0]
 800636a:	bd38      	pop	{r3, r4, r5, pc}
 800636c:	20001bc4 	.word	0x20001bc4

08006370 <_write_r>:
 8006370:	b538      	push	{r3, r4, r5, lr}
 8006372:	4d07      	ldr	r5, [pc, #28]	@ (8006390 <_write_r+0x20>)
 8006374:	4604      	mov	r4, r0
 8006376:	4608      	mov	r0, r1
 8006378:	4611      	mov	r1, r2
 800637a:	2200      	movs	r2, #0
 800637c:	602a      	str	r2, [r5, #0]
 800637e:	461a      	mov	r2, r3
 8006380:	f7fa fa87 	bl	8000892 <_write>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	d102      	bne.n	800638e <_write_r+0x1e>
 8006388:	682b      	ldr	r3, [r5, #0]
 800638a:	b103      	cbz	r3, 800638e <_write_r+0x1e>
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	bd38      	pop	{r3, r4, r5, pc}
 8006390:	20001bc4 	.word	0x20001bc4

08006394 <__errno>:
 8006394:	4b01      	ldr	r3, [pc, #4]	@ (800639c <__errno+0x8>)
 8006396:	6818      	ldr	r0, [r3, #0]
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	2000001c 	.word	0x2000001c

080063a0 <__libc_init_array>:
 80063a0:	b570      	push	{r4, r5, r6, lr}
 80063a2:	4d0d      	ldr	r5, [pc, #52]	@ (80063d8 <__libc_init_array+0x38>)
 80063a4:	4c0d      	ldr	r4, [pc, #52]	@ (80063dc <__libc_init_array+0x3c>)
 80063a6:	1b64      	subs	r4, r4, r5
 80063a8:	10a4      	asrs	r4, r4, #2
 80063aa:	2600      	movs	r6, #0
 80063ac:	42a6      	cmp	r6, r4
 80063ae:	d109      	bne.n	80063c4 <__libc_init_array+0x24>
 80063b0:	4d0b      	ldr	r5, [pc, #44]	@ (80063e0 <__libc_init_array+0x40>)
 80063b2:	4c0c      	ldr	r4, [pc, #48]	@ (80063e4 <__libc_init_array+0x44>)
 80063b4:	f000 fa62 	bl	800687c <_init>
 80063b8:	1b64      	subs	r4, r4, r5
 80063ba:	10a4      	asrs	r4, r4, #2
 80063bc:	2600      	movs	r6, #0
 80063be:	42a6      	cmp	r6, r4
 80063c0:	d105      	bne.n	80063ce <__libc_init_array+0x2e>
 80063c2:	bd70      	pop	{r4, r5, r6, pc}
 80063c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c8:	4798      	blx	r3
 80063ca:	3601      	adds	r6, #1
 80063cc:	e7ee      	b.n	80063ac <__libc_init_array+0xc>
 80063ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d2:	4798      	blx	r3
 80063d4:	3601      	adds	r6, #1
 80063d6:	e7f2      	b.n	80063be <__libc_init_array+0x1e>
 80063d8:	080069e8 	.word	0x080069e8
 80063dc:	080069e8 	.word	0x080069e8
 80063e0:	080069e8 	.word	0x080069e8
 80063e4:	080069ec 	.word	0x080069ec

080063e8 <__retarget_lock_init_recursive>:
 80063e8:	4770      	bx	lr

080063ea <__retarget_lock_acquire_recursive>:
 80063ea:	4770      	bx	lr

080063ec <__retarget_lock_release_recursive>:
 80063ec:	4770      	bx	lr

080063ee <memcpy>:
 80063ee:	440a      	add	r2, r1
 80063f0:	4291      	cmp	r1, r2
 80063f2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80063f6:	d100      	bne.n	80063fa <memcpy+0xc>
 80063f8:	4770      	bx	lr
 80063fa:	b510      	push	{r4, lr}
 80063fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006400:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006404:	4291      	cmp	r1, r2
 8006406:	d1f9      	bne.n	80063fc <memcpy+0xe>
 8006408:	bd10      	pop	{r4, pc}
	...

0800640c <_free_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4605      	mov	r5, r0
 8006410:	2900      	cmp	r1, #0
 8006412:	d041      	beq.n	8006498 <_free_r+0x8c>
 8006414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006418:	1f0c      	subs	r4, r1, #4
 800641a:	2b00      	cmp	r3, #0
 800641c:	bfb8      	it	lt
 800641e:	18e4      	addlt	r4, r4, r3
 8006420:	f000 f8e0 	bl	80065e4 <__malloc_lock>
 8006424:	4a1d      	ldr	r2, [pc, #116]	@ (800649c <_free_r+0x90>)
 8006426:	6813      	ldr	r3, [r2, #0]
 8006428:	b933      	cbnz	r3, 8006438 <_free_r+0x2c>
 800642a:	6063      	str	r3, [r4, #4]
 800642c:	6014      	str	r4, [r2, #0]
 800642e:	4628      	mov	r0, r5
 8006430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006434:	f000 b8dc 	b.w	80065f0 <__malloc_unlock>
 8006438:	42a3      	cmp	r3, r4
 800643a:	d908      	bls.n	800644e <_free_r+0x42>
 800643c:	6820      	ldr	r0, [r4, #0]
 800643e:	1821      	adds	r1, r4, r0
 8006440:	428b      	cmp	r3, r1
 8006442:	bf01      	itttt	eq
 8006444:	6819      	ldreq	r1, [r3, #0]
 8006446:	685b      	ldreq	r3, [r3, #4]
 8006448:	1809      	addeq	r1, r1, r0
 800644a:	6021      	streq	r1, [r4, #0]
 800644c:	e7ed      	b.n	800642a <_free_r+0x1e>
 800644e:	461a      	mov	r2, r3
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	b10b      	cbz	r3, 8006458 <_free_r+0x4c>
 8006454:	42a3      	cmp	r3, r4
 8006456:	d9fa      	bls.n	800644e <_free_r+0x42>
 8006458:	6811      	ldr	r1, [r2, #0]
 800645a:	1850      	adds	r0, r2, r1
 800645c:	42a0      	cmp	r0, r4
 800645e:	d10b      	bne.n	8006478 <_free_r+0x6c>
 8006460:	6820      	ldr	r0, [r4, #0]
 8006462:	4401      	add	r1, r0
 8006464:	1850      	adds	r0, r2, r1
 8006466:	4283      	cmp	r3, r0
 8006468:	6011      	str	r1, [r2, #0]
 800646a:	d1e0      	bne.n	800642e <_free_r+0x22>
 800646c:	6818      	ldr	r0, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	6053      	str	r3, [r2, #4]
 8006472:	4408      	add	r0, r1
 8006474:	6010      	str	r0, [r2, #0]
 8006476:	e7da      	b.n	800642e <_free_r+0x22>
 8006478:	d902      	bls.n	8006480 <_free_r+0x74>
 800647a:	230c      	movs	r3, #12
 800647c:	602b      	str	r3, [r5, #0]
 800647e:	e7d6      	b.n	800642e <_free_r+0x22>
 8006480:	6820      	ldr	r0, [r4, #0]
 8006482:	1821      	adds	r1, r4, r0
 8006484:	428b      	cmp	r3, r1
 8006486:	bf04      	itt	eq
 8006488:	6819      	ldreq	r1, [r3, #0]
 800648a:	685b      	ldreq	r3, [r3, #4]
 800648c:	6063      	str	r3, [r4, #4]
 800648e:	bf04      	itt	eq
 8006490:	1809      	addeq	r1, r1, r0
 8006492:	6021      	streq	r1, [r4, #0]
 8006494:	6054      	str	r4, [r2, #4]
 8006496:	e7ca      	b.n	800642e <_free_r+0x22>
 8006498:	bd38      	pop	{r3, r4, r5, pc}
 800649a:	bf00      	nop
 800649c:	20001bd0 	.word	0x20001bd0

080064a0 <sbrk_aligned>:
 80064a0:	b570      	push	{r4, r5, r6, lr}
 80064a2:	4e0f      	ldr	r6, [pc, #60]	@ (80064e0 <sbrk_aligned+0x40>)
 80064a4:	460c      	mov	r4, r1
 80064a6:	6831      	ldr	r1, [r6, #0]
 80064a8:	4605      	mov	r5, r0
 80064aa:	b911      	cbnz	r1, 80064b2 <sbrk_aligned+0x12>
 80064ac:	f000 f9d6 	bl	800685c <_sbrk_r>
 80064b0:	6030      	str	r0, [r6, #0]
 80064b2:	4621      	mov	r1, r4
 80064b4:	4628      	mov	r0, r5
 80064b6:	f000 f9d1 	bl	800685c <_sbrk_r>
 80064ba:	1c43      	adds	r3, r0, #1
 80064bc:	d103      	bne.n	80064c6 <sbrk_aligned+0x26>
 80064be:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80064c2:	4620      	mov	r0, r4
 80064c4:	bd70      	pop	{r4, r5, r6, pc}
 80064c6:	1cc4      	adds	r4, r0, #3
 80064c8:	f024 0403 	bic.w	r4, r4, #3
 80064cc:	42a0      	cmp	r0, r4
 80064ce:	d0f8      	beq.n	80064c2 <sbrk_aligned+0x22>
 80064d0:	1a21      	subs	r1, r4, r0
 80064d2:	4628      	mov	r0, r5
 80064d4:	f000 f9c2 	bl	800685c <_sbrk_r>
 80064d8:	3001      	adds	r0, #1
 80064da:	d1f2      	bne.n	80064c2 <sbrk_aligned+0x22>
 80064dc:	e7ef      	b.n	80064be <sbrk_aligned+0x1e>
 80064de:	bf00      	nop
 80064e0:	20001bcc 	.word	0x20001bcc

080064e4 <_malloc_r>:
 80064e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064e8:	1ccd      	adds	r5, r1, #3
 80064ea:	f025 0503 	bic.w	r5, r5, #3
 80064ee:	3508      	adds	r5, #8
 80064f0:	2d0c      	cmp	r5, #12
 80064f2:	bf38      	it	cc
 80064f4:	250c      	movcc	r5, #12
 80064f6:	2d00      	cmp	r5, #0
 80064f8:	4606      	mov	r6, r0
 80064fa:	db01      	blt.n	8006500 <_malloc_r+0x1c>
 80064fc:	42a9      	cmp	r1, r5
 80064fe:	d904      	bls.n	800650a <_malloc_r+0x26>
 8006500:	230c      	movs	r3, #12
 8006502:	6033      	str	r3, [r6, #0]
 8006504:	2000      	movs	r0, #0
 8006506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800650a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065e0 <_malloc_r+0xfc>
 800650e:	f000 f869 	bl	80065e4 <__malloc_lock>
 8006512:	f8d8 3000 	ldr.w	r3, [r8]
 8006516:	461c      	mov	r4, r3
 8006518:	bb44      	cbnz	r4, 800656c <_malloc_r+0x88>
 800651a:	4629      	mov	r1, r5
 800651c:	4630      	mov	r0, r6
 800651e:	f7ff ffbf 	bl	80064a0 <sbrk_aligned>
 8006522:	1c43      	adds	r3, r0, #1
 8006524:	4604      	mov	r4, r0
 8006526:	d158      	bne.n	80065da <_malloc_r+0xf6>
 8006528:	f8d8 4000 	ldr.w	r4, [r8]
 800652c:	4627      	mov	r7, r4
 800652e:	2f00      	cmp	r7, #0
 8006530:	d143      	bne.n	80065ba <_malloc_r+0xd6>
 8006532:	2c00      	cmp	r4, #0
 8006534:	d04b      	beq.n	80065ce <_malloc_r+0xea>
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	4639      	mov	r1, r7
 800653a:	4630      	mov	r0, r6
 800653c:	eb04 0903 	add.w	r9, r4, r3
 8006540:	f000 f98c 	bl	800685c <_sbrk_r>
 8006544:	4581      	cmp	r9, r0
 8006546:	d142      	bne.n	80065ce <_malloc_r+0xea>
 8006548:	6821      	ldr	r1, [r4, #0]
 800654a:	1a6d      	subs	r5, r5, r1
 800654c:	4629      	mov	r1, r5
 800654e:	4630      	mov	r0, r6
 8006550:	f7ff ffa6 	bl	80064a0 <sbrk_aligned>
 8006554:	3001      	adds	r0, #1
 8006556:	d03a      	beq.n	80065ce <_malloc_r+0xea>
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	442b      	add	r3, r5
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	f8d8 3000 	ldr.w	r3, [r8]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	bb62      	cbnz	r2, 80065c0 <_malloc_r+0xdc>
 8006566:	f8c8 7000 	str.w	r7, [r8]
 800656a:	e00f      	b.n	800658c <_malloc_r+0xa8>
 800656c:	6822      	ldr	r2, [r4, #0]
 800656e:	1b52      	subs	r2, r2, r5
 8006570:	d420      	bmi.n	80065b4 <_malloc_r+0xd0>
 8006572:	2a0b      	cmp	r2, #11
 8006574:	d917      	bls.n	80065a6 <_malloc_r+0xc2>
 8006576:	1961      	adds	r1, r4, r5
 8006578:	42a3      	cmp	r3, r4
 800657a:	6025      	str	r5, [r4, #0]
 800657c:	bf18      	it	ne
 800657e:	6059      	strne	r1, [r3, #4]
 8006580:	6863      	ldr	r3, [r4, #4]
 8006582:	bf08      	it	eq
 8006584:	f8c8 1000 	streq.w	r1, [r8]
 8006588:	5162      	str	r2, [r4, r5]
 800658a:	604b      	str	r3, [r1, #4]
 800658c:	4630      	mov	r0, r6
 800658e:	f000 f82f 	bl	80065f0 <__malloc_unlock>
 8006592:	f104 000b 	add.w	r0, r4, #11
 8006596:	1d23      	adds	r3, r4, #4
 8006598:	f020 0007 	bic.w	r0, r0, #7
 800659c:	1ac2      	subs	r2, r0, r3
 800659e:	bf1c      	itt	ne
 80065a0:	1a1b      	subne	r3, r3, r0
 80065a2:	50a3      	strne	r3, [r4, r2]
 80065a4:	e7af      	b.n	8006506 <_malloc_r+0x22>
 80065a6:	6862      	ldr	r2, [r4, #4]
 80065a8:	42a3      	cmp	r3, r4
 80065aa:	bf0c      	ite	eq
 80065ac:	f8c8 2000 	streq.w	r2, [r8]
 80065b0:	605a      	strne	r2, [r3, #4]
 80065b2:	e7eb      	b.n	800658c <_malloc_r+0xa8>
 80065b4:	4623      	mov	r3, r4
 80065b6:	6864      	ldr	r4, [r4, #4]
 80065b8:	e7ae      	b.n	8006518 <_malloc_r+0x34>
 80065ba:	463c      	mov	r4, r7
 80065bc:	687f      	ldr	r7, [r7, #4]
 80065be:	e7b6      	b.n	800652e <_malloc_r+0x4a>
 80065c0:	461a      	mov	r2, r3
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	42a3      	cmp	r3, r4
 80065c6:	d1fb      	bne.n	80065c0 <_malloc_r+0xdc>
 80065c8:	2300      	movs	r3, #0
 80065ca:	6053      	str	r3, [r2, #4]
 80065cc:	e7de      	b.n	800658c <_malloc_r+0xa8>
 80065ce:	230c      	movs	r3, #12
 80065d0:	6033      	str	r3, [r6, #0]
 80065d2:	4630      	mov	r0, r6
 80065d4:	f000 f80c 	bl	80065f0 <__malloc_unlock>
 80065d8:	e794      	b.n	8006504 <_malloc_r+0x20>
 80065da:	6005      	str	r5, [r0, #0]
 80065dc:	e7d6      	b.n	800658c <_malloc_r+0xa8>
 80065de:	bf00      	nop
 80065e0:	20001bd0 	.word	0x20001bd0

080065e4 <__malloc_lock>:
 80065e4:	4801      	ldr	r0, [pc, #4]	@ (80065ec <__malloc_lock+0x8>)
 80065e6:	f7ff bf00 	b.w	80063ea <__retarget_lock_acquire_recursive>
 80065ea:	bf00      	nop
 80065ec:	20001bc8 	.word	0x20001bc8

080065f0 <__malloc_unlock>:
 80065f0:	4801      	ldr	r0, [pc, #4]	@ (80065f8 <__malloc_unlock+0x8>)
 80065f2:	f7ff befb 	b.w	80063ec <__retarget_lock_release_recursive>
 80065f6:	bf00      	nop
 80065f8:	20001bc8 	.word	0x20001bc8

080065fc <__sflush_r>:
 80065fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006604:	0716      	lsls	r6, r2, #28
 8006606:	4605      	mov	r5, r0
 8006608:	460c      	mov	r4, r1
 800660a:	d454      	bmi.n	80066b6 <__sflush_r+0xba>
 800660c:	684b      	ldr	r3, [r1, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	dc02      	bgt.n	8006618 <__sflush_r+0x1c>
 8006612:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	dd48      	ble.n	80066aa <__sflush_r+0xae>
 8006618:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800661a:	2e00      	cmp	r6, #0
 800661c:	d045      	beq.n	80066aa <__sflush_r+0xae>
 800661e:	2300      	movs	r3, #0
 8006620:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006624:	682f      	ldr	r7, [r5, #0]
 8006626:	6a21      	ldr	r1, [r4, #32]
 8006628:	602b      	str	r3, [r5, #0]
 800662a:	d030      	beq.n	800668e <__sflush_r+0x92>
 800662c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800662e:	89a3      	ldrh	r3, [r4, #12]
 8006630:	0759      	lsls	r1, r3, #29
 8006632:	d505      	bpl.n	8006640 <__sflush_r+0x44>
 8006634:	6863      	ldr	r3, [r4, #4]
 8006636:	1ad2      	subs	r2, r2, r3
 8006638:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800663a:	b10b      	cbz	r3, 8006640 <__sflush_r+0x44>
 800663c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800663e:	1ad2      	subs	r2, r2, r3
 8006640:	2300      	movs	r3, #0
 8006642:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006644:	6a21      	ldr	r1, [r4, #32]
 8006646:	4628      	mov	r0, r5
 8006648:	47b0      	blx	r6
 800664a:	1c43      	adds	r3, r0, #1
 800664c:	89a3      	ldrh	r3, [r4, #12]
 800664e:	d106      	bne.n	800665e <__sflush_r+0x62>
 8006650:	6829      	ldr	r1, [r5, #0]
 8006652:	291d      	cmp	r1, #29
 8006654:	d82b      	bhi.n	80066ae <__sflush_r+0xb2>
 8006656:	4a2a      	ldr	r2, [pc, #168]	@ (8006700 <__sflush_r+0x104>)
 8006658:	410a      	asrs	r2, r1
 800665a:	07d6      	lsls	r6, r2, #31
 800665c:	d427      	bmi.n	80066ae <__sflush_r+0xb2>
 800665e:	2200      	movs	r2, #0
 8006660:	6062      	str	r2, [r4, #4]
 8006662:	04d9      	lsls	r1, r3, #19
 8006664:	6922      	ldr	r2, [r4, #16]
 8006666:	6022      	str	r2, [r4, #0]
 8006668:	d504      	bpl.n	8006674 <__sflush_r+0x78>
 800666a:	1c42      	adds	r2, r0, #1
 800666c:	d101      	bne.n	8006672 <__sflush_r+0x76>
 800666e:	682b      	ldr	r3, [r5, #0]
 8006670:	b903      	cbnz	r3, 8006674 <__sflush_r+0x78>
 8006672:	6560      	str	r0, [r4, #84]	@ 0x54
 8006674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006676:	602f      	str	r7, [r5, #0]
 8006678:	b1b9      	cbz	r1, 80066aa <__sflush_r+0xae>
 800667a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800667e:	4299      	cmp	r1, r3
 8006680:	d002      	beq.n	8006688 <__sflush_r+0x8c>
 8006682:	4628      	mov	r0, r5
 8006684:	f7ff fec2 	bl	800640c <_free_r>
 8006688:	2300      	movs	r3, #0
 800668a:	6363      	str	r3, [r4, #52]	@ 0x34
 800668c:	e00d      	b.n	80066aa <__sflush_r+0xae>
 800668e:	2301      	movs	r3, #1
 8006690:	4628      	mov	r0, r5
 8006692:	47b0      	blx	r6
 8006694:	4602      	mov	r2, r0
 8006696:	1c50      	adds	r0, r2, #1
 8006698:	d1c9      	bne.n	800662e <__sflush_r+0x32>
 800669a:	682b      	ldr	r3, [r5, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0c6      	beq.n	800662e <__sflush_r+0x32>
 80066a0:	2b1d      	cmp	r3, #29
 80066a2:	d001      	beq.n	80066a8 <__sflush_r+0xac>
 80066a4:	2b16      	cmp	r3, #22
 80066a6:	d11e      	bne.n	80066e6 <__sflush_r+0xea>
 80066a8:	602f      	str	r7, [r5, #0]
 80066aa:	2000      	movs	r0, #0
 80066ac:	e022      	b.n	80066f4 <__sflush_r+0xf8>
 80066ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066b2:	b21b      	sxth	r3, r3
 80066b4:	e01b      	b.n	80066ee <__sflush_r+0xf2>
 80066b6:	690f      	ldr	r7, [r1, #16]
 80066b8:	2f00      	cmp	r7, #0
 80066ba:	d0f6      	beq.n	80066aa <__sflush_r+0xae>
 80066bc:	0793      	lsls	r3, r2, #30
 80066be:	680e      	ldr	r6, [r1, #0]
 80066c0:	bf08      	it	eq
 80066c2:	694b      	ldreq	r3, [r1, #20]
 80066c4:	600f      	str	r7, [r1, #0]
 80066c6:	bf18      	it	ne
 80066c8:	2300      	movne	r3, #0
 80066ca:	eba6 0807 	sub.w	r8, r6, r7
 80066ce:	608b      	str	r3, [r1, #8]
 80066d0:	f1b8 0f00 	cmp.w	r8, #0
 80066d4:	dde9      	ble.n	80066aa <__sflush_r+0xae>
 80066d6:	6a21      	ldr	r1, [r4, #32]
 80066d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80066da:	4643      	mov	r3, r8
 80066dc:	463a      	mov	r2, r7
 80066de:	4628      	mov	r0, r5
 80066e0:	47b0      	blx	r6
 80066e2:	2800      	cmp	r0, #0
 80066e4:	dc08      	bgt.n	80066f8 <__sflush_r+0xfc>
 80066e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066ee:	81a3      	strh	r3, [r4, #12]
 80066f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066f8:	4407      	add	r7, r0
 80066fa:	eba8 0800 	sub.w	r8, r8, r0
 80066fe:	e7e7      	b.n	80066d0 <__sflush_r+0xd4>
 8006700:	dfbffffe 	.word	0xdfbffffe

08006704 <_fflush_r>:
 8006704:	b538      	push	{r3, r4, r5, lr}
 8006706:	690b      	ldr	r3, [r1, #16]
 8006708:	4605      	mov	r5, r0
 800670a:	460c      	mov	r4, r1
 800670c:	b913      	cbnz	r3, 8006714 <_fflush_r+0x10>
 800670e:	2500      	movs	r5, #0
 8006710:	4628      	mov	r0, r5
 8006712:	bd38      	pop	{r3, r4, r5, pc}
 8006714:	b118      	cbz	r0, 800671e <_fflush_r+0x1a>
 8006716:	6a03      	ldr	r3, [r0, #32]
 8006718:	b90b      	cbnz	r3, 800671e <_fflush_r+0x1a>
 800671a:	f7ff fc81 	bl	8006020 <__sinit>
 800671e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0f3      	beq.n	800670e <_fflush_r+0xa>
 8006726:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006728:	07d0      	lsls	r0, r2, #31
 800672a:	d404      	bmi.n	8006736 <_fflush_r+0x32>
 800672c:	0599      	lsls	r1, r3, #22
 800672e:	d402      	bmi.n	8006736 <_fflush_r+0x32>
 8006730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006732:	f7ff fe5a 	bl	80063ea <__retarget_lock_acquire_recursive>
 8006736:	4628      	mov	r0, r5
 8006738:	4621      	mov	r1, r4
 800673a:	f7ff ff5f 	bl	80065fc <__sflush_r>
 800673e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006740:	07da      	lsls	r2, r3, #31
 8006742:	4605      	mov	r5, r0
 8006744:	d4e4      	bmi.n	8006710 <_fflush_r+0xc>
 8006746:	89a3      	ldrh	r3, [r4, #12]
 8006748:	059b      	lsls	r3, r3, #22
 800674a:	d4e1      	bmi.n	8006710 <_fflush_r+0xc>
 800674c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800674e:	f7ff fe4d 	bl	80063ec <__retarget_lock_release_recursive>
 8006752:	e7dd      	b.n	8006710 <_fflush_r+0xc>

08006754 <__swhatbuf_r>:
 8006754:	b570      	push	{r4, r5, r6, lr}
 8006756:	460c      	mov	r4, r1
 8006758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800675c:	2900      	cmp	r1, #0
 800675e:	b096      	sub	sp, #88	@ 0x58
 8006760:	4615      	mov	r5, r2
 8006762:	461e      	mov	r6, r3
 8006764:	da0d      	bge.n	8006782 <__swhatbuf_r+0x2e>
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800676c:	f04f 0100 	mov.w	r1, #0
 8006770:	bf14      	ite	ne
 8006772:	2340      	movne	r3, #64	@ 0x40
 8006774:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006778:	2000      	movs	r0, #0
 800677a:	6031      	str	r1, [r6, #0]
 800677c:	602b      	str	r3, [r5, #0]
 800677e:	b016      	add	sp, #88	@ 0x58
 8006780:	bd70      	pop	{r4, r5, r6, pc}
 8006782:	466a      	mov	r2, sp
 8006784:	f000 f848 	bl	8006818 <_fstat_r>
 8006788:	2800      	cmp	r0, #0
 800678a:	dbec      	blt.n	8006766 <__swhatbuf_r+0x12>
 800678c:	9901      	ldr	r1, [sp, #4]
 800678e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006792:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006796:	4259      	negs	r1, r3
 8006798:	4159      	adcs	r1, r3
 800679a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800679e:	e7eb      	b.n	8006778 <__swhatbuf_r+0x24>

080067a0 <__smakebuf_r>:
 80067a0:	898b      	ldrh	r3, [r1, #12]
 80067a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067a4:	079d      	lsls	r5, r3, #30
 80067a6:	4606      	mov	r6, r0
 80067a8:	460c      	mov	r4, r1
 80067aa:	d507      	bpl.n	80067bc <__smakebuf_r+0x1c>
 80067ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	6123      	str	r3, [r4, #16]
 80067b4:	2301      	movs	r3, #1
 80067b6:	6163      	str	r3, [r4, #20]
 80067b8:	b003      	add	sp, #12
 80067ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067bc:	ab01      	add	r3, sp, #4
 80067be:	466a      	mov	r2, sp
 80067c0:	f7ff ffc8 	bl	8006754 <__swhatbuf_r>
 80067c4:	9f00      	ldr	r7, [sp, #0]
 80067c6:	4605      	mov	r5, r0
 80067c8:	4639      	mov	r1, r7
 80067ca:	4630      	mov	r0, r6
 80067cc:	f7ff fe8a 	bl	80064e4 <_malloc_r>
 80067d0:	b948      	cbnz	r0, 80067e6 <__smakebuf_r+0x46>
 80067d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067d6:	059a      	lsls	r2, r3, #22
 80067d8:	d4ee      	bmi.n	80067b8 <__smakebuf_r+0x18>
 80067da:	f023 0303 	bic.w	r3, r3, #3
 80067de:	f043 0302 	orr.w	r3, r3, #2
 80067e2:	81a3      	strh	r3, [r4, #12]
 80067e4:	e7e2      	b.n	80067ac <__smakebuf_r+0xc>
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	6020      	str	r0, [r4, #0]
 80067ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ee:	81a3      	strh	r3, [r4, #12]
 80067f0:	9b01      	ldr	r3, [sp, #4]
 80067f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80067f6:	b15b      	cbz	r3, 8006810 <__smakebuf_r+0x70>
 80067f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067fc:	4630      	mov	r0, r6
 80067fe:	f000 f81d 	bl	800683c <_isatty_r>
 8006802:	b128      	cbz	r0, 8006810 <__smakebuf_r+0x70>
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	f023 0303 	bic.w	r3, r3, #3
 800680a:	f043 0301 	orr.w	r3, r3, #1
 800680e:	81a3      	strh	r3, [r4, #12]
 8006810:	89a3      	ldrh	r3, [r4, #12]
 8006812:	431d      	orrs	r5, r3
 8006814:	81a5      	strh	r5, [r4, #12]
 8006816:	e7cf      	b.n	80067b8 <__smakebuf_r+0x18>

08006818 <_fstat_r>:
 8006818:	b538      	push	{r3, r4, r5, lr}
 800681a:	4d07      	ldr	r5, [pc, #28]	@ (8006838 <_fstat_r+0x20>)
 800681c:	2300      	movs	r3, #0
 800681e:	4604      	mov	r4, r0
 8006820:	4608      	mov	r0, r1
 8006822:	4611      	mov	r1, r2
 8006824:	602b      	str	r3, [r5, #0]
 8006826:	f7fa f85c 	bl	80008e2 <_fstat>
 800682a:	1c43      	adds	r3, r0, #1
 800682c:	d102      	bne.n	8006834 <_fstat_r+0x1c>
 800682e:	682b      	ldr	r3, [r5, #0]
 8006830:	b103      	cbz	r3, 8006834 <_fstat_r+0x1c>
 8006832:	6023      	str	r3, [r4, #0]
 8006834:	bd38      	pop	{r3, r4, r5, pc}
 8006836:	bf00      	nop
 8006838:	20001bc4 	.word	0x20001bc4

0800683c <_isatty_r>:
 800683c:	b538      	push	{r3, r4, r5, lr}
 800683e:	4d06      	ldr	r5, [pc, #24]	@ (8006858 <_isatty_r+0x1c>)
 8006840:	2300      	movs	r3, #0
 8006842:	4604      	mov	r4, r0
 8006844:	4608      	mov	r0, r1
 8006846:	602b      	str	r3, [r5, #0]
 8006848:	f7fa f85b 	bl	8000902 <_isatty>
 800684c:	1c43      	adds	r3, r0, #1
 800684e:	d102      	bne.n	8006856 <_isatty_r+0x1a>
 8006850:	682b      	ldr	r3, [r5, #0]
 8006852:	b103      	cbz	r3, 8006856 <_isatty_r+0x1a>
 8006854:	6023      	str	r3, [r4, #0]
 8006856:	bd38      	pop	{r3, r4, r5, pc}
 8006858:	20001bc4 	.word	0x20001bc4

0800685c <_sbrk_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	4d06      	ldr	r5, [pc, #24]	@ (8006878 <_sbrk_r+0x1c>)
 8006860:	2300      	movs	r3, #0
 8006862:	4604      	mov	r4, r0
 8006864:	4608      	mov	r0, r1
 8006866:	602b      	str	r3, [r5, #0]
 8006868:	f7fa f864 	bl	8000934 <_sbrk>
 800686c:	1c43      	adds	r3, r0, #1
 800686e:	d102      	bne.n	8006876 <_sbrk_r+0x1a>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	b103      	cbz	r3, 8006876 <_sbrk_r+0x1a>
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	bd38      	pop	{r3, r4, r5, pc}
 8006878:	20001bc4 	.word	0x20001bc4

0800687c <_init>:
 800687c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687e:	bf00      	nop
 8006880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006882:	bc08      	pop	{r3}
 8006884:	469e      	mov	lr, r3
 8006886:	4770      	bx	lr

08006888 <_fini>:
 8006888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688a:	bf00      	nop
 800688c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800688e:	bc08      	pop	{r3}
 8006890:	469e      	mov	lr, r3
 8006892:	4770      	bx	lr
